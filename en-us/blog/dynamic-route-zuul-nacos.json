{
  "filename": "dynamic-route-zuul-nacos.md",
  "__html": "<blockquote>\n<p>authors:叶志远</p>\n</blockquote>\n<h3>一.前言</h3>\n<p>Nacos是阿里巴巴开源的致力于服务发现与管理、动态配置管理，以及动态DNS服务的中间件，目前已发布至0.5.0版本，除了与Spring Cloud更加紧密结合以外，还丧心病狂地支持JDK11。如果您目前的项目碍于Eureka的性能，而又缺乏成本引进Consul，那么Nacos是您最好的选择。好了，回到正题，在上周许进搞了一个<a href=\"http://xujin.org/sc/gw/gw10/\">使用Nacos实现Spring Cloud Gateway的动态路由</a>，让我们直观地感受到了Nacos的无缝接入如丝般顺滑，作为Spring Cloud中网关的始祖Zuul，自然也需要这一贴心赋能。</p>\n<h3>二.Spring Cloud Zuul动态路由实现思路</h3>\n<p>在社区书籍《重新定义Spring Cloud实战》中第8章4小节，详细剖析了Zuul的路由配置表加载以及刷新原理，其大致思想就是重写SimpleRouteLocator类的locateRoutes()方法，同时实现RefreshableRouteLocator接口，方法体引用父类的doRefresh()方法。在书中使用DB作为配置存放的仓库，如今有更为强大的Nacos，只需要将之前读取DB的逻辑换成读取Nacos即可。美中不足的是，由于Nacos还需进一步完善，目前对Spring Cloud中的事件支持还不是很完美，动态刷新只能依靠Zuul的内部逻辑。</p>\n<h3>三.具体实现</h3>\n<h5>1.在zuul-server中添加Nacos的配置</h5>\n<pre><code>\t&lt;dependency&gt;\n\t\t&lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;\n\t\t&lt;artifactId&gt;nacos-client&lt;/artifactId&gt;\n\t\t&lt;version&gt;0.4.0&lt;/version&gt;\n\t&lt;/dependency&gt;\n</code></pre>\n<h5>2.读取Nacos配置信息核心代码</h5>\n<pre><code>@Component\npublic class PropertiesAssemble{\n\n\tpublic Map&lt;String, ZuulRoute&gt; getProperties() {\n\t\tMap&lt;String, ZuulRoute&gt; routes = new LinkedHashMap&lt;&gt;();\n\t\tList&lt;ZuulRouteEntity&gt; results = listenerNacos(&quot;zuul-server&quot;,&quot;zuul_route&quot;);\n\t\tfor (ZuulRouteEntity result : results) {\n\t\t\tif (StringUtils.isBlank(result.getPath())\n\t\t\t\t\t/*|| org.apache.commons.lang3.StringUtils.isBlank(result.getUrl())*/) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tZuulRoute zuulRoute = new ZuulRoute();\n\t\t\ttry {\n\t\t\t\tBeanUtils.copyProperties(result, zuulRoute);\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\troutes.put(zuulRoute.getPath(), zuulRoute);\n\t\t}\n\t\treturn routes;\n\t}\n\n\tprivate List&lt;ZuulRouteEntity&gt; listenerNacos (String dataId, String group) {\n\t\ttry {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.put(PropertyKeyConst.SERVER_ADDR, &quot;localhost:8848&quot;);\n\t\t\tConfigService configService = NacosFactory.createConfigService(properties);\n\t\t\tString content = configService.getConfig(dataId, group, 5000);\n\t\t\tSystem.out.println(&quot;从Nacos返回的配置：&quot; + content);\n\t\t\t//注册Nacos配置更新监听器，用于监听触发\n//            configService.addListener(dataId, group, new Listener()  {\n//                @Override\n//                public void receiveConfigInfo(String configInfo) {\n//                    System.out.println(&quot;Nacos更新了！&quot;);\n//\n//                }\n//                @Override\n//                public Executor getExecutor() {\n//                    return null;\n//                }\n//            });\n\t\t\treturn JSONObject.parseArray(content, ZuulRouteEntity.class);\n\t\t} catch (NacosException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn new ArrayList&lt;&gt;();\n\t}\n}\n</code></pre>\n<p>目前的demo写得比较简单，直接将Nacos的默认地址与端口写了进来，Nacos对于配置的管理有两个坐标，一是dataId，二是group，本demo中笔者将其分别命名为&quot;zuul-server&quot;,&quot;zuul_route&quot;。</p>\n<h5>3.Zuul动态刷新路由实现</h5>\n<p>这部分可以查看demo地址：<a href=\"https://github.com/SpringCloud/spring-cloud-zuul-nacos\">https://github.com/SpringCloud/spring-cloud-zuul-nacos</a>，具体就不赘述。</p>\n<h3>四.演示</h3>\n<h5>1.从Nacos github地址pull源码，配置环境</h5>\n<p><img src=\"https://img-blog.csdnimg.cn/20181129002717633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JpY2tpeWVhdA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">\n这里需要在IDEA中添加启动参数-Dnacos.standalone=true\n<img src=\"https://img-blog.csdnimg.cn/20181129002856286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JpY2tpeWVhdA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h5>2.启动Nacos，配置Zuul路由信息</h5>\n<p>启动Nacos后，在浏览器输入<a href=\"http://localhost:8848/nacos/index.html\">http://localhost:8848/nacos/index.html</a>便会跳转到如下页面：\n<img src=\"https://img-blog.csdnimg.cn/2018112900323177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JpY2tpeWVhdA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">\n点击配置列表，单击右侧的+号图标，便可以新增一项配置，由于这里已经添加好了，就直接看信息：\n<img src=\"https://img-blog.csdnimg.cn/20181129003545464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JpY2tpeWVhdA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h5>3.启动zuul-server，从Nacos加载路由信息测试</h5>\n<p>启动Zuul后，console中出现如下信息：\n<img src=\"https://img-blog.csdnimg.cn/20181129003851880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JpY2tpeWVhdA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">\n在浏览器输入<a href=\"http://localhost:5555/baidu\">http://localhost:5555/baidu</a>,出现如下效果，直接跳转到目标地址：\n<img src=\"https://img-blog.csdnimg.cn/2018112900414387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JpY2tpeWVhdA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">\n我们现在将Nacos中的配置修改一下，将http://github.com/Lovnx换成http://www.baidu.com，修改后直接发布：\n<img src=\"https://img-blog.csdnimg.cn/20181129004408166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JpY2tpeWVhdA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">\n我们会在console看到：\n<img src=\"https://img-blog.csdnimg.cn/20181129004524375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JpY2tpeWVhdA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">\n在浏览器输入<a href=\"http://localhost:5555/baidu\">http://localhost:5555/baidu</a>,出现如下效果：\n<img src=\"https://img-blog.csdnimg.cn/20181129004810756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JpY2tpeWVhdA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2><a href=\"https://github.com/SpringCloud/spring-cloud-zuul-nacos\">-------------------&gt;&gt;&gt;DEMO源码</a></h2>\n"
}