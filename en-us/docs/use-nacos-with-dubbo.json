{
  "filename": "use-nacos-with-dubbo.md",
  "__html": "<h1>Nacos with Dubbo fusion become registry</h1>\n<p>Nacos as Dubbo ecosystems important registry implementation, including <a href=\"https://github.com/dubbo/dubbo-registry-nacos\"><code>dubbo-registry-nacos</code></a> is Dubbo fusion Nacos registry implementation.</p>\n<h2>Preparatory work</h2>\n<p>When you put <a href=\"https://github.com/apache/dubbo/tree/master/dubbo-registry/dubbo-registry-nacos\"><code>dubbo-registry-nacos</code></a> integrated into your dubbo project before, please make sure the background nacos service has started. If you are still not familiar with the basic use of Nacos, reference <a href=\"https://nacos.io/en-us/docs/quick-start.html\">Quick Start for Nacos</a>.</p>\n<h2>Quick Start</h2>\n<p>Nacos Dubbo fusion become registry procedure is very simple, general steps can be divided into &quot;increasing Maven dependency&quot; and &quot;the registry&quot;.</p>\n<h3>Increasing Maven dependency</h3>\n<p>First, you need to <code>dubbo-registry-nacos</code>Maven dependent on added to your project <code>pom.xml</code> file, and strongly recommend that you use the dubbo <code>2.6.5</code>:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n\n    ...\n        \n    <span class=\"hljs-comment\">&lt;!-- Dubbo Nacos registry dependency --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>dubbo-registry-nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.0.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>   \n    \n    <span class=\"hljs-comment\">&lt;!-- Dubbo dependency --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>dubbo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.6.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    \n    <span class=\"hljs-comment\">&lt;!-- Alibaba Spring Context extension --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-context-support<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n    ...\n    \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></pre>\n<p>When a project to add<code>dubbo-registry-nacos</code>, you don't need to explicitly logic programming to realize service discovery and registration, actual implementation is provided by the third party and then configure Naocs registry.</p>\n<h3>Configuration registry</h3>\n<p>Suppose you Dubbo application using the Spring Framework assembly, there will be two kinds of optional configuration method, respectively: <a href=\"https://mercyblitz.github.io/2018/01/18/Dubbo-%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE/\">Dubbo Spring externalized configuration</a>, and the Spring XML configuration files, and, I strongly recommend the former.</p>\n<h3>Dubbo Spring externalized configuration</h3>\n<p>Dubbo Spring externalized configuration consists of Dubbo <code>2.5.8</code>  introduced new features, through the Spring <code>Environment</code> attribute automatically generate and bind the Dubbo configuration Bean, implement configuration to simplify, and lower the threshold of service development.</p>\n<p>Suppose you Dubbo applications using Zookeeper as registry, and the server IP address is:<code>10.20.153.10</code> at the same time, the registered address as Dubbo externalized configuration properties are stored in <code>dubbo-config.properties</code> file, as shown below:</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">## application</span>\n<span class=\"hljs-meta\">dubbo.application.name</span> = <span class=\"hljs-string\">your-dubbo-application</span>\n<span class=\"hljs-comment\">\n## Zookeeper registry address</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">zookeeper://10.20.153.10:2181</span>\n<span class=\"hljs-attr\">...</span>\n</code></pre>\n<p>Suppose you Nacos Server running on the Server also <code>10.20.153.10</code> , and use the default Nacos service port <code>8848</code>, you only need to <code>dubbo.registry.address</code> property adjustment is as follows:</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">## 其他属性保持不变</span>\n<span class=\"hljs-comment\">\n## Nacos registry address</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">nacos://10.20.153.10:8848</span>\n<span class=\"hljs-comment\">##If you want to use your own namespace, you can use the following two methods:</span>\n<span class=\"hljs-comment\">#dubbo.registry.address = nacos://10.20.153.10:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932</span>\n<span class=\"hljs-comment\">#dubbo.registry.parameters.namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932</span>\n<span class=\"hljs-attr\">...</span>\n</code></pre>\n<p>Then, restart your application Dubbo, Dubbo information services and consumption in Nacos console can show:</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1n6m7zMTqK1RjSZPhXXXfOFXa-2784-1058.png\" alt=\"image-20181213103845976-4668726.png | left | 747x284\"></p>\n<p>As shown, the service name prefix for <code>providers:</code> metainfo for the service provider's information, <code>consumers:</code> represents the service consumer metainfo. Click&quot;<strong>details</strong>&quot; can check the service status details:</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1vZzfzQzoK1RjSZFlXXai4VXa-2714-1588.png\" alt=\"image-20181213104145998-4668906.png | left | 747x437\"></p>\n<p>If you are using a Spring XML configuration file assembly Dubbo registry, please refer to the next section.</p>\n<h3>Spring XML configuration files</h3>\n<p>Similarly, suppose you Dubbo applications using Zookeeper as registry, and the server IP address is:<code>10.20.153.10</code>, and assembling Spring Bean in the XML file, as shown below:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo-provider-xml-demo\"</span>  /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 使用 Zookeeper 注册中心 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://10.20.153.10:2181\"</span> /&gt;</span>\n \t...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>Like <a href=\"https://mercyblitz.github.io/2018/01/18/Dubbo-%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE/\">Dubbo Spring externalized configuration</a> configuration, only need to adjust the <code>address</code> attribute configuration can be:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo-provider-xml-demo\"</span>  /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 使用 Nacos 注册中心 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"nacos://10.20.153.10:8848\"</span> /&gt;</span>\n     <span class=\"hljs-comment\">&lt;!-- If you want to use your own namespace, you can use the following configuration --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- &lt;dubbo:registry address=\"nacos://10.20.153.10:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932\" /&gt; --&gt;</span>\n \t...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>After restart the Dubbo application, you can also find the provider and consumer registered metainfo is presented in Nacos console:</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1zl2dzQPoK1RjSZKbXXX1IXXa-2784-1022.png\" alt=\"image-20181213113049185-4671849.png | left | 747x274\"></p>\n<p>Whether you absolute configuration or switch Nacos registry super Easy? If you are still wanting more or less understand, may refer to the following the complete example.</p>\n<h2>Complete sample</h2>\n<p>Above pictures of metadata from Dubbo Spring annotations driver sample and Dubbo Spring XML configuration driven example, the following will introduce both, you can choose your preference programming model.Before the formal discussion, first to introduce the preparation work, because they are dependent on the Java service interface and <a href=\"http://implementation.At\">implementation.At</a> the same time, <strong>please make sure that the local (<code>127.0.0.1</code>) environment has launched Nacos service</strong>.</p>\n<h3>Sample interface and implementation</h3>\n<p>First define the sample interface, as shown below:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.service;\n\n<span class=\"hljs-comment\">/**\n * DemoService\n *\n * <span class=\"hljs-doctag\">@since</span> 2.6.5\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">DemoService</span> </span>{\n\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayName</span><span class=\"hljs-params\">(String name)</span></span>;\n\n}\n</code></pre>\n<p>Provide the above interface implementation class:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.service;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.RpcContext;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;\n\n<span class=\"hljs-comment\">/**\n * Default {<span class=\"hljs-doctag\">@link</span> DemoService}\n *\n * <span class=\"hljs-doctag\">@since</span> 2.6.5\n */</span>\n<span class=\"hljs-meta\">@Service</span>(version = <span class=\"hljs-string\">\"${demo.service.version}\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DefaultService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DemoService</span> </span>{\n\n    <span class=\"hljs-meta\">@Value</span>(<span class=\"hljs-string\">\"${demo.service.name}\"</span>)\n    <span class=\"hljs-keyword\">private</span> String serviceName;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        RpcContext rpcContext = RpcContext.getContext();\n        <span class=\"hljs-keyword\">return</span> String.format(<span class=\"hljs-string\">\"Service [name :%s , port : %d] %s(\\\"%s\\\") : Hello,%s\"</span>,\n                serviceName,\n                rpcContext.getLocalPort(),\n                rpcContext.getMethodName(),\n                name,\n                name);\n    }\n}\n</code></pre>\n<p>Interface and implementation after ready, the following will be driven by annotations and XML configuration driven their implementation.</p>\n<h3>Spring annotations driver sample</h3>\n<p>Dubbo <code>2.5.7</code> reconstructed the Spring annotations driver programming model.</p>\n<h4>Provider annotation driven implementation</h4>\n<ul>\n<li>Definition of Dubbo provider externalized configuration properties -  <code>provider-config.properties</code></li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">## application</span>\n<span class=\"hljs-meta\">dubbo.application.name</span> = <span class=\"hljs-string\">dubbo-provider-demo</span>\n<span class=\"hljs-comment\">\n## Nacos registry address</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">nacos://127.0.0.1:8848</span>\n<span class=\"hljs-comment\">##If you want to use your own namespace, you can use the following two methods:</span>\n<span class=\"hljs-comment\">#dubbo.registry.address = nacos://127.0.0.1:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932</span>\n<span class=\"hljs-comment\">#dubbo.registry.parameters.namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932</span>\n<span class=\"hljs-comment\">\n## Dubbo Protocol</span>\n<span class=\"hljs-meta\">dubbo.protocol.name</span> = <span class=\"hljs-string\">dubbo</span>\n<span class=\"hljs-meta\">dubbo.protocol.port</span> = <span class=\"hljs-string\">-1</span>\n<span class=\"hljs-comment\">\n# Provider @Service version</span>\n<span class=\"hljs-meta\">demo.service.version</span>=<span class=\"hljs-string\">1.0.0</span>\n<span class=\"hljs-meta\">demo.service.name</span> = <span class=\"hljs-string\">demoService</span>\n</code></pre>\n<ul>\n<li>Implement the provider to guide class - <code>DemoServiceProviderBootstrap</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.provider;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.service.DemoService;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.PropertySource;\n\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * {<span class=\"hljs-doctag\">@link</span> DemoService} provider demo\n */</span>\n<span class=\"hljs-meta\">@EnableDubbo</span>(scanBasePackages = <span class=\"hljs-string\">\"com.alibaba.dubbo.demo.service\"</span>)\n<span class=\"hljs-meta\">@PropertySource</span>(value = <span class=\"hljs-string\">\"classpath:/provider-config.properties\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoServiceProviderBootstrap</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        context.register(DemoServiceProviderBootstrap<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n        context.refresh();\n        System.out.println(<span class=\"hljs-string\">\"DemoService provider is starting...\"</span>);\n        System.in.read();\n    }\n}\n\n</code></pre>\n<p>The annotation <code>@EnableDubbo</code> activation Dubbo annotation driven and externalized configuration, its <code>scanBasePackages</code> properties scanning to specify the Java package, all marked <code>@Service</code> Service interface implementation class exposure for Spring Bean, then be exported Dubbo Service.</p>\n<p><code>@PropertySource</code> is Spring Framework 3.1 introduced the standard import properties annotation configuration resources, it will provide Dubbo externalized configuration.</p>\n<h4>Service consumer comments drive implementation</h4>\n<ul>\n<li>Definition of Dubbo consumer externalized configuration properties -  <code>consumer-config.properties</code></li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">## Dubbo Application info</span>\n<span class=\"hljs-meta\">dubbo.application.name</span> = <span class=\"hljs-string\">dubbo-consumer-demo</span>\n<span class=\"hljs-comment\">\n## Nacos registry address</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">nacos://127.0.0.1:8848</span>\n<span class=\"hljs-comment\">##If you want to use your own namespace, you can use the following two methods:</span>\n<span class=\"hljs-comment\">#dubbo.registry.address = nacos://127.0.0.1:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932</span>\n<span class=\"hljs-comment\">#dubbo.registry.parameters.namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932</span>\n<span class=\"hljs-comment\">\n# @Reference version</span>\n<span class=\"hljs-meta\">demo.service.version</span>= <span class=\"hljs-string\">1.0.0</span>\n</code></pre>\n<p>Similarly, <code>dubbo.registry.address</code> attribute points to Nacos registry, other dubbo service relevant meta information through Nacos registry access.</p>\n<ul>\n<li>Implementation services consumer guide - <code>DemoServiceConsumerBootstrap</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.consumer;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.service.DemoService;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.PropertySource;\n\n<span class=\"hljs-keyword\">import</span> javax.annotation.PostConstruct;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * {<span class=\"hljs-doctag\">@link</span> DemoService} consumer demo\n */</span>\n<span class=\"hljs-meta\">@EnableDubbo</span>\n<span class=\"hljs-meta\">@PropertySource</span>(value = <span class=\"hljs-string\">\"classpath:/consumer-config.properties\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoServiceConsumerBootstrap</span> </span>{\n\n    <span class=\"hljs-meta\">@Reference</span>(version = <span class=\"hljs-string\">\"${demo.service.version}\"</span>)\n    <span class=\"hljs-keyword\">private</span> DemoService demoService;\n\n    <span class=\"hljs-meta\">@PostConstruct</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n            System.out.println(demoService.sayName(<span class=\"hljs-string\">\"小马哥（mercyblitz）\"</span>));\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        context.register(DemoServiceConsumerBootstrap<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n        context.refresh();\n        context.close();\n    }\n}\n\n</code></pre>\n<p>Similarly, <code>@EnableDubbo</code> annotations to activate Dubbo annotation driven and externalized configuration, but the current belong to the Service consumers, without having to specify the Java package name scan label <code>@Service</code> Service implementation.</p>\n<p><code>@Reference</code> is Dubbo remote service dependency injection annotations, need service providers and consumers agreed interface (interface), version (version) and group (group) information.Example, in the current service consumption <code>DemoService</code> service version from the configuration properties file <code>consumer-config.properties</code>.</p>\n<p><code>@PostConstruct</code> code shows when <code>DemoServiceConsumerBootstrap</code> Bean initialization, execution Dubbo ten times remote method invocation.</p>\n<h4>Run annotation driver sample</h4>\n<p>Twice in the local boot <code>DemoServiceProviderBootstrap</code>, the registry will appear two health services:</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1s9fbzMHqK1RjSZFgXXa7JXXa-2390-122.png\" alt=\"image-20181213123909636-4675949.png | left | 747x38\"></p>\n<p>Run again <code>DemoServiceConsumerBootstrap</code>, run results as follows:</p>\n<pre><code>Service [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\n</code></pre>\n<p>Operate, and service consumer using the load balancing strategy, RPC calls ten times the average contribution to two Dubbo provider instance.</p>\n<h3>Spring XML configuration driver sample</h3>\n<p>The Spring XML configuration driven programming model is a traditional Spring assembly components.</p>\n<h4>Provider XML configuration</h4>\n<ul>\n<li>Define the service provider XML context configuration file - <code>/META-INF/spring/dubbo-provider-context.xml</code></li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo-provider-xml-demo\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 使用 Nacos 注册中心 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"nacos://127.0.0.1:8848\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- If you want to use your own namespace, you can use the following configuration --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- &lt;dubbo:registry address=\"nacos://127.0.0.1:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932\" /&gt; --&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 用dubbo协议在随机端口暴露服务 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"-1\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 声明需要暴露的服务接口 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.demo.service.DemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"2.0.0\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 和本地bean一样实现服务 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.demo.service.DefaultService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<ul>\n<li>Implement the provider to guide class - <code>DemoServiceProviderXmlBootstrap</code></li>\n</ul>\n<pre><code class=\"language-xml\">package com.alibaba.dubbo.demo.provider;\n\nimport com.alibaba.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\n/**\n * {@link DemoService} provider demo XML bootstrap\n */\npublic class DemoServiceProviderXmlBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();\n        context.setConfigLocation(\"/META-INF/spring/dubbo-provider-context.xml\");\n        context.refresh();\n        System.out.println(\"DemoService provider (XML) is starting...\");\n        System.in.read();\n    }\n}\n</code></pre>\n<h4>Service consumer driven XML configuration</h4>\n<ul>\n<li>Define the service consumer context XML configuration files - <code>/META-INF/spring/dubbo-consumer-context.xml</code></li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo-consumer-xml-demo\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 使用 Nacos 注册中心 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"nacos://127.0.0.1:8848\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- If you want to use your own namespace, you can use the following configuration --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- &lt;dubbo:registry address=\"nacos://127.0.0.1:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932\" /&gt; --&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 引用服务接口 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.demo.service.DemoService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"2.0.0\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<ul>\n<li>Implementation services consumer guide - <code>DemoServiceConsumerXmlBootstrap</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.consumer;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.service.DemoService;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * {<span class=\"hljs-doctag\">@link</span> DemoService} consumer demo XML bootstrap\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoServiceConsumerXmlBootstrap</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext();\n        context.setConfigLocation(<span class=\"hljs-string\">\"/META-INF/spring/dubbo-consumer-context.xml\"</span>);\n        context.refresh();\n        System.out.println(<span class=\"hljs-string\">\"DemoService consumer (XML) is starting...\"</span>);\n        DemoService demoService = context.getBean(<span class=\"hljs-string\">\"demoService\"</span>, DemoService<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n            System.out.println(demoService.sayName(<span class=\"hljs-string\">\"小马哥（mercyblitz）\"</span>));\n        }\n        context.close();\n    }\n}\n</code></pre>\n<h4>Run the XML configuration driven example</h4>\n<p>Similarly, to start the first two <code>DemoServiceProviderXmlBootstrap</code> bootstrap class, observe Nacos registry service provider changes:</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1HCfbzMHqK1RjSZFgXXa7JXXa-2388-106.png\" alt=\"image-20181213125527201-4676927.png | left | 747x33\"></p>\n<p>XML configuration driven service version for <code>2.0.0</code>, therefore the registration service and correct.</p>\n<p>Again run service consumers leading class <code>DemoServiceConsumerXmlBootstrap</code>, watch the console output:</p>\n<pre><code>Service [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\n</code></pre>\n<p>Results also runs and load balancing is normal, but because the current sample has yet to add attributes <code>demo.service.name</code> of therefore, &quot;name&quot; part of the information output <code>null</code>.</p>\n<p>If your attention or love Dubbo and Nacos open source project, as well as for their points of &quot;star&quot;, related links:</p>\n<ul>\n<li>Apache Dubbo：<a href=\"https://github.com/apache/dubbo\">https://github.com/apache/dubbo</a></li>\n<li>Dubbo Nacos Registry：<a href=\"https://github.com/apache/dubbo/tree/master/dubbo-registry/dubbo-registry-nacos\">https://github.com/apache/dubbo/tree/master/dubbo-registry/dubbo-registry-nacos</a></li>\n<li>Alibaba Nacos：<a href=\"https://github.com/alibaba/nacos\">https://github.com/alibaba/nacos</a></li>\n</ul>\n",
  "link": "/en-us/docs/use-nacos-with-dubbo.html",
  "meta": {
    "title": "Nacos with Dubbo fusion become registry",
    "keywords": "Dubbo,Nacos,registration center",
    "description": "Nacos with Dubbo fusion become registry"
  }
}