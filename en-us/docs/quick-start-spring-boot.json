{
  "filename": "quick-start-spring-boot.md",
  "__html": "<h1>Quick Start for Nacos Spring Boot Projects</h1>\n<p>This quick start introduces how to enable Nacos configuration management and service discovery features for your Spring Boot project.</p>\n<p>For more details about Nacos Spring Boot: <a href=\"https://github.com/nacos-group/nacos-spring-boot-project/wiki/spring-boot-0.2.2-%E4%BB%A5%E5%8F%8A-0.1.2%E7%89%88%E6%9C%AC%E6%96%B0%E5%8A%9F%E8%83%BD%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C\">nacos-spring-boot-project</a>.</p>\n<p>The quick start includes two samples:</p>\n<ul>\n<li>How to enable dynamic configuration updates with Nacos server and nacos-config-spring-boot-starter;</li>\n<li>How to enable service registration and discovery with Nacos Server and nacos-discovery-spring-boot-starter.</li>\n</ul>\n<h2>Prerequisite</h2>\n<p>Follow instructions in <a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">Nacos Quick Start</a> to download Nacos and start the Nacos server.</p>\n<h2>Enable Configuration Service</h2>\n<p>Once you start the Nacos server, you can follow the steps below to enable the Nacos configuration management service for your Spring Boot project.</p>\n<p>Sample project: <a href=\"https://github.com/nacos-group/nacos-examples/tree/master/nacos-spring-boot-example/nacos-spring-boot-config-example\">nacos-spring-boot-config-example</a></p>\n<ol>\n<li>Add the Nacos Spring Boot dependency.</li>\n</ol>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;nacos-config-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;${latest.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p><strong>Note</strong>: Version <a href=\"https://mvnrepository.com/artifact/com.alibaba.boot/nacos-config-spring-boot-starter\">0.2.x.RELEASE</a> is compatible with the Spring Boot 2.0.x line. Version <a href=\"https://mvnrepository.com/artifact/com.alibaba.boot/nacos-config-spring-boot-starter\">0.1.x.RELEASE</a> is compatible with the Spring Boot 1.x line.</p>\n<ol start=\"2\">\n<li>Configure the Nacos server address in <code>application.properties</code> :</li>\n</ol>\n<pre><code>nacos.config.server-addr=127.0.0.1:8848\n</code></pre>\n<ol start=\"3\">\n<li>Use <code>@NacosPropertySource</code> to load the configuration source whose <code>dataId</code> is <code>example</code> , and enable autorefresh of configuration updates:</li>\n</ol>\n<pre><code class=\"language-plain\">@SpringBootApplication\n@NacosPropertySource(dataId = &quot;example&quot;, autoRefreshed = true)\npublic class NacosConfigApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(NacosConfigApplication.class, args);\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>Specify the property value of the <code>@NacosValue</code> annotation of Nacos.</li>\n</ol>\n<pre><code>@Controller\n@RequestMapping(&quot;config&quot;)\npublic class ConfigController {\n\n    @NacosValue(value = &quot;${useLocalCache:false}&quot;, autoRefreshed = true)\n    private boolean useLocalCache;\n\n    @RequestMapping(value = &quot;/get&quot;, method = GET)\n    @ResponseBody\n    public boolean get() {\n        return useLocalCache;\n    }\n}\n</code></pre>\n<ol start=\"5\">\n<li>\n<p>Start <code>NacosConfigApplication</code>and call <code>curl http://localhost:8080/config/get</code>. You will get a return message of <code>false</code>, as no configuration has been published so far.</p>\n</li>\n<li>\n<p>Call <a href=\"https://nacos.io/zh-cn/docs/open-api.html\">Nacos Open API</a> to publish a configuration to the Nacos server. Assume the dataId is <code>example</code>, and the content is <code>useLocalCache=true</code>.</p>\n</li>\n</ol>\n<pre><code>curl -X POST &quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=example&amp;group=DEFAULT_GROUP&amp;content=useLocalCache=true&quot;\n</code></pre>\n<ol start=\"7\">\n<li>Access <code>http://localhost:8080/config/get</code>again, and the returned value will be<code>true</code>，indicating that the value of <code>useLocalCache</code>in your application has been updated.</li>\n</ol>\n<h2>Enable Service Discovery</h2>\n<p>Now you would also like to enable the service discovery feature of Nacos in your Spring Boot project.</p>\n<p>Sample project: <a href=\"https://github.com/nacos-group/nacos-examples/tree/master/nacos-spring-boot-example/nacos-spring-boot-discovery-example\">nacos-spring-boot-discovery-example</a></p>\n<ol>\n<li>Add the Nacos Spring Boot dependency.</li>\n</ol>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;nacos-discovery-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;${latest.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p><strong>Note</strong>: Version <a href=\"https://mvnrepository.com/artifact/com.alibaba.boot/nacos-discovery-spring-boot-starter\">0.2.x.RELEASE</a> is compatible with the Spring Boot 2.0.x line. Version <a href=\"https://mvnrepository.com/artifact/com.alibaba.boot/nacos-discovery-spring-boot-starter\">0.1.x.RELEASE</a> is compatible with the Spring Boot 1.x line.</p>\n<ol start=\"2\">\n<li>Configure the Nacos server address in <code>application.properties</code> :</li>\n</ol>\n<pre><code>nacos.discovery.server-addr=127.0.0.1:8848\n</code></pre>\n<ol start=\"3\">\n<li>Use <code>@NacosInjected</code> to inject a Nacos <code>NamingService</code> instance:</li>\n</ol>\n<pre><code>@Controller\n@RequestMapping(&quot;discovery&quot;)\npublic class DiscoveryController {\n\n    @NacosInjected\n    private NamingService namingService;\n\n    @RequestMapping(value = &quot;/get&quot;, method = GET)\n    @ResponseBody\n    public List&lt;Instance&gt; get(@RequestParam String serviceName) throws NacosException {\n        return namingService.getAllInstances(serviceName);\n    }\n}\n\n@SpringBootApplication\npublic class NacosDiscoveryApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(NacosDiscoveryApplication.class, args);\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>\n<p>Start <code>NacosDiscoveryApplication</code>and call <code>curl http://localhost:8080/discovery/get?serviceName=example</code>，you will get a return value of an empty JSON array <code>[]</code>.</p>\n</li>\n<li>\n<p>Call <a href=\"https://nacos.io/zh-cn/docs/open-api.html\">Nacos Open API</a> to register a service called <code>example</code> to the Nacos server.</p>\n</li>\n</ol>\n<pre><code>curl -X PUT 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=example&amp;ip=127.0.0.1&amp;port=8080'\n</code></pre>\n<ol start=\"6\">\n<li>Access <code>curl http://localhost:8080/discovery/get?serviceName=example</code>again and you will get the following return:</li>\n</ol>\n<pre><code>[\n  {\n    &quot;instanceId&quot;: &quot;127.0.0.1-8080-DEFAULT-example&quot;,\n    &quot;ip&quot;: &quot;127.0.0.1&quot;,\n    &quot;port&quot;: 8080,\n    &quot;weight&quot;: 1.0,\n    &quot;healthy&quot;: true,\n    &quot;cluster&quot;: {\n      &quot;serviceName&quot;: null,\n      &quot;name&quot;: &quot;&quot;,\n      &quot;healthChecker&quot;: {\n        &quot;type&quot;: &quot;TCP&quot;\n      },\n      &quot;defaultPort&quot;: 80,\n      &quot;defaultCheckPort&quot;: 80,\n      &quot;useIPPort4Check&quot;: true,\n      &quot;metadata&quot;: {}\n    },\n    &quot;service&quot;: null,\n    &quot;metadata&quot;: {}\n  }\n]\n</code></pre>\n<h2>Related Projects</h2>\n<ul>\n<li><a href=\"https://github.com/alibaba/nacos\">Nacos</a></li>\n<li><a href=\"https://github.com/nacos-group/nacos-spring-project\">Nacos Spring</a></li>\n<li><a href=\"https://github.com/nacos-group/nacos-spring-boot-project\">Nacos Spring Boot</a></li>\n<li><a href=\"https://github.com/alibaba/spring-cloud-alibaba\">Spring Cloud Alibaba</a></li>\n</ul>\n",
  "link": "/en-us/docs/quick-start-spring-boot.html",
  "meta": {
    "title": "Quick Start for Nacos Spring Boot Projects",
    "keywords": "Nacos,Spring Boot",
    "description": "Quick Start for Nacos Spring Boot Projects"
  }
}