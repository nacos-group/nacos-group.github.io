{
  "filename": "auth.md",
  "__html": "<blockquote>\n<p>注意</p>\n<ul>\n<li>Nacos是一个内部微服务组件，需要在可信的内部网络中运行，不可暴露在公网环境，防止带来安全风险。</li>\n<li>Nacos提供简单的鉴权实现，为防止业务错用的弱鉴权体系，不是防止恶意攻击的强鉴权体系。</li>\n<li>如果运行在不可信的网络环境或者有强鉴权诉求，请参考官方简单实现做替换增强。</li>\n</ul>\n</blockquote>\n<h1>鉴权</h1>\n<h2>服务端如何开启鉴权</h2>\n<h3>非Docker环境</h3>\n<p>按照官方文档配置启动,默认是不需要登录的，这样会导致配置中心对外直接暴露。而启用鉴权之后，需要在使用用户名和密码登录之后，才能正常使用nacos。</p>\n<p>开启鉴权之前，application.properties中的配置信息为：</p>\n<pre><code class=\"language-java\">### If turn on auth system:\nnacos.core.auth.enabled=false\n</code></pre>\n<p>开启鉴权之后，application.properties中的配置信息为：</p>\n<pre><code class=\"language-java\">### If turn on auth system:\nnacos.core.auth.enabled=true\n</code></pre>\n<h3>Docker环境</h3>\n<h4>官方镜像</h4>\n<p>如果使用官方镜像，请在启动docker容器时，添加如下环境变量</p>\n<pre><code class=\"language-powershell\">NACOS_AUTH_ENABLE=true\n</code></pre>\n<p>例如，可以通过如下命令运行开启了鉴权的容器:</p>\n<pre><code class=\"language-powershell\">docker run -<span class=\"hljs-literal\">-env</span> PREFER_HOST_MODE=hostname -<span class=\"hljs-literal\">-env</span> MODE=standalone -<span class=\"hljs-literal\">-env</span> NACOS_AUTH_ENABLE=true <span class=\"hljs-literal\">-p</span> <span class=\"hljs-number\">8848</span>:<span class=\"hljs-number\">8848</span> nacos/nacos<span class=\"hljs-literal\">-server</span>\n</code></pre>\n<p>除此之外，还可以添加其他鉴权相关的环境变量信息：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>description</th>\n<th>option</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NACOS_AUTH_ENABLE</td>\n<td>是否开启权限系统</td>\n<td>默认:false</td>\n</tr>\n<tr>\n<td>NACOS_AUTH_TOKEN_EXPIRE_SECONDS</td>\n<td>token 失效时间</td>\n<td>默认:18000</td>\n</tr>\n<tr>\n<td>NACOS_AUTH_TOKEN</td>\n<td>token</td>\n<td>默认:SecretKey012345678901234567890123456789012345678901234567890123456789</td>\n</tr>\n<tr>\n<td>NACOS_AUTH_CACHE_ENABLE</td>\n<td>权限缓存开关 ,开启后权限缓存的更新默认有15秒的延迟</td>\n<td>默认 : false</td>\n</tr>\n</tbody>\n</table>\n<p>然后运行docker-compose构建命令,例如</p>\n<pre><code class=\"language-powershell\">docker<span class=\"hljs-literal\">-compose</span> <span class=\"hljs-operator\">-f</span> example/standalone<span class=\"hljs-literal\">-derby</span>.yaml up\n</code></pre>\n<h4>自定义镜像</h4>\n<p>如果选择自定义镜像，请在构建镜像之前，修改nacos工程中的application.properties文件，</p>\n<p>将下面这一行配置信息</p>\n<pre><code>nacos.core.auth.enabled=false\n</code></pre>\n<p>修改为</p>\n<pre><code>nacos.core.auth.enabled=true\n</code></pre>\n<p>然后再配置nacos启动命令。</p>\n<h2>客户端如何进行鉴权</h2>\n<h3>Java SDK鉴权</h3>\n<p>在构建“Properties”类时,需传入用户名和密码。</p>\n<pre><code class=\"language-java\">properties.put(<span class=\"hljs-string\">\"username\"</span>,<span class=\"hljs-string\">\"${username}\"</span>);\nproperties.put(<span class=\"hljs-string\">\"password\"</span>,<span class=\"hljs-string\">\"${password}\"</span>);\n</code></pre>\n<h4>示例代码</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// Initialize the configuration service, and the console automatically obtains the following parameters through the sample code.</span>\n\tString serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\n\tProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\n\tproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\n\n    <span class=\"hljs-comment\">// if need username and password to login</span>\n        properties.put(<span class=\"hljs-string\">\"username\"</span>,<span class=\"hljs-string\">\"nacos\"</span>);\n        properties.put(<span class=\"hljs-string\">\"password\"</span>,<span class=\"hljs-string\">\"nacos\"</span>);\n\n\tConfigService configService = NacosFactory.createConfigService(properties);\n} <span class=\"hljs-keyword\">catch</span> (NacosException e) {\n    <span class=\"hljs-comment\">// TODO Auto-generated catch block</span>\n    e.printStackTrace();\n}\n</code></pre>\n<h3>其他语言的SDK鉴权</h3>\n<p>待补充</p>\n<h3>Open-API鉴权</h3>\n<p>首先需要使用用户名和密码登陆nacos。</p>\n<pre><code class=\"language-plain\">curl -X POST '127.0.0.1:8848/nacos/v1/auth/login' -d 'username=nacos&amp;password=nacos'\n</code></pre>\n<p>若用户名和密码正确,返回信息如下:</p>\n<pre><code>{&quot;accessToken&quot;:&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYwNTYyOTE2Nn0.2TogGhhr11_vLEjqKko1HJHUJEmsPuCxkur-CfNojDo&quot;,&quot;tokenTtl&quot;:18000,&quot;globalAdmin&quot;:true}\n</code></pre>\n<p>接下来进行配置信息或服务信息时,应当使用该accessToken鉴权,在url后添加参数accessToken={accessToken},其中{accessToken}为登录时返回的token信息，例如</p>\n<pre><code class=\"language-plain\">curl -X GET '127.0.0.1:8848/nacos/v1/cs/configs?accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYwNTYyMzkyM30.O-s2yWfDSUZ7Svd3Vs7jy9tsfDNHs1SuebJB4KlNY8Q&amp;dataId=nacos.example.1&amp;group=nacos_group'\n</code></pre>\n<pre><code class=\"language-plain\">curl -X POST 'http://127.0.0.1:8848/nacos/v1/ns/instance?accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYwNTYyMzkyM30.O-s2yWfDSUZ7Svd3Vs7jy9tsfDNHs1SuebJB4KlNY8Q&amp;port=8848&amp;healthy=true&amp;ip=11.11.11.11&amp;weight=1.0&amp;serviceName=nacos.test.3&amp;encoding=GBK&amp;namespaceId=n1'\n</code></pre>\n<h2>开启服务身份识别功能</h2>\n<p>开启鉴权功能后，服务端之间的请求也会通过鉴权系统的影响。考虑到服务端之间的通信应该是可信的，因此在1.2~1.4.0版本期间，通过User-Agent中是否包含Nacos-Server来进行判断请求是否来自其他服务端。</p>\n<p>但这种实现由于过于简单且固定，导致可能存在安全问题。因此从1.4.1版本开始，Nacos添加服务身份识别功能，用户可以自行配置服务端的Identity，不再使用User-Agent作为服务端请求的判断标准。</p>\n<p>开启方式:</p>\n<pre><code>### 开启鉴权\nnacos.core.auth.enabled=true\n\n### 关闭使用user-agent判断服务端请求并放行鉴权的功能\nnacos.core.auth.enable.userAgentAuthWhite=false\n\n### 配置自定义身份识别的key（不可为空）和value（不可为空）\nnacos.core.auth.server.identity.key=example\nnacos.core.auth.server.identity.value=example\n</code></pre>\n<p>** 注意 ** 所有集群均需要配置相同的<code>server.identity</code>信息，否则可能导致服务端之间数据不一致或无法删除实例等问题。</p>\n<h3>旧版本升级</h3>\n<p>考虑到旧版本用户需要升级，可以在升级期间，开启<code>nacos.core.auth.enable.userAgentAuthWhite=true</code>功能，待集群整体升级到1.4.1并稳定运行后，再关闭此功能。</p>\n",
  "link": "/zh-cn/docs/auth.html",
  "meta": {
    "title": "Authorization",
    "keywords": "Authorization",
    "description": "Authorization"
  }
}