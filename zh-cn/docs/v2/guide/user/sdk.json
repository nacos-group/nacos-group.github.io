{
  "filename": "sdk.md",
  "__html": "<h1>Java SDK</h1>\n<h2>概述部分</h2>\n<p>Maven 坐标</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;\n    &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;\n    &lt;version&gt;${version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p>注意：由于Nacos Java SDK在2.0版本后引入了gRPC，为了避免用户业务引入的gRPC版本不同导致冲突，使用了shaded技术将部分依赖直接封装进nacos-client中，导致nacos-client较大。\n如果用户未自行引入gRPC或确认版本无冲突，希望使用纯净版的nacos-client以减小依赖，可以使用classifier来指定使用纯净版。</p>\n</blockquote>\n<pre><code class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 2.1.2版本以上支持纯净版客户端 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nacos.version</span>&gt;</span>2.1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nacos.version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${nacos.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!-- 指定纯净版SDK --&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">classifier</span>&gt;</span>pure<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">classifier</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 使用纯净版时必须要引入同版本nacos-api和nacos-common，否则可能出现运行时找不到类的问题 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>${project.groupId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-common<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${nacos.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>${project.groupId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${nacos.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></pre>\n<h2>配置管理</h2>\n<h3>获取配置</h3>\n<h4>描述</h4>\n<p>用于服务启动的时候从 Nacos 获取配置。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getConfig</span><span class=\"hljs-params\">(String dataId, String group, <span class=\"hljs-keyword\">long</span> timeoutMs)</span> <span class=\"hljs-keyword\">throws</span> NacosException\n</span></code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dataId</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;），不超过 256 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">group</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置分组，建议填写产品名:模块名（Nacos:Test）保证唯一性，只允许英文字符和4种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;），不超过128字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timeout</td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">读取配置超时时间，单位 ms，推荐值 3000。</td>\n</tr>\n</tbody>\n</table>\n<h4>返回值</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置值</td>\n</tr>\n</tbody>\n</table>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">try</span> {\n\tString serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\n\tString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\n\tString group = <span class=\"hljs-string\">\"{group}\"</span>;\n\tProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\n\tproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\n\tConfigService configService = NacosFactory.createConfigService(properties);\n\tString content = configService.getConfig(dataId, group, <span class=\"hljs-number\">5000</span>);\n\tSystem.out.println(content);\n} <span class=\"hljs-keyword\">catch</span> (NacosException e) {\n    <span class=\"hljs-comment\">// TODO Auto-generated catch block</span>\n    e.printStackTrace();\n}\n</code></pre>\n<h4>异常说明</h4>\n<p>读取配置超时或网络异常，抛出 NacosException 异常。</p>\n<h3>监听配置</h3>\n<h4>描述</h4>\n<p>如果希望 Nacos 推送配置变更，可以使用 Nacos 动态监听配置接口来实现。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addListener</span><span class=\"hljs-params\">(String dataId, String group, Listener listener)</span> \n</span></code></pre>\n<h4>请求参数</h4>\n<div class=\"bi-table\">\n  <table>\n    <colgroup>\n      <col width=\"auto\" />\n      <col width=\"auto\" />\n      <col width=\"auto\" />\n    </colgroup>\n    <tbody>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">参数名</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">参数类型</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">描述</div>\n        </td>\n      </tr>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">dataId</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">string</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。 全部字符小写。只允许英文字符和 4 种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;）。不超过 256 字节。</div>\n        </td>\n      </tr>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">group</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">string</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">配置分组，建议填写<strong>产品名：模块名</strong>（如 Nacos:Test）保证唯一性。 只允许英文字符和4种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;），不超过128字节。\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">listener</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">Listener</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">监听器，配置变更进入监听器的回调函数。</div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<h4>返回值</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置值，初始化或者配置变更的时候通过回调函数返回该值。</td>\n</tr>\n</tbody>\n</table>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">String serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\nString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\nString group = <span class=\"hljs-string\">\"{group}\"</span>;\nProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\nproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\nConfigService configService = NacosFactory.createConfigService(properties);\nString content = configService.getConfig(dataId, group, <span class=\"hljs-number\">5000</span>);\nSystem.out.println(content);\nconfigService.addListener(dataId, group, <span class=\"hljs-keyword\">new</span> Listener() {\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">receiveConfigInfo</span><span class=\"hljs-params\">(String configInfo)</span> </span>{\n\t\tSystem.out.println(<span class=\"hljs-string\">\"recieve1:\"</span> + configInfo);\n\t}\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title\">getExecutor</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n\t}\n});\n\n<span class=\"hljs-comment\">// 测试让主线程不退出，因为订阅配置是守护线程，主线程退出守护线程就会退出。 正式代码中无需下面代码</span>\n<span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n        Thread.sleep(<span class=\"hljs-number\">1000</span>);\n    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>\n<h3>删除监听</h3>\n<h4>描述</h4>\n<p>取消监听配置，取消监听后配置不会再推送。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeListener</span><span class=\"hljs-params\">(String dataId, String group, Listener listener)</span>\n</span></code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dataId</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;），不超过 256 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">group</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置分组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">listener</td>\n<td style=\"text-align:left\">ConfigChangeListenerAdapter</td>\n<td style=\"text-align:left\">监听器，配置变更进入监听器的回调函数。</td>\n</tr>\n</tbody>\n</table>\n<h4>使用示例</h4>\n<pre><code class=\"language-java\">String serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\nString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\nString group = <span class=\"hljs-string\">\"{group}\"</span>;\nProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\nproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\nConfigService configService = NacosFactory.createConfigService(properties);\nconfigService.removeListener(dataId, group, yourListener);\n</code></pre>\n<h3>发布配置</h3>\n<h4>描述</h4>\n<p>用于通过程序自动发布 Nacos 配置，以便通过自动化手段降低运维成本。</p>\n<p>注意：创建和修改配置时使用的同一个发布接口，当配置不存在时会创建配置，当配置已存在时会更新配置。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">publishConfig</span><span class=\"hljs-params\">(String dataId, String group, String content)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-meta\">@Since</span> <span class=\"hljs-number\">1.4</span><span class=\"hljs-number\">.1</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">publishConfig</span><span class=\"hljs-params\">(String dataId, String group, String content, String type)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dataId</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置 ID，采用类似 <code>package.class</code>（如 <code>com.taobao.tc.refund.log.level</code>）的命名规则保证全局唯一性。建议根据配置的业务含义来定义 class 部分。全部字符均为小写。只允许英文字符和 4 种特殊字符（“.”、“:”、“-”、“_”），不超过 256 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">group</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置分组，建议填写<code>产品名:模块名</code>（如 Nacos<code>:Test</code>）来保证唯一性。只允许英文字符和 4 种特殊字符（“.”、“:”、“-”、“_”），不超过 128 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">content</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置内容，不超过 100K 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">type</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">@Since 1.4.1. 配置类型，见 <code>com.alibaba.nacos.api.config.ConfigType</code>，默认为TEXT</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">是否发布成功</td>\n</tr>\n</tbody>\n</table>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 初始化配置服务，控制台通过示例代码自动获取下面参数</span>\n\tString serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\n\tString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\n\tString group = <span class=\"hljs-string\">\"{group}\"</span>;\n\tProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\n\tproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\n    ConfigService configService = NacosFactory.createConfigService(properties);\n\t<span class=\"hljs-keyword\">boolean</span> isPublishOk = configService.publishConfig(dataId, group, <span class=\"hljs-string\">\"content\"</span>);\n\tSystem.out.println(isPublishOk);\n} <span class=\"hljs-keyword\">catch</span> (NacosException e) {\n    <span class=\"hljs-comment\">// TODO Auto-generated catch block</span>\n    e.printStackTrace();\n}\n</code></pre>\n<h4>异常说明</h4>\n<p>读取配置超时或网络异常，抛出 NacosException 异常。</p>\n<h3>删除配置</h3>\n<h4>描述</h4>\n<p>用于通过程序自动删除 Nacos 配置，以便通过自动化手段降低运维成本。</p>\n<p><strong>注意：</strong> 当配置已存在时会删除该配置，当配置不存在时会直接返回成功消息。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">removeConfig</span><span class=\"hljs-params\">(String dataId, String group)</span> <span class=\"hljs-keyword\">throws</span> NacosException\n\n</span></code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dataId</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">group</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置分组</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">是否删除成功</td>\n</tr>\n</tbody>\n</table>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 初始化配置服务，控制台通过示例代码自动获取下面参数</span>\n\tString serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\n\tString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\n\tString group = <span class=\"hljs-string\">\"{group}\"</span>;\n\tProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\n\tproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\n\n\tConfigService configService = NacosFactory.createConfigService(properties);\n\t<span class=\"hljs-keyword\">boolean</span> isRemoveOk = configService.removeConfig(dataId, group);\n\tSystem.out.println(isRemoveOk);\n} <span class=\"hljs-keyword\">catch</span> (NacosException e) {\n    <span class=\"hljs-comment\">// TODO Auto-generated catch block</span>\n    e.printStackTrace();\n}\n</code></pre>\n<h4>异常说明</h4>\n<p>读取配置超时或网络异常，抛出 NacosException 异常。</p>\n<h2>服务发现SDK</h2>\n<h3>注册实例</h3>\n<h4>描述注册一个实例到服务。</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerInstance</span><span class=\"hljs-params\">(String serviceName, String ip, <span class=\"hljs-keyword\">int</span> port)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerInstance</span><span class=\"hljs-params\">(String serviceName, String ip, <span class=\"hljs-keyword\">int</span> port, String clusterName)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerInstance</span><span class=\"hljs-params\">(String serviceName, Instance instance)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ip</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务实例IP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">port</td>\n<td style=\"text-align:left\">int</td>\n<td>服务实例port</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusterName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>集群名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">instance</td>\n<td style=\"text-align:left\">参见代码注释</td>\n<td>实例属性</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>无</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nnaming.registerInstance(<span class=\"hljs-string\">\"nacos.test.3\"</span>, <span class=\"hljs-string\">\"11.11.11.11\"</span>, <span class=\"hljs-number\">8888</span>, <span class=\"hljs-string\">\"TEST1\"</span>);\n\nInstance instance = <span class=\"hljs-keyword\">new</span> Instance();\ninstance.setIp(<span class=\"hljs-string\">\"55.55.55.55\"</span>);\ninstance.setPort(<span class=\"hljs-number\">9999</span>);\ninstance.setHealthy(<span class=\"hljs-keyword\">false</span>);\ninstance.setWeight(<span class=\"hljs-number\">2.0</span>);\nMap&lt;String, String&gt; instanceMeta = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\ninstanceMeta.put(<span class=\"hljs-string\">\"site\"</span>, <span class=\"hljs-string\">\"et2\"</span>);\ninstance.setMetadata(instanceMeta);\n\nService service = <span class=\"hljs-keyword\">new</span> Service(<span class=\"hljs-string\">\"nacos.test.4\"</span>);\nservice.setApp(<span class=\"hljs-string\">\"nacos-naming\"</span>);\nservice.sethealthCheckMode(<span class=\"hljs-string\">\"server\"</span>);\nservice.setEnableHealthCheck(<span class=\"hljs-keyword\">true</span>);\nservice.setProtectThreshold(<span class=\"hljs-number\">0.8F</span>);\nservice.setGroup(<span class=\"hljs-string\">\"CNCF\"</span>);\nMap&lt;String, String&gt; serviceMeta = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\nserviceMeta.put(<span class=\"hljs-string\">\"symmetricCall\"</span>, <span class=\"hljs-string\">\"true\"</span>);\nservice.setMetadata(serviceMeta);\ninstance.setService(service);\n\nCluster cluster = <span class=\"hljs-keyword\">new</span> Cluster();\ncluster.setName(<span class=\"hljs-string\">\"TEST5\"</span>);\nAbstractHealthChecker.Http healthChecker = <span class=\"hljs-keyword\">new</span> AbstractHealthChecker.Http();\nhealthChecker.setExpectedResponseCode(<span class=\"hljs-number\">400</span>);\nhealthChecker.setCurlHost(<span class=\"hljs-string\">\"USer-Agent|Nacos\"</span>);\nhealthChecker.setCurlPath(<span class=\"hljs-string\">\"/xxx.html\"</span>);\ncluster.setHealthChecker(healthChecker);\nMap&lt;String, String&gt; clusterMeta = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\nclusterMeta.put(<span class=\"hljs-string\">\"xxx\"</span>, <span class=\"hljs-string\">\"yyyy\"</span>);\ncluster.setMetadata(clusterMeta);\n\ninstance.setCluster(cluster);\n\nnaming.registerInstance(<span class=\"hljs-string\">\"nacos.test.4\"</span>, instance);\n</code></pre>\n<h3>注销实例</h3>\n<h4>描述</h4>\n<p>删除服务下的一个实例。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deregisterInstance</span><span class=\"hljs-params\">(String serviceName, String ip, <span class=\"hljs-keyword\">int</span> port)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deregisterInstance</span><span class=\"hljs-params\">(String serviceName, String ip, <span class=\"hljs-keyword\">int</span> port, String clusterName)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ip</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">服务实例IP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">port</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">服务实例port</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusterName</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">集群名</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>无</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nnaming.deregisterInstance(<span class=\"hljs-string\">\"nacos.test.3\"</span>, <span class=\"hljs-string\">\"11.11.11.11\"</span>, <span class=\"hljs-number\">8888</span>, <span class=\"hljs-string\">\"DEFAULT\"</span>);\n</code></pre>\n<h3>获取全部实例</h3>\n<h4>描述</h4>\n<p>获取服务下的所有实例。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\">List&lt;Instance&gt; <span class=\"hljs-title\">getAllInstances</span><span class=\"hljs-params\">(String serviceName)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\">List&lt;Instance&gt; <span class=\"hljs-title\">getAllInstances</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>List<Instance> 实例列表。</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nSystem.out.println(naming.getAllInstances(<span class=\"hljs-string\">\"nacos.test.3\"</span>));\n</code></pre>\n<h3>获取健康或不健康实例列表</h3>\n<h4>描述</h4>\n<p>根据条件获取过滤后的实例列表。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\">List&lt;Instance&gt; <span class=\"hljs-title\">selectInstances</span><span class=\"hljs-params\">(String serviceName, <span class=\"hljs-keyword\">boolean</span> healthy)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\">List&lt;Instance&gt; <span class=\"hljs-title\">selectInstances</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters, <span class=\"hljs-keyword\">boolean</span> healthy)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">healthy</td>\n<td style=\"text-align:left\">boolean</td>\n<td>是否健康</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>List<Instance> 实例列表。</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nSystem.out.println(naming.selectInstances(<span class=\"hljs-string\">\"nacos.test.3\"</span>, <span class=\"hljs-keyword\">true</span>));\n</code></pre>\n<h3>获取一个健康实例</h3>\n<h4>描述</h4>\n<p>根据负载均衡算法随机获取一个健康实例。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\">Instance <span class=\"hljs-title\">selectOneHealthyInstance</span><span class=\"hljs-params\">(String serviceName)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\">Instance <span class=\"hljs-title\">selectOneHealthyInstance</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>Instance 实例。</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nSystem.out.println(naming.selectOneHealthyInstance(<span class=\"hljs-string\">\"nacos.test.3\"</span>));\n</code></pre>\n<h3>监听服务</h3>\n<h4>描述</h4>\n<p>监听服务下的实例列表变化。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">subscribe</span><span class=\"hljs-params\">(String serviceName, EventListener listener)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">subscribe</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters, EventListener listener)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">listener</td>\n<td style=\"text-align:left\">EventListener</td>\n<td>回调listener</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>无</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nnaming.subscribe(<span class=\"hljs-string\">\"nacos.test.3\"</span>, event -&gt; {\n    <span class=\"hljs-keyword\">if</span> (event <span class=\"hljs-keyword\">instanceof</span> NamingEvent) {\n        System.out.println(((NamingEvent) event).getServceName());\n        System.out.println(((NamingEvent) event).getInstances());\n    }\n});\n</code></pre>\n<h3>取消监听服务</h3>\n<h4>描述</h4>\n<p>取消监听服务下的实例列表变化。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unsubscribe</span><span class=\"hljs-params\">(String serviceName, EventListener listener)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unsubscribe</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters, EventListener listener)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">listener</td>\n<td style=\"text-align:left\">EventListener</td>\n<td>回调listener</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>无</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">\nNamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nnaming.unsubscribe(<span class=\"hljs-string\">\"nacos.test.3\"</span>, event -&gt; {});\n\n</code></pre>\n<h2>NacosClientProperties （Beta）</h2>\n<h3>介绍</h3>\n<p>该类作为 client-sdk 参数配置总入口, 用于替代以前 properties 的方式. 该类共有4个取值范围, 分别是: 用户自定义、jvm命令行参数、系统环境变量和默认配置.</p>\n<p>该类可以指定取值范围优先级以改变查找顺序, 默认查找顺序: 用户自定义-&gt;jvm命令行参数-&gt;系统环境变量-&gt;默认配置, 该类取值时会依次查找,直到获取值为止.</p>\n<p>目前还处于 beta测试阶段, Naming 和 Config 入口处的 Properties 并未进行替换更改, 内部已经替换成 <code>NacosClientProperties</code>.</p>\n<h3>如何使用</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 设置一个全局共享的 key</span>\nNacosClientProperties.PROTOTYPE.setProperty(<span class=\"hljs-string\">\"global-key1\"</span>, <span class=\"hljs-string\">\"global-value1\"</span>);\n\n<span class=\"hljs-comment\">// 从全局共享配置中创建一个私有的配置</span>\nNacosClientProperties properties1 = NacosClientProperties.derive();\nproperties1.setProperty(<span class=\"hljs-string\">\"private-key\"</span>,<span class=\"hljs-string\">\"value1\"</span>);\n\nString v1 = properties1.getProperty(<span class=\"hljs-string\">\"private-key\"</span>); <span class=\"hljs-comment\">// v1 == value1</span>\n<span class=\"hljs-comment\">// 自身未能查找到 global-key1 向上查找</span>\nString v2 = properties1.getProperty(<span class=\"hljs-string\">\"global-key1\"</span>); <span class=\"hljs-comment\">// v2 == global-value1</span>\n\n</code></pre>\n<h3>设计</h3>\n<p><img src=\"/img/nacos_client_properties-class-relationship.png\" alt=\"nacos_client_properties-class-relationship.png\"></p>\n<p><code>NacosClientProperties</code> 默认实现是 <code>SearchableProperties</code>, <code>SearchableProperties</code> 只能由 <code>NacosClientProperties</code> 接口中的 <code>PROTOTYPE</code> 进行派生.派生可以理解为配置的一种继承.</p>\n<h4>配置继承</h4>\n<p><img src=\"/img/nacos_client_properties_extends.png\" alt=\"nacos_client_properties_extends.png\"></p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-comment\">// 默认查找顺序: 用户自定义-&gt;jvm命令行参数-&gt;系统环境变量-&gt;默认配置</span>\n\nSystem.setProperty(<span class=\"hljs-string\">\"jvm-key1\"</span>, <span class=\"hljs-string\">\"jvm\"</span>);\n\nNacosClientProperties.PROTOTYPE.setProperty(<span class=\"hljs-string\">\"global-key1\"</span>, <span class=\"hljs-string\">\"value1\"</span>);\n\n<span class=\"hljs-comment\">// 派生出新配置</span>\nNacosClientProperties properties1 = NacosClientProperties.derive();\nproperties1.setProperty(<span class=\"hljs-string\">\"properties1\"</span>, <span class=\"hljs-string\">\"value2\"</span>);\n\n<span class=\"hljs-comment\">// 查找顺序为 自身 -&gt; 父 properties -&gt; jvm -&gt; system env -&gt; default-setting</span>\nString v1 = properties1.getProperty(<span class=\"hljs-string\">\"global-key1\"</span>); <span class=\"hljs-comment\">//  v1 == value1 </span>\nString v2 = properties1.getProperty(<span class=\"hljs-string\">\"jvm-key1\"</span>); <span class=\"hljs-comment\">// v2 == jvm</span>\n\n\n\nNacosClientProperties properties2 = properties1.derive();\nproperties2.getProperty(<span class=\"hljs-string\">\"properties1\"</span>);\n\n<span class=\"hljs-comment\">// 查找顺序为 自身 -&gt; 父 properties -&gt; 父 properties -&gt; jvm -&gt; system env -&gt; default-setting</span>\nString v3 = properties2.getProperty(<span class=\"hljs-string\">\"properties1\"</span>); <span class=\"hljs-comment\">// v3 == value2</span>\n\n</code></pre>\n<h4>查找优先级</h4>\n<p>取值范围总共分为4个:</p>\n<ul>\n<li>PROPERTIES (用户自定义)</li>\n<li>JVM (jvm命令行参数)</li>\n<li>ENV (系统环境变量)</li>\n<li>DEFAULT_SETTING (默认配置)</li>\n</ul>\n<p>默认查找顺序为: PROPERTIES-&gt;JVM-&gt;ENV-&gt;DEFAULT_SETTING</p>\n<p>修改取值范围优先级可通过<code>java -Dnacos.env.first=PROPERTIES|JVM|ENV|DEFAULT_SETTING</code> 或者设置环境变量 <code>NACOS_ENV_FIRST=PROPERTIES|JVM|ENV|DEFAULT_SETTING</code>的方式指定.\n指定之后,会优先查找指定的取值范围\n<img src=\"/img/nacos_client_properties_first.png\" alt=\"nacos_client_properties_first.png\"></p>\n<h4>对于 client 中的 logging 支持</h4>\n<p>目前 client 中的 log42 和 logback 均完成 <code>NacosClientProperties</code> 的适配, 可以通过以上4个取值范围来控制 log xml 配置文件中的参数值</p>\n",
  "link": "/zh-cn/docs/v2/guide/user/sdk.html",
  "meta": {
    "title": "Java SDK",
    "keywords": "Java,SDK",
    "description": "Java SDK"
  }
}