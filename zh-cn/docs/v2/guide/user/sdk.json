{
  "filename": "sdk.md",
  "__html": "<h1>Java SDK</h1>\n<h2>概述部分</h2>\n<p>Maven 坐标</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;\n    &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;\n    &lt;version&gt;${version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p>注意：由于Nacos Java SDK在2.0版本后引入了gRPC，为了避免用户业务引入的gRPC版本不同导致冲突，使用了shaded技术将部分依赖直接封装进nacos-client中，导致nacos-client较大。\n如果用户未自行引入gRPC或确认版本无冲突，希望使用纯净版的nacos-client以减小依赖，可以使用classifier来指定使用纯净版。</p>\n</blockquote>\n<pre><code class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 2.1.2版本以上支持纯净版客户端 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nacos.version</span>&gt;</span>2.1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nacos.version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${nacos.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!-- 指定纯净版SDK --&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">classifier</span>&gt;</span>pure<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">classifier</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 使用纯净版时必须要引入同版本nacos-api和nacos-common，否则可能出现运行时找不到类的问题 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>${project.groupId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-common<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${nacos.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>${project.groupId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${nacos.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></pre>\n<h2>配置管理</h2>\n<h3>获取配置</h3>\n<h4>描述</h4>\n<p>用于服务启动的时候从 Nacos 获取配置。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getConfig</span><span class=\"hljs-params\">(String dataId, String group, <span class=\"hljs-keyword\">long</span> timeoutMs)</span> <span class=\"hljs-keyword\">throws</span> NacosException\n</span></code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dataId</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;），不超过 256 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">group</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置分组，建议填写产品名:模块名（Nacos:Test）保证唯一性，只允许英文字符和4种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;），不超过128字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timeout</td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">读取配置超时时间，单位 ms，推荐值 3000。</td>\n</tr>\n</tbody>\n</table>\n<h4>返回值</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置值</td>\n</tr>\n</tbody>\n</table>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">try</span> {\n\tString serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\n\tString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\n\tString group = <span class=\"hljs-string\">\"{group}\"</span>;\n\tProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\n\tproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\n\tConfigService configService = NacosFactory.createConfigService(properties);\n\tString content = configService.getConfig(dataId, group, <span class=\"hljs-number\">5000</span>);\n\tSystem.out.println(content);\n} <span class=\"hljs-keyword\">catch</span> (NacosException e) {\n    <span class=\"hljs-comment\">// TODO Auto-generated catch block</span>\n    e.printStackTrace();\n}\n</code></pre>\n<h4>异常说明</h4>\n<p>读取配置超时或网络异常，抛出 NacosException 异常。</p>\n<h3>监听配置</h3>\n<h4>描述</h4>\n<p>如果希望 Nacos 推送配置变更，可以使用 Nacos 动态监听配置接口来实现。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addListener</span><span class=\"hljs-params\">(String dataId, String group, Listener listener)</span> \n</span></code></pre>\n<h4>请求参数</h4>\n<div class=\"bi-table\">\n  <table>\n    <colgroup>\n      <col width=\"auto\" />\n      <col width=\"auto\" />\n      <col width=\"auto\" />\n    </colgroup>\n    <tbody>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">参数名</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">参数类型</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">描述</div>\n        </td>\n      </tr>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">dataId</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">string</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。 全部字符小写。只允许英文字符和 4 种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;）。不超过 256 字节。</div>\n        </td>\n      </tr>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">group</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">string</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">配置分组，建议填写<strong>产品名：模块名</strong>（如 Nacos:Test）保证唯一性。 只允许英文字符和4种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;），不超过128字节。\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">listener</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">Listener</div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">监听器，配置变更进入监听器的回调函数。</div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<h4>返回值</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置值，初始化或者配置变更的时候通过回调函数返回该值。</td>\n</tr>\n</tbody>\n</table>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">String serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\nString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\nString group = <span class=\"hljs-string\">\"{group}\"</span>;\nProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\nproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\nConfigService configService = NacosFactory.createConfigService(properties);\nString content = configService.getConfig(dataId, group, <span class=\"hljs-number\">5000</span>);\nSystem.out.println(content);\nconfigService.addListener(dataId, group, <span class=\"hljs-keyword\">new</span> Listener() {\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">receiveConfigInfo</span><span class=\"hljs-params\">(String configInfo)</span> </span>{\n\t\tSystem.out.println(<span class=\"hljs-string\">\"recieve1:\"</span> + configInfo);\n\t}\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title\">getExecutor</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n\t}\n});\n\n<span class=\"hljs-comment\">// 测试让主线程不退出，因为订阅配置是守护线程，主线程退出守护线程就会退出。 正式代码中无需下面代码</span>\n<span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n        Thread.sleep(<span class=\"hljs-number\">1000</span>);\n    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>\n<h3>删除监听</h3>\n<h4>描述</h4>\n<p>取消监听配置，取消监听后配置不会再推送。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeListener</span><span class=\"hljs-params\">(String dataId, String group, Listener listener)</span>\n</span></code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dataId</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（&quot;.&quot;、&quot;:&quot;、&quot;-&quot;、&quot;_&quot;），不超过 256 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">group</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置分组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">listener</td>\n<td style=\"text-align:left\">ConfigChangeListenerAdapter</td>\n<td style=\"text-align:left\">监听器，配置变更进入监听器的回调函数。</td>\n</tr>\n</tbody>\n</table>\n<h4>使用示例</h4>\n<pre><code class=\"language-java\">String serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\nString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\nString group = <span class=\"hljs-string\">\"{group}\"</span>;\nProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\nproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\nConfigService configService = NacosFactory.createConfigService(properties);\nconfigService.removeListener(dataId, group, yourListener);\n</code></pre>\n<h3>发布配置</h3>\n<h4>描述</h4>\n<p>用于通过程序自动发布 Nacos 配置，以便通过自动化手段降低运维成本。</p>\n<p>注意：创建和修改配置时使用的同一个发布接口，当配置不存在时会创建配置，当配置已存在时会更新配置。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">publishConfig</span><span class=\"hljs-params\">(String dataId, String group, String content)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-meta\">@Since</span> <span class=\"hljs-number\">1.4</span><span class=\"hljs-number\">.1</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">publishConfig</span><span class=\"hljs-params\">(String dataId, String group, String content, String type)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dataId</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置 ID，采用类似 <code>package.class</code>（如 <code>com.taobao.tc.refund.log.level</code>）的命名规则保证全局唯一性。建议根据配置的业务含义来定义 class 部分。全部字符均为小写。只允许英文字符和 4 种特殊字符（“.”、“:”、“-”、“_”），不超过 256 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">group</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置分组，建议填写<code>产品名:模块名</code>（如 Nacos<code>:Test</code>）来保证唯一性。只允许英文字符和 4 种特殊字符（“.”、“:”、“-”、“_”），不超过 128 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">content</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置内容，不超过 100K 字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">type</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">@Since 1.4.1. 配置类型，见 <code>com.alibaba.nacos.api.config.ConfigType</code>，默认为TEXT</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">是否发布成功</td>\n</tr>\n</tbody>\n</table>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 初始化配置服务，控制台通过示例代码自动获取下面参数</span>\n\tString serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\n\tString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\n\tString group = <span class=\"hljs-string\">\"{group}\"</span>;\n\tProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\n\tproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\n    ConfigService configService = NacosFactory.createConfigService(properties);\n\t<span class=\"hljs-keyword\">boolean</span> isPublishOk = configService.publishConfig(dataId, group, <span class=\"hljs-string\">\"content\"</span>);\n\tSystem.out.println(isPublishOk);\n} <span class=\"hljs-keyword\">catch</span> (NacosException e) {\n    <span class=\"hljs-comment\">// TODO Auto-generated catch block</span>\n    e.printStackTrace();\n}\n</code></pre>\n<h4>异常说明</h4>\n<p>读取配置超时或网络异常，抛出 NacosException 异常。</p>\n<h3>删除配置</h3>\n<h4>描述</h4>\n<p>用于通过程序自动删除 Nacos 配置，以便通过自动化手段降低运维成本。</p>\n<p><strong>注意：</strong> 当配置已存在时会删除该配置，当配置不存在时会直接返回成功消息。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">removeConfig</span><span class=\"hljs-params\">(String dataId, String group)</span> <span class=\"hljs-keyword\">throws</span> NacosException\n\n</span></code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dataId</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">group</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">配置分组</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">是否删除成功</td>\n</tr>\n</tbody>\n</table>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 初始化配置服务，控制台通过示例代码自动获取下面参数</span>\n\tString serverAddr = <span class=\"hljs-string\">\"{serverAddr}\"</span>;\n\tString dataId = <span class=\"hljs-string\">\"{dataId}\"</span>;\n\tString group = <span class=\"hljs-string\">\"{group}\"</span>;\n\tProperties properties = <span class=\"hljs-keyword\">new</span> Properties();\n\tproperties.put(<span class=\"hljs-string\">\"serverAddr\"</span>, serverAddr);\n\n\tConfigService configService = NacosFactory.createConfigService(properties);\n\t<span class=\"hljs-keyword\">boolean</span> isRemoveOk = configService.removeConfig(dataId, group);\n\tSystem.out.println(isRemoveOk);\n} <span class=\"hljs-keyword\">catch</span> (NacosException e) {\n    <span class=\"hljs-comment\">// TODO Auto-generated catch block</span>\n    e.printStackTrace();\n}\n</code></pre>\n<h4>异常说明</h4>\n<p>读取配置超时或网络异常，抛出 NacosException 异常。</p>\n<h2>服务发现SDK</h2>\n<h3>注册实例</h3>\n<h4>描述注册一个实例到服务。</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerInstance</span><span class=\"hljs-params\">(String serviceName, String ip, <span class=\"hljs-keyword\">int</span> port)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerInstance</span><span class=\"hljs-params\">(String serviceName, String ip, <span class=\"hljs-keyword\">int</span> port, String clusterName)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerInstance</span><span class=\"hljs-params\">(String serviceName, Instance instance)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ip</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务实例IP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">port</td>\n<td style=\"text-align:left\">int</td>\n<td>服务实例port</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusterName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>集群名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">instance</td>\n<td style=\"text-align:left\">参见代码注释</td>\n<td>实例属性</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>无</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nnaming.registerInstance(<span class=\"hljs-string\">\"nacos.test.3\"</span>, <span class=\"hljs-string\">\"11.11.11.11\"</span>, <span class=\"hljs-number\">8888</span>, <span class=\"hljs-string\">\"TEST1\"</span>);\n\nInstance instance = <span class=\"hljs-keyword\">new</span> Instance();\ninstance.setIp(<span class=\"hljs-string\">\"55.55.55.55\"</span>);\ninstance.setPort(<span class=\"hljs-number\">9999</span>);\ninstance.setHealthy(<span class=\"hljs-keyword\">false</span>);\ninstance.setWeight(<span class=\"hljs-number\">2.0</span>);\nMap&lt;String, String&gt; instanceMeta = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\ninstanceMeta.put(<span class=\"hljs-string\">\"site\"</span>, <span class=\"hljs-string\">\"et2\"</span>);\ninstance.setMetadata(instanceMeta);\n\nService service = <span class=\"hljs-keyword\">new</span> Service(<span class=\"hljs-string\">\"nacos.test.4\"</span>);\nservice.setApp(<span class=\"hljs-string\">\"nacos-naming\"</span>);\nservice.sethealthCheckMode(<span class=\"hljs-string\">\"server\"</span>);\nservice.setEnableHealthCheck(<span class=\"hljs-keyword\">true</span>);\nservice.setProtectThreshold(<span class=\"hljs-number\">0.8F</span>);\nservice.setGroup(<span class=\"hljs-string\">\"CNCF\"</span>);\nMap&lt;String, String&gt; serviceMeta = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\nserviceMeta.put(<span class=\"hljs-string\">\"symmetricCall\"</span>, <span class=\"hljs-string\">\"true\"</span>);\nservice.setMetadata(serviceMeta);\ninstance.setService(service);\n\nCluster cluster = <span class=\"hljs-keyword\">new</span> Cluster();\ncluster.setName(<span class=\"hljs-string\">\"TEST5\"</span>);\nAbstractHealthChecker.Http healthChecker = <span class=\"hljs-keyword\">new</span> AbstractHealthChecker.Http();\nhealthChecker.setExpectedResponseCode(<span class=\"hljs-number\">400</span>);\nhealthChecker.setCurlHost(<span class=\"hljs-string\">\"USer-Agent|Nacos\"</span>);\nhealthChecker.setCurlPath(<span class=\"hljs-string\">\"/xxx.html\"</span>);\ncluster.setHealthChecker(healthChecker);\nMap&lt;String, String&gt; clusterMeta = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\nclusterMeta.put(<span class=\"hljs-string\">\"xxx\"</span>, <span class=\"hljs-string\">\"yyyy\"</span>);\ncluster.setMetadata(clusterMeta);\n\ninstance.setCluster(cluster);\n\nnaming.registerInstance(<span class=\"hljs-string\">\"nacos.test.4\"</span>, instance);\n</code></pre>\n<h3>注销实例</h3>\n<h4>描述</h4>\n<p>删除服务下的一个实例。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deregisterInstance</span><span class=\"hljs-params\">(String serviceName, String ip, <span class=\"hljs-keyword\">int</span> port)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deregisterInstance</span><span class=\"hljs-params\">(String serviceName, String ip, <span class=\"hljs-keyword\">int</span> port, String clusterName)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ip</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">服务实例IP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">port</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">服务实例port</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusterName</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">集群名</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>无</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nnaming.deregisterInstance(<span class=\"hljs-string\">\"nacos.test.3\"</span>, <span class=\"hljs-string\">\"11.11.11.11\"</span>, <span class=\"hljs-number\">8888</span>, <span class=\"hljs-string\">\"DEFAULT\"</span>);\n</code></pre>\n<h3>获取全部实例</h3>\n<h4>描述</h4>\n<p>获取服务下的所有实例。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\">List&lt;Instance&gt; <span class=\"hljs-title\">getAllInstances</span><span class=\"hljs-params\">(String serviceName)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\">List&lt;Instance&gt; <span class=\"hljs-title\">getAllInstances</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>List<Instance> 实例列表。</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nSystem.out.println(naming.getAllInstances(<span class=\"hljs-string\">\"nacos.test.3\"</span>));\n</code></pre>\n<h3>获取健康或不健康实例列表</h3>\n<h4>描述</h4>\n<p>根据条件获取过滤后的实例列表。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\">List&lt;Instance&gt; <span class=\"hljs-title\">selectInstances</span><span class=\"hljs-params\">(String serviceName, <span class=\"hljs-keyword\">boolean</span> healthy)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\">List&lt;Instance&gt; <span class=\"hljs-title\">selectInstances</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters, <span class=\"hljs-keyword\">boolean</span> healthy)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">healthy</td>\n<td style=\"text-align:left\">boolean</td>\n<td>是否健康</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>List<Instance> 实例列表。</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nSystem.out.println(naming.selectInstances(<span class=\"hljs-string\">\"nacos.test.3\"</span>, <span class=\"hljs-keyword\">true</span>));\n</code></pre>\n<h3>获取一个健康实例</h3>\n<h4>描述</h4>\n<p>根据负载均衡算法随机获取一个健康实例。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\">Instance <span class=\"hljs-title\">selectOneHealthyInstance</span><span class=\"hljs-params\">(String serviceName)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\">Instance <span class=\"hljs-title\">selectOneHealthyInstance</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>Instance 实例。</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nSystem.out.println(naming.selectOneHealthyInstance(<span class=\"hljs-string\">\"nacos.test.3\"</span>));\n</code></pre>\n<h3>监听服务</h3>\n<h4>描述</h4>\n<p>监听服务下的实例列表变化。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">subscribe</span><span class=\"hljs-params\">(String serviceName, EventListener listener)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">subscribe</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters, EventListener listener)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">listener</td>\n<td style=\"text-align:left\">EventListener</td>\n<td>回调listener</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>无</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">NamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nnaming.subscribe(<span class=\"hljs-string\">\"nacos.test.3\"</span>, event -&gt; {\n    <span class=\"hljs-keyword\">if</span> (event <span class=\"hljs-keyword\">instanceof</span> NamingEvent) {\n        System.out.println(((NamingEvent) event).getServceName());\n        System.out.println(((NamingEvent) event).getInstances());\n    }\n});\n</code></pre>\n<h3>取消监听服务</h3>\n<h4>描述</h4>\n<p>取消监听服务下的实例列表变化。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unsubscribe</span><span class=\"hljs-params\">(String serviceName, EventListener listener)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unsubscribe</span><span class=\"hljs-params\">(String serviceName, List&lt;String&gt; clusters, EventListener listener)</span> <span class=\"hljs-keyword\">throws</span> NacosException</span>;\n</code></pre>\n<h4>请求参数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">serviceName</td>\n<td style=\"text-align:left\">字符串</td>\n<td>服务名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusters</td>\n<td style=\"text-align:left\">List</td>\n<td>集群列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">listener</td>\n<td style=\"text-align:left\">EventListener</td>\n<td>回调listener</td>\n</tr>\n</tbody>\n</table>\n<h4>返回参数</h4>\n<p>无</p>\n<h4>请求示例</h4>\n<pre><code class=\"language-java\">\nNamingService naming = NamingFactory.createNamingService(System.getProperty(<span class=\"hljs-string\">\"serveAddr\"</span>));\nnaming.unsubscribe(<span class=\"hljs-string\">\"nacos.test.3\"</span>, event -&gt; {});\n\n</code></pre>\n<h2>NacosClientProperties</h2>\n<h3>介绍</h3>\n<p>从 <code>2.1.2</code> 开始引入了 <code>NacosClientProperties</code>, 一个类似于 <code>Spring Environment</code>用来统一管理客户端的各种配置项. 之前客户端的配置项散落3个地方: 用户传入的 Properties、命令行参数和环境变量. 这种没有一个统一的获取配置的入口,并且不方便做配置的隔离. 基于以上的问题,引入 <code>NacosClientProperties</code>.</p>\n<h3>特点</h3>\n<ul>\n<li>统一管理 Properties、命令行参数、环境变量和默认值</li>\n<li>提供优先级搜索功能, 默认搜索顺序 <code>properties -&gt; 命令行参数 -&gt; 环境参数 -&gt; 默认值</code>, 可通过调整优先级来调整搜索顺序, 默认是 <code>properties</code> 优先</li>\n<li>配置隔离, 每个 <code>NacosClientProperties</code> 对象,除去全局性的配置互不影响.</li>\n</ul>\n<h3>如何使用</h3>\n<h4>相关概念</h4>\n<h5>优先级</h5>\n<p>默认优先级是 <code>properties</code>, 可通过以下2种方式来调整:</p>\n<ul>\n<li>(命令行参数)-Dnacos.env.first=PROPERTIES|JVM|ENV</li>\n<li>(环境变量)NACOS_ENV_FIRST=PROPERTIES|JVM|ENV</li>\n</ul>\n<p>以上2种方式都指定的情况下,客户端优先使用命令行参数的方式获取优先级参数,若是通过命令行参数的方式没有获取到优先级参数则使用环境变量的方式获取优先级参数.如果以上2种方式都未指定优先级参数默认优先级为<code>properties</code></p>\n<p>默认优先级:\n<img src=\"/img/nacos_client_properties_default_order.png\" alt=\"default_order.png\"></p>\n<p>优先级: PROPERTIES\n<img src=\"/img/nacos_client_properties_default_order.png\" alt=\"default_order.png\"></p>\n<p>优先级: JVM\n<img src=\"/img/nacos_client_properties_jvm_order.png\" alt=\"jvm_order.png\"></p>\n<p>优先级: ENV\n<img src=\"/img/nacos_client_properties_env_order.png\" alt=\"jvm_order.png\"></p>\n<h5>搜索</h5>\n<p><code>NacosClientProperties</code> 会按照指定优先级进行搜索配置, 以默认优先级(<code>PROPERTIES</code>)为例, 如果要获取一个 key 为\n<code>key1</code>的值, 查找顺序如下:</p>\n<p><img src=\"/img/nacos_client_properties_search_order.png\" alt=\"search_order.png\"></p>\n<p><code>NacosClientProperties</code> 会按照上图顺序搜索,直到查询到为止.</p>\n<h4>配置隔离</h4>\n<p>为了应对多注册中心,多配置中心的场景, <code>NacosClientProperties</code> 引入配置隔离的概念. 在 <code>NacosClientProperties</code> 中总共有4个取值源, 分别是: 用户自定义的properties、命令行参数、 环境变量和默认值, 其中 <code>命令行参数、 环境变量和默认值</code>\n这3个是全局共享的无法做到隔离, 那么只剩下用户自定义的properties对象是可以进行隔离的, 每个 <code>NacosClientProperties</code> 对象中包含不同的 <code>Properties</code> 对象, 通过这种方法做到配置互不影响.</p>\n<blockquote>\n<p>注意: 全局共享的配置: 命令行参数、 环境参数和默认值 一旦初始化完毕,后续使用无法更改,使用 <code>setProperty</code> 方法,也无法修改. <code>setProperty</code> 只能修改<code>NacosClientProperties</code> 对象中包含的 <code>Properties</code> 对象中的值</p>\n</blockquote>\n<h4>配置派生</h4>\n<p>在配置隔离的概念之上又引入了配置派生的概念, 其目的是让配置能够继承.所有 <code>NacosClientProperties</code> 对象都是由 <code>NacosClientProperties.PROTOTYPE</code> 对象派生而来. 无法通过其他方式创建 <code>NacosClientProperties</code> 对象</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// global properties</span>\nNacosClientProperties.PROTOTYPE.setProperty(<span class=\"hljs-string\">\"global-key1\"</span>, <span class=\"hljs-string\">\"global-value1\"</span>);\n\n<span class=\"hljs-comment\">// properties1 </span>\nNacosClientProperties properties1 = NacosClientProperties.PROTOTYPE.derive();\nproperties1.setProperty(<span class=\"hljs-string\">\"properties1-key1\"</span>, <span class=\"hljs-string\">\"properties1-value1\"</span>);\n\n<span class=\"hljs-comment\">// properties2</span>\nNacosClientProperties properties2 = properties1.derive();\nproperties2.setProperty(<span class=\"hljs-string\">\"properties2-key1\"</span>, <span class=\"hljs-string\">\"properties2-value1\"</span>);\n</code></pre>\n<p>以上代码如下图所示:\n<img src=\"/img/nacos_client_properties_derive.png\" alt=\"derive.png\"></p>\n<p>那么搜索会怎么搜索呢? 以默认优先级(PROPERTIES)为例:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// value == global-value1</span>\nString value = properties2.getProperty(<span class=\"hljs-string\">\"global-key1\"</span>);\n\n</code></pre>\n<p><img src=\"/img/nacos_client_properties_derive_search.png\" alt=\"derive_search.png\"></p>\n<h4>API</h4>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>入参内容</th>\n<th>返回内容</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getProperty</td>\n<td>key: String</td>\n<td>String</td>\n<td>获取 key 对应的 value 值, 不存在返回 null</td>\n</tr>\n<tr>\n<td>getProperty</td>\n<td>key: String, default: String</td>\n<td>String</td>\n<td>获取 key 对应的 value 值, 不存在返回默认值</td>\n</tr>\n<tr>\n<td>getBoolean</td>\n<td>key: String</td>\n<td>Boolean</td>\n<td>获取 key 对应的 Boolean 值, 不存在则返回 null</td>\n</tr>\n<tr>\n<td>getBoolean</td>\n<td>key: String, default: Boolean</td>\n<td>Boolean</td>\n<td>获取 key 对应的 Boolean 值, 不存在返回默认值</td>\n</tr>\n<tr>\n<td>getInteger</td>\n<td>key: String</td>\n<td>Integer</td>\n<td>获取 key 对应的 Integer 值, 不存在返回 null</td>\n</tr>\n<tr>\n<td>getInteger</td>\n<td>key: String, default: Integer</td>\n<td>Integer</td>\n<td>获取 key 对应的 Integer 值, 不存在返回默认值</td>\n</tr>\n<tr>\n<td>getLong</td>\n<td>key: String</td>\n<td>Long</td>\n<td>获取 key 对应的 Long 值, 不存在返回 null</td>\n</tr>\n<tr>\n<td>getLong</td>\n<td>key: String, default: Long</td>\n<td>Long</td>\n<td>获取 key 对应的 Long 值, 不存在返回默认值</td>\n</tr>\n<tr>\n<td>setProperty</td>\n<td>key: String, value: String</td>\n<td>void</td>\n<td>设置 key-value 到 NacosClientProperties 对象中,已存的值会被覆盖</td>\n</tr>\n<tr>\n<td>addProperties</td>\n<td>properties: Properties</td>\n<td>void</td>\n<td>添加 Properties 到 NacosClientProperties 对象中,已存在到值会被覆盖</td>\n</tr>\n<tr>\n<td>containsKey</td>\n<td>key: String</td>\n<td>boolean</td>\n<td>判断是否包含指定 key 的值, 包含返回 true 否则 false</td>\n</tr>\n<tr>\n<td>asProperties</td>\n<td>void</td>\n<td>Properties</td>\n<td>将 NacosClientProperties 对象转换为 Properties 对象</td>\n</tr>\n<tr>\n<td>derive</td>\n<td>void</td>\n<td>NacosClientProperties</td>\n<td>创建一个继承父 NacosClientProperties 所有配置的 NacosClientProperties 对象, 内部包含一个空 Properties</td>\n</tr>\n<tr>\n<td>derive</td>\n<td>Properties</td>\n<td>NacosClientProperties</td>\n<td>创建一个继承父 NacosClientProperties 所有配置的 NacosClientProperties 对象, 内部包含指定的 Properties 对象</td>\n</tr>\n</tbody>\n</table>\n",
  "link": "/zh-cn/docs/v2/guide/user/sdk.html",
  "meta": {
    "title": "Java SDK",
    "keywords": "Java,SDK",
    "description": "Java SDK"
  }
}