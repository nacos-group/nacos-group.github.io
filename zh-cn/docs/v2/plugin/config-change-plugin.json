{
  "filename": "config-change-plugin.md",
  "__html": "<h1>配置变更插件</h1>\n<p>社区中一直以来都希望Nacos配置中心能在配置发生变更时，通知一些特定系统，用于发送记录、警告等审计功能。在2.3.0版本前，只能通过模拟Nacos客户端订阅配置的方式，对核心配置的变更操作进行订阅，在收到变更通知后，进行发送记录、警告等功能的执行。</p>\n<p>这种实现方式有几个比较大的问题，第一是监听的配置需要逐个添加，难以对所有配置变更进行获取；第二是只能在配置变更后执行功能逻辑，无法做到前置的操作，如格式校验，白名单校验等。</p>\n<p>因此Nacos在2.3.0版本后，支持通过<a href=\"https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html\">SPI</a>注入配置变更插件，允许用户通过自定义插件的方式，对配置变更前，和变更完成后分别执行一些自定义逻辑，如格式校验，白名单校验，webhook等。</p>\n<h2>配置变更插件中的概念</h2>\n<p>Nacos的配置变更插件，参考了面向切面编程AOP的设计思想，将配置的变更操作（如新增，更新，删除）作为<code>切点（PointCut)</code>，并在这些切点<code>前(Before)</code>和<code>后(After)</code>织入插件。</p>\n<h3>配置变更切点(ConfigChangePointCutTypes)</h3>\n<p>Nacos根据配置变更的行为和来源，将配置变更操作在<code>com.alibaba.nacos.plugin.config.constants.ConfigChangePointCutTypes</code>中定位为了数个<code>配置变更切点(ConfigChangePointCutTypes)</code>，具体内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>切点名称</th>\n<th>描述</th>\n<th>起始版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PUBLISH_BY_HTTP</td>\n<td>配置通过HTTP接口进行发布，包含了创建配置及修改配置</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>PUBLISH_BY_RPC</td>\n<td>配置通过GRPC接口进行发布，包含了创建配置及修改配置</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>REMOVE_BY_HTTP</td>\n<td>配置通过HTTP接口进行删除</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>REMOVE_BY_RPC</td>\n<td>配置通过GRPC接口进行删除</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>IMPORT_BY_HTTP</td>\n<td>配置通过HTTP接口进行导入</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>REMOVE_BATCH_HTTP</td>\n<td>配置通过HTTP接口进行批量删除</td>\n<td>2.3.0</td>\n</tr>\n</tbody>\n</table>\n<h3>配置变更织入类型(ConfigChangeExecuteTypes)</h3>\n<p>Nacos的配置变更插件需要在<code>配置变更切点</code>之前或之后进行执行，即需要选择<code>配置变更织入类型(ConfigChangeExecuteTypes)</code>，定义在<code>com.alibaba.nacos.plugin.config.constants.ConfigChangeExecuteTypes</code>中，具体内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>织入类型</th>\n<th>描述</th>\n<th>起始版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EXECUTE_BEFORE_TYPE</td>\n<td>插件实现在<code>配置变更切点</code>之<strong>前</strong>执行</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>EXECUTE_AFTER_TYPE</td>\n<td>插件实现在<code>配置变更切点</code>之<strong>后</strong>执行</td>\n<td>2.3.0</td>\n</tr>\n</tbody>\n</table>\n<h2>插件开发</h2>\n<p>开发Nacos服务端配置变更插件，首先需要依赖配置变更插件的的相关API</p>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-config-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${project.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p><code>${project.version}</code> 为您开发插件所对应的Nacos版本，<code>2.3.0</code>及以上。</p>\n<p>随后实现<code>com.alibaba.nacos.plugin.config.spi.ConfigChangePluginService</code>接口，该接口需要实现的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>入参内容</th>\n<th>返回内容</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getServiceType</td>\n<td>void</td>\n<td>String</td>\n<td>插件的名称，用于区分不同类型的插件实现</td>\n</tr>\n<tr>\n<td>getOrder</td>\n<td>void</td>\n<td>int</td>\n<td>插件的执行顺序，配置变更插件采用链式插件设计，多个插件实现时会按照顺序执行，getOrder越小，顺序越靠前</td>\n</tr>\n<tr>\n<td>executeType</td>\n<td>void</td>\n<td>ConfigChangeExecuteTypes</td>\n<td>插件实现的<code>配置变更织入类型</code></td>\n</tr>\n<tr>\n<td>pointcutMethodNames</td>\n<td>void</td>\n<td>ConfigChangePointCutTypes[]</td>\n<td>插件实现织入的<code>配置变更切点</code></td>\n</tr>\n<tr>\n<td>execute</td>\n<td>ConfigChangeRequest,ConfigChangeResponse</td>\n<td>void</td>\n<td>实际插件执行的逻辑</td>\n</tr>\n</tbody>\n</table>\n<p>其中<code>ConfigChangeRequest</code>和<code>ConfigChangeResponse</code>分别为执行逻辑时传入的内容及执行结果，</p>\n<p><code>ConfigChangeRequest</code>的具体内容如下:</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>requestType</td>\n<td>ConfigChangePointCutTypes</td>\n<td>本次配置变更的切点类型</td>\n</tr>\n<tr>\n<td>requestArgs</td>\n<td>HashMap&lt;String, Object&gt;</td>\n<td>本次配置变更的实际参数，主要包含有<code>namespace</code>,<code>group</code>,<code>dataId</code>,<code>content</code>等内容，不同的切点类型参数存在不同</td>\n</tr>\n</tbody>\n</table>\n<p><code>ConfigChangeResponse</code>的具体内容如下:</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>responseType</td>\n<td>ConfigChangePointCutTypes</td>\n<td>本次配置变更的切点类型</td>\n</tr>\n<tr>\n<td>isSuccess</td>\n<td>boolean</td>\n<td>执行是否成功，当返回值为<code>false</code>时，将会拦截本次配置变更，并直接返回失败的结果</td>\n</tr>\n<tr>\n<td>retVal</td>\n<td>Object</td>\n<td>返回内容，预留字段，暂未启用</td>\n</tr>\n<tr>\n<td>msg</td>\n<td>String</td>\n<td>执行结果信息，在<code>isSuccess</code>为<code>false</code>时获取，用于返回给客户端的信息</td>\n</tr>\n<tr>\n<td>args</td>\n<td>Object[]</td>\n<td>配置变更操作的执行参数，在<code>EXECUTE_BEFORE_TYPE</code>的插件类型时生效，可用于修改实际执行的配置变更时的内容，如将content中的某些内容修改为其他值</td>\n</tr>\n</tbody>\n</table>\n<h3>加载插件</h3>\n<p>插件开发完成后，需要打包成jar/zip，放置到nacos服务端的classpath中，如果您不知道如何修改classpath，请直接放置到<code>${nacos-server.path}/plugins</code>下</p>\n<p>放置后，需要修改<code>${nacos-server.path}/conf/application.properties</code>中的以下配置</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">### 所启用的Nacos的配置变更插件的名称，与com.alibaba.nacos.plugin.config.spi.ConfigChangePluginService 的getServiceType 返回值对应</span>\n<span class=\"hljs-meta\">nacos.core.config.plugin.${configChangePluginName}.enabled</span>=<span class=\"hljs-string\">true</span>\n</code></pre>\n<p>随后重启nacos集群，启动完成后，可在<code>${nacos-server.path}/logs/nacos.log</code>日志中看到如下日志。</p>\n<pre><code class=\"language-text\">[ConfigChangePluginManager] Load ${className}(${classFullName}) ConfigChangeServiceName(${configChangePluginName}) successfully.\n</code></pre>\n<h3>插件自定义参数传递</h3>\n<p>部分插件可能希望通过配置文件设置一些参数，自定义插件可以通过修改<code>${nacos-server.path}/conf/application.properties</code>中的以下配置完成：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">### 所启用的Nacos的配置变更插件的名称，与com.alibaba.nacos.plugin.config.spi.ConfigChangePluginService 的getServiceType 返回值对应</span>\n<span class=\"hljs-meta\">nacos.core.config.plugin.${configChangePluginName}.${propertyKey}</span>=<span class=\"hljs-string\">${propertyValue}</span>\n</code></pre>\n<p>之后能在<code>ConfigChangeRequest</code>中，通过下述方法获取该参数：</p>\n<pre><code class=\"language-Java\"><span class=\"hljs-keyword\">final</span> Properties properties = (Properties) configChangeRequest.getArg(ConfigChangeConstants.PLUGIN_PROPERTIES);\n<span class=\"hljs-keyword\">final</span> String ${propertyKey} = properties.getProperty(<span class=\"hljs-string\">\"${propertyKey}\"</span>);\n</code></pre>\n<h2>插件DEMO实现</h2>\n<p>在<a href=\"https://github.com/nacos-group/nacos-plugin\">nacos-group/nacos-plugin</a>中，有一个demo的配置变更插件的实现，该demo插件实现了对配置内容格式的校验、配置导入名称白名单的校验、以及变更后回调webhook。打包成jar/zip，放置到nacos服务端的classpath中，在<code>${nacos-server.path}/conf/application.properties</code>中的加入以下配置：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># webhook</span>\n<span class=\"hljs-comment\">#nacos.core.config.plugin.webhook.enabled=true</span>\n<span class=\"hljs-comment\"># It is recommended to use EB https://help.aliyun.com/document_detail/413974.html</span>\n<span class=\"hljs-comment\">#nacos.core.config.plugin.webhook.url=http://${webhookIp}:${webhookPort}/${webhookUri}?token=***</span>\n<span class=\"hljs-comment\"># The content push max capacity ,byte</span>\n<span class=\"hljs-comment\">#nacos.core.config.plugin.webhook.contentMaxCapacity=102400</span>\n<span class=\"hljs-comment\">\n# whitelist</span>\n<span class=\"hljs-comment\">#nacos.core.config.plugin.whitelist.enabled=true</span>\n<span class=\"hljs-comment\"># The import file suffixs</span>\n<span class=\"hljs-comment\">#nacos.core.config.plugin.whitelist.suffixs=xml,text,properties,yaml,html</span>\n<span class=\"hljs-comment\">\n# fileformatcheck,which validate the import file of type and content</span>\n<span class=\"hljs-comment\">#nacos.core.config.plugin.fileformatcheck.enabled=true</span>\n</code></pre>\n",
  "link": "/zh-cn/docs/v2/plugin/config-change-plugin.html",
  "meta": {
    "title": "配置变更",
    "keywords": "配置变更,配置审计,配置格式校验,webhook",
    "description": "Nacos 支持配置变更插件，可支持配置审计、配置格式校验、及变更后webhook回调"
  }
}