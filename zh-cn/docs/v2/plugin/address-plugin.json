{
  "filename": "address-plugin.md",
  "__html": "<h1>寻址插件</h1>\n<p>Nacos从2.3.0版本开始，支持通过<a href=\"https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html\">SPI</a>的方式注入集群寻址相关插件，并在<code>application.properties</code>配置文件中选择某一种插件实现作为实际寻址服务。本文档会详细介绍如何实现一个寻址插件和如何使其生效。</p>\n<blockquote>\n<p>注意：\n目前寻址插件还处于Beta测试的阶段，其API及接口定义可能会随后续版本升级而有所修改，请注意您的插件适用版本。</p>\n</blockquote>\n<h2>寻址插件概述</h2>\n<p>当前Nacos集群寻址有三种寻址方式，单机寻址，配置文件寻址和地址服务器寻址，通过寻址插件，用户可以编写自己的寻址逻辑。</p>\n<h2>开发Nacos服务端寻址插件</h2>\n<p>开发Nacos服务端寻址插件，首先需要依赖寻址插件的相关API</p>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-address-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${project.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p><code>${project.version}</code> 为您开发插件所对应的Nacos版本</p>\n<p>随后实现<code>com.alibaba.nacos.plugin.address.spi.AddressPlugin</code>接口， 并将您的实现添加到SPI的services当中。</p>\n<p>接口中需要实现的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>入参内容</th>\n<th>返回内容</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start</td>\n<td>void</td>\n<td>void</td>\n<td>启动该插件的寻址功能。</td>\n</tr>\n<tr>\n<td>getServerList</td>\n<td>void</td>\n<td>List<String></td>\n<td>返回所有Nacos集群结点的地址，地址格式为<code>IP:Port</code>。</td>\n</tr>\n<tr>\n<td>getPluginName</td>\n<td>void</td>\n<td>String</td>\n<td>插件的名称，当名字相同时，后加载的插件会覆盖先加载的插件</td>\n</tr>\n<tr>\n<td>registerListener</td>\n<td>Consumer&lt;List<String>&gt;</td>\n<td>AddressPlugin</td>\n<td>注册监听器, 当集群地址发生改变时调用监听器的方法</td>\n</tr>\n<tr>\n<td>shutdown</td>\n<td>void</td>\n<td>void</td>\n<td>关闭插件</td>\n</tr>\n</tbody>\n</table>\n<p>该接口由<code>com.alibaba.nacos.plugin.address.spi.AbstractAddressPlugin</code>抽象类默认实现<code>getServerList</code>, <code>registerListener</code>和<code>shutdown</code>方法，\n用户在实际编写插件时继承<code>AbstractAddressPlugin</code>实现其余方法即可。<code>AbstractAddressPlugin</code>有一个名为serverList的List<String>成员变量，即集群地址集合，用户需要在start方法调用后，维护\n该变量即可。\n当用户需要在配置文件中配置插件相关的参数， 需要在property配置文件中配置以address.plugin开头的key，这时变可以通过<code>com.alibaba.nacos.plugin.address.common.AddressProperties</code>单例类获取对应的参数</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">address.plugin.${key}</span> = <span class=\"hljs-string\">${val}</span>\n</code></pre>\n<p>配置之后，用户在编写插件时便可以通过</p>\n<pre><code class=\"language-java\">AddressProperties.getProperty(${key})\n</code></pre>\n<p>来获取参数。</p>\n<h3>使用服务端插件</h3>\n<p>插件开发完成后，需要打包成jar/zip，放置到nacos服务端的classpath中，如果您不知道如何修改classpath，请直接放置到<code>${nacos-server.path}/plugins</code>下</p>\n<p>放置后，需要修改<code>${nacos-server.path}/conf/application.properties</code>中的以下配置</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">### 所启用的Nacos的寻址插件的名称，与`com.alibaba.nacos.plugin.address.spi.AddressService#getPlugin返回值对应</span>\n<span class=\"hljs-meta\">nacos.core.member.lookup.type</span>=<span class=\"hljs-string\">${addressPluginName}</span>\n</code></pre>\n<p>随后重启nacos集群，在有请求访问到nacos节点后，可以从<code>${nacos-server.path}/logs/nacos-cluster.log</code>中看到如下日志：</p>\n<pre><code class=\"language-text\">[AddressPluginManager] Load AddressPlugin(xxxx) PluginName(xxx) successfully.\n</code></pre>\n<h3>使用Nacos自带的寻址插件</h3>\n<p>为了与老版本的寻址兼容，用户在不使用自定义插件时该配置与原来相同，还是<code>nacos.core.member.lookup.type=[file,address-server]</code>这一配置项.</p>\n<h2>客户端插件</h2>\n<h3>使用自定义插件</h3>\n<p>Nacos的客户端用户自定义寻址插件实现方式和服务端相同，当用户需要使用自定义插件时，继承<code>com.alibaba.nacos.plugin.address.spi.AbstractAddressPlugin</code>或者实现<code>com.alibaba.nacos.plugin.address.spi.AddressPlugin</code>接口，将开发完成的客户端插件打包成jar/zip，放入到您应用的classpath中即可自动生效。在初始化<code>NacosConfigService</code>或者<code>NacosNamingService</code>时，在传递的<code>Properties</code>对象中传入key为<code>addressPluginName</code>，val为插件<code>getPluginName</code>返回值的参数。\n如:</p>\n<pre><code class=\"language-java\"> Properties properties = <span class=\"hljs-keyword\">new</span> Properties();\n properties.put(<span class=\"hljs-string\">\"addressPluginName\"</span>, ${addressPluginName});\n ConfigService configService = NacosFactory.createConfigService(properties);\n String content = configService.getConfig(dataId, group, <span class=\"hljs-number\">5000</span>);\n</code></pre>\n<h3>使用Nacos自带的寻址插件</h3>\n<p>Nacos的Java客户端插件适配了老版本，如果不使用自定义的插件，客户端的使用和之前没有区别。</p>\n<h3>其他语言客户端寻址插件</h3>\n<p>待社区贡献。</p>\n",
  "link": "/zh-cn/docs/v2/plugin/address-plugin.html",
  "meta": {
    "title": "寻址插件",
    "keywords": "寻址, 插件",
    "description": "本文描述如何开发及使用Nacos的寻址插件"
  }
}