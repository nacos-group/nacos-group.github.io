{
  "filename": "control-plugin.md",
  "__html": "<h1>反脆弱插件</h1>\n<p>Nacos 从2.3.0版本开始，支持通过<a href=\"https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html\">SPI</a>的方式注入反脆弱相关插件，并在<code>application.properties</code>配置文件中选择某一种插件实现作为实际反脆弱能力。本文档会详细介绍如何实现一个反脆弱插件和如何使其生效。</p>\n<h2>反脆弱插件中的概念</h2>\n<p>反脆弱是对访问服务端的<strong>某种资源</strong>的<strong>频率和次数</strong>达到一定程度时进行的限制访问的策略，用于保护服务端在高压情况下能快速拒绝请求，防止过多的资源访问导致服务端资源耗尽引起的大面积不可用；Nacos反脆弱插件，将信息主要抽象为<code>监控点</code>和<code>反脆弱规则</code>。</p>\n<h3>监控点（ControlPoint）</h3>\n<p>监控点对应的请求服务端时所占用的资源的映射，目前主要针对的是<code>连接(Connection)</code>以及<code>每秒请求数(TPS)</code>。</p>\n<ul>\n<li>连接(Connection)监控点主要监控Nacos 服务端中使用Nacos2.X客户端的长连接数量以及使用Nacos1.X客户端的配置长轮询数量，两者独立监控。</li>\n<li>每秒请求数(TPS)监控点主要是监控Nacos 服务端中各核心接口被访问的频率，同类型的操作接口会被视为相同的监控点，如注册服务的v1接口和v2接口，具体的每秒请求数(TPS)监控点可查看本文档下文<a href=\"#1.1\">监控点名称</a>。</li>\n</ul>\n<h3>反脆弱规则（ControlRule）</h3>\n<p>反脆弱规则是针对每个监控点而执行的不同的限制规则，具体又分为<code>连接数规则（ConnectionControlRule）</code>和<code>每秒请求数规则（TpsControlRule）</code></p>\n<p><code>连接数规则（ConnectionControlRule）</code>主要包含如下内容：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>countLimit</td>\n<td>int</td>\n<td>连接数总数限制，默认为-1，不限制</td>\n</tr>\n<tr>\n<td>monitorIpList</td>\n<td>Set<String></td>\n<td>trace监控的Ip列表，用于详细观察对应ip的连接做了哪些操作，添加后，对应ip的连接请求会被详细打印在remote-digest.log日志中</td>\n</tr>\n</tbody>\n</table>\n<p><code>每秒请求数规则（TpsControlRule）</code>主要包含如下内容：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pointName</td>\n<td>String</td>\n<td>规则所对应的监控点名称</td>\n</tr>\n<tr>\n<td>pointRule</td>\n<td>RuleDetail</td>\n<td>规则内容的具体细节</td>\n</tr>\n</tbody>\n</table>\n<p>其中<code>RuleDetail</code>又包含如下内容：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ruleName</td>\n<td>String</td>\n<td>规则的名称，区别于监控点名称，同一个监控点可以有多个规则名</td>\n</tr>\n<tr>\n<td>maxCount</td>\n<td>int</td>\n<td>TPS总数限制，默认为-1，不限制</td>\n</tr>\n<tr>\n<td>period</td>\n<td>TimeUnit</td>\n<td>规则生效的周期，即统计到秒级/分钟级等，默认<code>TimeUnit.SECONDS</code>秒级</td>\n</tr>\n<tr>\n<td>monitorType</td>\n<td>String</td>\n<td>监控类型，取值为<code>monitor</code>或<code>intercept</code>，对应为监控模式（只统计和打印tps，即使触发规则也不拦截）和拦截模式</td>\n</tr>\n</tbody>\n</table>\n<h2>插件开发</h2>\n<p>开发Nacos服务端反脆弱插件，首先需要依赖反脆弱插件的相关API</p>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-control-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${project.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p><code>${project.version}</code> 为您开发插件所对应的Nacos版本，<code>2.3.0</code>及以上。</p>\n<p>随后继承<code>com.alibaba.nacos.plugin.control.connection.ConnectionControlManager</code>抽象类和<code>com.alibaba.nacos.plugin.control.tps.TpsControlManager</code>抽象类，实现缺失的方法；然后实现<code>com.alibaba.nacos.plugin.control.spi.ControlManagerBuilder</code> 接口，创建上述实现的两个抽象类；最后将您的实现添加到SPI的services当中。</p>\n<p><code>com.alibaba.nacos.plugin.control.connection.ConnectionControlManager</code>需要实现的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>入参内容</th>\n<th>返回内容</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>applyConnectionLimitRule</td>\n<td>ConnectionControlRule</td>\n<td>void</td>\n<td>应用新的连接数规则</td>\n</tr>\n<tr>\n<td>check</td>\n<td>ConnectionCheckRequest</td>\n<td>ConnectionCheckResponse</td>\n<td>判断是否命中连接数规则，如果ConnectionCheckResponse中的sucess为false，将会拒绝新连接的建立</td>\n</tr>\n</tbody>\n</table>\n<p><code>com.alibaba.nacos.plugin.control.tps.TpsControlManager</code>需要实现的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>入参内容</th>\n<th>返回内容</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>registerTpsPoint</td>\n<td>String</td>\n<td>void</td>\n<td>注册TPS监控点，Nacos服务会在启动时向插件注册当前的TPS监控买点，入参为TPS监控点的名字，具体的监控点名称可查看本文档下文<a href=\"#1.1\">监控点名称</a>；插件需要在方法内，维护一个用于记录TPS和规则内容的<code>TpsBarrier</code>，详情查看<a href=\"#1.2\">自定义TPS时间窗口</a>。</td>\n</tr>\n<tr>\n<td>applyTpsRule</td>\n<td>String,TpsControlRule</td>\n<td>void</td>\n<td>应用新的TPS规则，根据TPS监控点名称关联及更新。</td>\n</tr>\n<tr>\n<td>check</td>\n<td>TpsCheckRequest</td>\n<td>TpsCheckResponse</td>\n<td>判断是否命中TPS规则，如果TpsCheckResponse中的sucess为false，将会拒绝新的请求。</td>\n</tr>\n</tbody>\n</table>\n<p><code>com.alibaba.nacos.plugin.control.spi.ControlManagerBuilder</code> 需要实现的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>入参内容</th>\n<th>返回内容</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getName</td>\n<td>void</td>\n<td>String</td>\n<td>插件的名称，和配置文件中指定的类型进行匹配，使用命中的的插件。</td>\n</tr>\n<tr>\n<td>buildConnectionControlManager</td>\n<td>void</td>\n<td>ConnectionControlManager</td>\n<td>创建插件对应的<code>ConnectionControlManager</code>实现，为null时会使用<code>no limit</code>实现。</td>\n</tr>\n<tr>\n<td>buildTpsControlManager</td>\n<td>void</td>\n<td>TpsControlManager</td>\n<td>创建插件对应的<code>TpsControlManager</code>实现，为null时会使用<code>no limit</code>实现。</td>\n</tr>\n</tbody>\n</table>\n<h3>加载插件</h3>\n<p>插件开发完成后，需要打包成jar/zip，放置到nacos服务端的classpath中，如果您不知道如何修改classpath，请直接放置到<code>${nacos-server.path}/plugins</code>下</p>\n<p>放置后，需要修改<code>${nacos-server.path}/conf/application.properties</code>中的以下配置</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">### 所启用的Nacos的反脆弱插件的名称，与com.alibaba.nacos.plugin.control.spi.ControlManagerBuilder 的getName 返回值对应</span>\n<span class=\"hljs-meta\">nacos.plugin.control.manager.type</span>=<span class=\"hljs-string\">${controlPluginName}</span>\n</code></pre>\n<p>随后重启nacos集群，启动完成后，可以从<code>${nacos-server.path}/logs/plugin-control.log</code>中看到如下日志：</p>\n<pre><code class=\"language-text\">Found control manager plugin of name=${controlPluginName}\n\nBuild connection control manager, class=${your plugin ConnectionControlManager class}\n\nBuild tps control manager, class=${your plugin TpsControlManager class}\n</code></pre>\n<h2>使用Nacos自带的反脆弱插件</h2>\n<p>Nacos2.3.0版本起，自带一个简易的反脆弱插件实现，可以做到对Nacos服务端的连接数及指定接口TPS进行限制。</p>\n<h3>启用Nacos自带的反脆弱插件</h3>\n<p>需要修改<code>${nacos-server.path}/conf/application.properties</code>中的以下配置</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">nacos.plugin.control.manager.type</span>=<span class=\"hljs-string\">nacos</span>\n</code></pre>\n<h3>设置反脆弱规则</h3>\n<p>可通过创建和修改反脆弱规则文件的方式，修改和设置反脆弱规则，默认反脆弱插件的规则是通过json格式定义的；例如想要设置连接限制为100，可执行如下操作:</p>\n<pre><code class=\"language-shell\">mkdir -p ${nacos.home}/data/connection/\necho '{\"countLimit\": 100}' &gt; ${nacos.home}/data/connection/limitRule\n</code></pre>\n<p>随后重启Nacos节点即可。</p>\n<p>又例如想要设置配置查询接口的TPS为100，可执行如下操作：</p>\n<pre><code class=\"language-shell\">mkdir -p ${nacos.home}/data/tps/\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ConfigQuery 为配置查询接口的监控点名称（pointName)</span>\necho '{\"pointName\":\"ConfigQuery\",\"pointRule\":{\"maxCount\":100,\"monitorType\":\"intercept\"}}' &gt; ${nacos.home}/data/tps/ConfigQuery \n</code></pre>\n<p>随后重启Nacos节点即可。</p>\n<p>其他更多反脆弱规则，以及具体的反脆弱监控点名称，请查看下文<a href=\"#1.1\">监控点名称</a>。</p>\n<h3>反脆弱规则存储位置</h3>\n<p>Nacos自带的简易反脆弱插件实现，Nacos服务端会通过本地文件系统，存储和读取反脆弱规则，默认所在目录的为<code>${nacos.home}/data/connection</code>及<code>${nacos.home}/data/tps</code>中，如果想将规则文件更换目录存储，可以在<code>${nacos-server.path}/conf/application.properties</code>中修改以下配置:</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">nacos.plugin.control.rule.local.basedir</span>=<span class=\"hljs-string\">${expectedDir}</span>\n</code></pre>\n<p>这样规则将会被存储在<code>${expectedDir}/data/connection</code>及<code>${expectedDir}/data/tps</code>中。</p>\n<h4 id=\"1.1\"></h4>\n<h2>当前支持的监控点名称</h2>\n<table>\n<thead>\n<tr>\n<th>监控点名称</th>\n<th>对应内容</th>\n<th>描述</th>\n<th>起始版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>connection</td>\n<td>节点总连接数</td>\n<td>指定节点最大可支持连接数限制</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>ConfigPublish</td>\n<td>配置发布接口TPS</td>\n<td>指定节点最大可支持配置发布的TPS限制，同时包含了通过http访问和grpc访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>ConfigQuery</td>\n<td>配置查询接口TPS</td>\n<td>指定节点最大可支持配置查询的TPS限制，同时包含了通过http访问和grpc访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>ConfigRemove</td>\n<td>配置移除接口TPS</td>\n<td>指定节点最大可支持配置移除的TPS限制，同时包含了通过http访问和grpc访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>ConfigListen</td>\n<td>配置监听接口TPS</td>\n<td>指定节点最大可支持配置监听的TPS限制，仅包含通过grpc访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>RemoteNamingInstanceRegisterDeregister</td>\n<td>服务实例注册及注销接口TPS</td>\n<td>服务实例注册或注销的TPS限制，仅包含通过grpc访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>RemoteNamingInstanceBatchRegister</td>\n<td>服务实例批量注册接口TPS</td>\n<td>服务实例批量注册的TPS限制，仅包含通过grpc访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>RemoteNamingServiceListQuery</td>\n<td>服务列表查询接口TPS</td>\n<td>服务列表查询的TPS限制，仅包含通过grpc访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>RemoteNamingServiceQuery</td>\n<td>服务查询接口TPS</td>\n<td>服务查询的TPS限制，仅包含通过grpc访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>RemoteNamingServiceSubscribeUnSubscribe</td>\n<td>服务订阅和取消订阅接口TPS</td>\n<td>服务订阅和取消订阅的TPS限制，仅包含通过grpc访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingInstanceRegister</td>\n<td>服务实例注册接口TPS</td>\n<td>服务实例注册的TPS限制，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingInstanceDeregister</td>\n<td>服务实例注销接口TPS</td>\n<td>服务实例注销的TPS限制，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingInstanceUpdate</td>\n<td>服务实例元数据更新接口TPS</td>\n<td>服务实例更新的TPS限制，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingInstanceMetadataUpdate</td>\n<td>服务实例元数据批量更新接口TPS</td>\n<td>服务实例元数据批量更新的TPS限制，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingServiceSubscribe</td>\n<td>服务实例查询及订阅接口TPS</td>\n<td>服务订阅及查询的TPS限制，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingInstanceQuery</td>\n<td>单个服务实例查询接口TPS</td>\n<td>单个服务实例查询的TPS限制，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>HttpHealthCheck</td>\n<td>服务实例心跳续约接口TPS</td>\n<td>服务实例心跳续约的TPS限制，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingServiceRegister</td>\n<td>服务创建接口TPS</td>\n<td>服务创建的TPS限制，与<code>NamingInstanceRegister</code>不同，此监控点表示的是创建空服务接口所对应的TPS，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingServiceDeregister</td>\n<td>服务删除接口TPS</td>\n<td>服务删除的TPS限制，与<code>NamingInstanceDeregister</code>不同，此监控点表示的是删除服务接口所对应的TPS，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingServiceQuery</td>\n<td>服务查询接口TPS</td>\n<td>服务查询的TPS限制，与<code>NamingInstanceQuery</code>不同，此监控点表示的是查询服务信息接口所对应的TPS，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingServiceListQuery</td>\n<td>服务列表查询接口TPS</td>\n<td>服务列表查询的TPS限制，与<code>NamingServiceSubscribe</code>不同，此监控点表示的是服务列表查询接口所对应的TPS，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n<tr>\n<td>NamingServiceUpdate</td>\n<td>服务元数据更新接口TPS</td>\n<td>服务元数据更新的TPS限制，与<code>NamingInstanceUpdate</code>不同，此监控点表示的是服务元数据更新接口所对应的TPS，仅包含通过http访问的来源</td>\n<td>2.3.0</td>\n</tr>\n</tbody>\n</table>\n<h2>反脆弱插件进阶开发</h2>\n<p>Nacos反脆弱插件还支持一些进阶式的拓展，以满足对此方面有更高要求的开发者和用户。</p>\n<h3>反脆弱规则外部存储</h3>\n<p>Nacos反脆弱插件的默认情况下，仅支持通过本地文件系统来存储和修改单节点的反脆弱规则，对于一些集群规模较大或集群较多的用户，逐个节点进行调整会消耗大量时间和操作；同时本地文件系统在许多容器化环境中，存在磁盘挂载和持久化的问题。因此Nacos反脆弱插件允许增加一个可选的外部存储进行反脆弱规则的统一存储和下发，外部存储可有插件自行实现对接，例如<code>数据库</code>,<code>配置中心</code>等。</p>\n<p>要实现反脆弱规则的外部存储，需要在开发插件时，实现<code>com.alibaba.nacos.plugin.control.spi.ExternalRuleStorageBuilder</code>接口，并随插件jar文件一起放置在<code>${nacos-server.path}/plugins</code>下。</p>\n<p>放置后，需要修改<code>${nacos-server.path}/conf/application.properties</code>中的以下配置</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">nacos.plugin.control.rule.external.storage</span>=<span class=\"hljs-string\">${controlPluginName}</span>\n</code></pre>\n<p>随后重启Nacos节点即可。</p>\n<h3>动态加载反脆弱规则</h3>\n<p>在自定义插件实现中，可以通过两种方式进行反脆弱规则的动态加载：</p>\n<ol>\n<li>调用<code>com.alibaba.nacos.plugin.control.ControlManagerCenter#reloadTpsControlRule</code>方法或<code>com.alibaba.nacos.plugin.control.ControlManagerCenter#reloadConnectionControlRule</code>方法。</li>\n<li>通过<code>NotifyCenter.publishEvent()</code>发布<code>ConnectionLimitRuleChangeEvent</code> 或<code>TpsControlRuleChangeEvent</code>事件。</li>\n</ol>\n<h3>反脆弱规则的自定义格式解析</h3>\n<p>Nacos 默认使用<code>Json</code>格式作为反脆弱规则的文本格式，插件开发者也可以使用其他的格式，如<code>Yaml</code>或其他自定义格式进行解析。</p>\n<p>重写<code>com.alibaba.nacos.plugin.control.connection.ConnectionControlManager#buildConnectionControlRuleParser</code>及<code>com.alibaba.nacos.plugin.control.tps.TpsControlManager#buildTpsControlRuleParser</code>，实现自定义格式规则解析器<code>RuleParser</code>，Nacos将使用自定义的规则解析器<code>RuleParser</code>进行规则文本的解析。</p>\n<p>同时，也可以解析成默认自定义规则的增强规则，配合自定义插件的定制逻辑实现更高程度的反脆弱控制。</p>\n<h4 id=\"1.2\"></h4>\n<h3>自定义TPS时间窗口</h3>\n<p>众所周知，在统计TPS时，存在时间窗口算法的区别，不同的时间窗口对TPS的统计结果会有较大的区别。</p>\n<p>Nacos默认使用简单的同秒统计方式，即按照时钟的秒来进行统计。对于大多数场景来说是足够使用的，但对于一些精确度要求高的用户而言，可能需要使用滑动窗口等更精确的方式进行统计。</p>\n<p>此时需要插件开发者，继承<code>com.alibaba.nacos.plugin.control.tps.barrier.TpsBarrier</code>和<code>com.alibaba.nacos.plugin.control.tps.barrier.RuleBarrier</code>，自定义实现TPS的时间窗口和统计方式。并重写<code>com.alibaba.nacos.plugin.control.tps.TpsControlManager#buildTpsBarrierCreator</code>，在初始化插件和动态加载反脆弱规则时，生成对应的自定义实现。</p>\n",
  "link": "/zh-cn/docs/v2/plugin/control-plugin.html",
  "meta": {
    "title": "反脆弱",
    "keywords": "反脆弱,限流,连接数限制,TPS",
    "description": "Nacos 支持反脆弱插件，避免高压下的集群容量问题。"
  }
}