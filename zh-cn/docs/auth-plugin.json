{
  "filename": "auth-plugin.md",
  "__html": "<h1>鉴权插件</h1>\n<p>Nacos从2.1.0版本开始，支持通过<a href=\"https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html\">SPI</a>的方式注入鉴权相关插件，并在<code>application.properties</code>配置文件中选择某一种插件实现作为实际鉴权服务。本文档会详细介绍如何实现一个鉴权插件和如何使其生效。</p>\n<blockquote>\n<p>注意：\n目前鉴权插件还处于Beta测试的阶段，其API及接口定义可能会随后续版本升级而有所修改，请注意您的插件适用版本。</p>\n</blockquote>\n<h2>鉴权插件中的概念</h2>\n<p>鉴权，通俗的表达就是，验证 <strong>谁</strong> 是否能够对 <strong>某个东西</strong> 进行 <strong>某种操作</strong> ，因此Nacos在设计鉴权插件时，将鉴权信息主要抽象为<code>身份信息</code>，<code>资源</code>和<code>操作类型</code>3类主要概念。</p>\n<h3>身份信息 IdentityContext</h3>\n<p>身份信息(IdentityContext)是请求发起主体在Nacos鉴权插件中的抽象。由于不同的插件实现，身份信息可能不同，较为灵活；比如用户名和密码是一种身份信息，accessToken又是另一种身份信息。因此身份信息(IdentityContext)并没有限制具体的个数和名字，插件实现可以自定义任意个数和身份关键字，Nacos将会从请求中自动获取插件实现定义的身份关键字及其对应的值注入到身份信息(IdentityContext)中，供插件使用。</p>\n<p>其中必定会包含的内容有：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>remote_ip</td>\n<td>请求来源ip</td>\n</tr>\n</tbody>\n</table>\n<h3>资源 Resource</h3>\n<p>资源(Resource)是请求所操作对象在Nacos鉴权插件中的抽象。它主要由Nacos来定义，具体可以是某个配置，某个服务，或者某个分组。</p>\n<p>资源(Resource)主要由以下内容组成：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>namespaceId</td>\n<td>请求资源的命名空间ID，部分接口可能没有该值</td>\n</tr>\n<tr>\n<td>group</td>\n<td>请求资源的分组名，部分接口可能没有该值</td>\n</tr>\n<tr>\n<td>name</td>\n<td>请求资源的资源名，如服务名或配置的dataId，部分接口可能是定义的特殊值，如<code>nacos/admin</code></td>\n</tr>\n<tr>\n<td>type</td>\n<td>请求资源的类型，可能取值为<code>SignType</code>中的枚举值，主要表示该资源所相关的模块</td>\n</tr>\n<tr>\n<td>properties</td>\n<td>请求资源的扩展配置，不属于上述的资源相关信息，会被放如properties中，比如Grpc请求的Request名称或<code>@Secured</code>注解上的tags等</td>\n</tr>\n</tbody>\n</table>\n<h3>操作类型 Action</h3>\n<p>操作类型(Action)是请求操作在Nacos鉴权插件中的抽象，主要有读操作<code>R</code>和写操作<code>W</code>，详情查看<code>ActionTypes</code>枚举。</p>\n<h2>服务端插件</h2>\n<p>开发Nacos服务端鉴权插件，首先需要依赖鉴权插件的相关API</p>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-auth-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${project.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p><code>${project.version}</code> 为您开发插件所对应的Nacos版本</p>\n<p>随后实现<code>com.alibaba.nacos.plugin.auth.spi.server.AuthPluginService</code>接口， 并将您的实现添加到SPI的services当中。</p>\n<p>接口中需要实现的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>入参内容</th>\n<th>返回内容</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getAuthServiceName</td>\n<td>void</td>\n<td>String</td>\n<td>插件的名称，当名字相同时，后加载的插件会覆盖先加载的插件。</td>\n</tr>\n<tr>\n<td>identityNames</td>\n<td>void</td>\n<td>Collection<String></td>\n<td>插件的身份信息关键字，Nacos会从请求中获取以这些关键字为key的参数，并注入到IdentityContext中。</td>\n</tr>\n<tr>\n<td>enableAuth</td>\n<td>ActionTypes,SignType</td>\n<td>boolean</td>\n<td>在调用<code>validateIdentity</code>和<code>validateAuthority</code>前调用，插件可自行判断是否对此类型的操作或此类型的模块进行鉴权。</td>\n</tr>\n<tr>\n<td>validateIdentity</td>\n<td>IdentityContext, Resource</td>\n<td>boolean</td>\n<td>对身份信息进行验证，在<code>validateAuthority</code>前调用</td>\n</tr>\n<tr>\n<td>validateAuthority</td>\n<td>IdentityContext, Permission</td>\n<td>boolean</td>\n<td>对权限进行验证，在<code>validateIdentity</code>返回为<code>true</code>时调用</td>\n</tr>\n</tbody>\n</table>\n<h3>加载服务端插件</h3>\n<p>插件开发完成后，需要打包成jar/zip，放置到nacos服务端的classpath中，如果您不知道如何修改classpath，请直接放置到<code>${nacos-server.path}/plugins</code>下</p>\n<p>放置后，需要修改<code>${nacos-server.path}/conf/application.properties</code>中的以下配置</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">### 所启用的Nacos的鉴权插件的名称，与`com.alibaba.nacos.plugin.auth.spi.server.AuthPluginService`的`getAuthServiceName`返回值对应</span>\n<span class=\"hljs-meta\">nacos.core.auth.system.type</span>=<span class=\"hljs-string\">${authServiceName}</span>\n<span class=\"hljs-comment\">\n### 开启鉴权功能</span>\n<span class=\"hljs-meta\">nacos.core.auth.enabled</span>=<span class=\"hljs-string\">true</span>\n</code></pre>\n<p>随后重启nacos集群，在有请求访问到nacos节点后，可以从<code>${nacos-server.path}/logs/core-auth.log</code>中看到如下日志：</p>\n<pre><code class=\"language-text\">[AuthPluginManager] Load AuthPluginService(xxxx) AuthServiceName(xxx) successfully.\n</code></pre>\n<h3>使用Nacos自带的鉴权插件</h3>\n<p>Nacos默认带有一个鉴权的简易实现，主要是为防止业务错用的弱鉴权体系，不是防止恶意攻击的强鉴权体系。开启和使用方式请查看文档<a href=\"https://nacos.io/zh-cn/docs/auth.html\">用户指南-权限认证</a>.</p>\n<h2>客户端插件</h2>\n<p>Nacos的客户端鉴权插件主要工作为将鉴权相关的身份信息，注入到请求中，让每个请求都能够被对应的服务端鉴权插件识别。</p>\n<p>在Nacos的Java客户端默认自带两个实现：</p>\n<ul>\n<li>使用<code>username</code>，<code>password</code>和<code>accessToken</code>的简易鉴权实现；</li>\n<li>使用<code>accessKey</code>和<code>secretKey</code>的阿里云鉴权实现；</li>\n</ul>\n<h3>Nacos简易鉴权实现</h3>\n<p>当构造客户端实例时传入的properties中带有<code>username</code>，<code>password</code>时，客户端会使用简易鉴权实现插件注入身份信息；\n如：</p>\n<pre><code class=\"language-java\">Properties properties = <span class=\"hljs-keyword\">new</span> Properties();\nproperties.setProperty(PropertyKeyConst.SERVER_ADDR, <span class=\"hljs-string\">\"localhost:8848\"</span>);\nproperties.setProperty(PropertyKeyConst.USERNAME, <span class=\"hljs-string\">\"nacos\"</span>);\nproperties.setProperty(PropertyKeyConst.PASSWORD, <span class=\"hljs-string\">\"nacos\"</span>);\nNamingFactory.createNamingService(properties);\nConfigFactory.createConfigService(properties);\n</code></pre>\n<p>该插件会异步地通过<code>username</code>，<code>password</code>进行登录，获取登录成功后的<code>accessToken</code>，并将<code>accessToken</code>注入到所有客户端请求中，开发者可以根据<code>accessToken</code>在实现的服务端插件中进行身份验证及后续的权限验证。</p>\n<h3>阿里云鉴权实现</h3>\n<p>当properties中带有<code>accessKey</code>和<code>secretKey</code>时，则会使用阿里云鉴权实现注入身份信息，如：</p>\n<pre><code class=\"language-java\">Properties properties = <span class=\"hljs-keyword\">new</span> Properties();\nproperties.setProperty(PropertyKeyConst.SERVER_ADDR, <span class=\"hljs-string\">\"localhost:8848\"</span>);\nproperties.setProperty(PropertyKeyConst.ACCESS_KEY, <span class=\"hljs-string\">\"nacos\"</span>);\nproperties.setProperty(PropertyKeyConst.SECRET_KEY, <span class=\"hljs-string\">\"nacos\"</span>);\nNamingFactory.createNamingService(properties);\nConfigFactory.createConfigService(properties);\n</code></pre>\n<p>该插件会根据<code>accessKey</code>和<code>secretKey</code>以及请求的资源内容，自动生成对应的请求签名，并注入到请求中，根据资源类型的不同，请求中的身份信息关键字可能不同：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>身份关键字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NamingService</td>\n<td>ak</td>\n<td>accessKey</td>\n</tr>\n<tr>\n<td>NamingService</td>\n<td>signature</td>\n<td>注册中心模块的签名信息</td>\n</tr>\n<tr>\n<td>NamingService</td>\n<td>data</td>\n<td>签名数据，主要是时间戳</td>\n</tr>\n<tr>\n<td>ConfigService</td>\n<td>Spas-AccessKey</td>\n<td>accessKey</td>\n</tr>\n<tr>\n<td>ConfigService</td>\n<td>Spas-Signature</td>\n<td>配置中心模块的签名信息</td>\n</tr>\n<tr>\n<td>ConfigService</td>\n<td>Timestamp</td>\n<td>请求的时间戳</td>\n</tr>\n<tr>\n<td>ConfigService</td>\n<td>Spas-SecurityToken</td>\n<td>临时token（启用阿里云STS功能时使用）</td>\n</tr>\n</tbody>\n</table>\n<p>开发者可以根据以上信息，在实现的服务端插件中进行身份验证及后续的权限验证。</p>\n<h3>其他自定义插件</h3>\n<p>考虑到开发者的鉴权插件可能有自定义的身份信息关键字，因此Nacos的Java客户端同样可以使用SPI方式注入对应的插件实现。</p>\n<p>开发Nacos客户端鉴权插件，首先需要依赖鉴权插件的相关API</p>\n<pre><code class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-auth-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${project.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p><code>${project.version}</code> 为您开发插件所对应的Nacos版本</p>\n<p>随后实现<code>com.alibaba.nacos.plugin.auth.spi.client.ClientAuthService</code>接口， 并将您的实现添加到SPI的services当中。</p>\n<p>接口中需要实现的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>入参内容</th>\n<th>返回内容</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setServerList</td>\n<td>List<String>，Nacos服务端地址列表</td>\n<td>void</td>\n<td>初始化时会调用此接口注入Nacos的服务列表，方便插件访问nacos服务端，如调用登录接口等</td>\n</tr>\n<tr>\n<td>setNacosRestTemplate</td>\n<td>NacosRestTemplate，Nacos的http客户端</td>\n<td>void</td>\n<td>初始化时会调用此接口注入Nacos的http客户端，方便插件访问nacos服务端，如调用登录接口等</td>\n</tr>\n<tr>\n<td>login</td>\n<td>Properties，即初始化Nacos客户端时传入的参数</td>\n<td>boolean</td>\n<td>登录接口，主要执行的是身份信息的转换工作，如<code>username</code>，<code>password</code>转换为<code>accessToken</code></td>\n</tr>\n<tr>\n<td>getLoginIdentityContext</td>\n<td>Resource</td>\n<td>IdentityContext</td>\n<td>获取经过登录接口转换后的身份信息，客户端会将该返回对象的内容全部注入到请求中</td>\n</tr>\n</tbody>\n</table>\n<p>您也可以选择继承<code>com.alibaba.nacos.plugin.auth.spi.client.AbstractClientAuthService</code>，该父类默认实现了<code>setServerList</code>和<code>setNacosRestTemplate</code>。</p>\n<p>将开发完成的客户端插件打包成jar/zip，放入到您应用的classpath中即可自动生效。</p>\n<h3>其他语言客户端鉴权插件</h3>\n<p>待社区贡献。</p>\n",
  "link": "/zh-cn/docs/auth-plugin.html",
  "meta": {
    "title": "鉴权插件",
    "keywords": "鉴权, 插件",
    "description": "本文描述如何开发及使用Nacos的鉴权插件"
  }
}