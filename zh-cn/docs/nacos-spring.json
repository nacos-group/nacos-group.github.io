{
  "filename": "nacos-spring.md",
  "__html": "<h1>Nacos Spring</h1>\n<p>本文将介绍 <a href=\"https://github.com/nacos-group/nacos-spring-project\"><code>nacos-spring-context</code></a> 中的一些关键的特性：</p>\n<ul>\n<li>注解驱动</li>\n<li>依赖注入</li>\n<li>外部化配置</li>\n<li>事件驱动</li>\n</ul>\n<h2>1. 注解驱动</h2>\n<h3>1.1. 启用 Nacos</h3>\n<p><code>@EnableNacos</code>是一个模块驱动的注解，它支持 Nacos Spring 的所有功能，包括<strong>服务发现</strong>和<strong>配置管理</strong>。它等于 <code>@EnableNacosDiscovery</code> 加上 <code>@EnableNacosConfig</code>，可以单独配置并在不同场景中使用。</p>\n<h3>1.2. 配置监听</h3>\n<p>假设在 Nacos 服务中有一个配置，其 <code>dataId</code> 是 &quot;testDataId&quot; 而 <code>groupId</code> 是默认组（&quot;DEFAULT_GROUP&quot;）。 现在，您可以使用 <code>ConfigService#publishConfig</code> 方法更改其内容：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@NacosInjected</span>\n<span class=\"hljs-keyword\">private</span> ConfigService configService;\n\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testPublishConfig</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NacosException </span>{\n    configService.publishConfig(DATA_ID, DEFAULT_GROUP, <span class=\"hljs-string\">\"9527\"</span>);\n}\n</code></pre>\n<p>然后您可以添加一个监听器，它将监听配置的变化。 您可以通过在 Spring Bean 中添加配置变更监听器方法来执行此操作：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@NacosConfigListener</span>(dataId = DATA_ID)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onMessage</span><span class=\"hljs-params\">(String config)</span> </span>{\n    assertEquals(<span class=\"hljs-string\">\"mercyblitz\"</span>, config); <span class=\"hljs-comment\">// asserts true</span>\n}\n</code></pre>\n<p>下面的代码具有相同的效果：</p>\n<pre><code class=\"language-java\">configService.addListener(DATA_ID, DEFAULT_GROUP, <span class=\"hljs-keyword\">new</span> AbstractListener() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">receiveConfigInfo</span><span class=\"hljs-params\">(String config)</span> </span>{\n        assertEquals(<span class=\"hljs-string\">\"9527\"</span>, config); <span class=\"hljs-comment\">// asserts true</span>\n    }\n});\n</code></pre>\n<p>另外，<code>@NacosConfigListener</code> 支持更丰富的类型转换。</p>\n<ul>\n<li>请参看： <a href=\"https://github.com/nacos-group/nacos-spring-project/blob/master/nacos-spring-samples/nacos-spring-webmvc-sample/src/main/java/com/alibaba/nacos/samples/spring/listener/SimpleNacosConfigListener.java\">Simple Sample of <code>@NacosConfigListener</code></a></li>\n</ul>\n<h4>1.2.1. 类型</h4>\n<p><code>@NacosConfigListener</code> 的类型转换包括内置和自定义实现。 默认情况下，内置类型转换基于 Spring <code>DefaultFormattingConversionService</code>，这意味着它包好了大多数情况以及 Spring 框架更高级版本的丰富功能。</p>\n<p>例如，前面示例中的内容 &quot;9527&quot; 也可以通过带 &quot;int&quot; 或 &quot;Integer&quot; 参数的方法进行监听：:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@NacosConfigListener</span>(dataId = DATA_ID)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onInteger</span><span class=\"hljs-params\">(Integer value)</span> </span>{\n    assertEquals(Integer.valueOf(<span class=\"hljs-number\">9527</span>), value); <span class=\"hljs-comment\">// asserts true</span>\n}\n\n<span class=\"hljs-meta\">@NacosConfigListener</span>(dataId = DATA_ID)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onInt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>{\n    assertEquals(<span class=\"hljs-number\">9527</span>, value); <span class=\"hljs-comment\">// asserts true</span>\n}\n</code></pre>\n<p>当然, <a href=\"https://github.com/nacos-group/nacos-spring-project\"><code>nacos-spring-context</code></a> 为开发人员提供弹性扩展。 如果定义名为<code>nacosConfigConversionService</code>的Spring Bean，其类型为<code>ConversionService</code>，则将忽略<code>DefaultFormattingConversionService</code>。 此外，您可以自定义<code>NacosConfigConverter</code>接口的实现，以指定类型转换的侦听器方法：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserNacosConfigConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">NacosConfigConverter</span>&lt;<span class=\"hljs-title\">User</span>&gt; </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">canConvert</span><span class=\"hljs-params\">(Class&lt;User&gt; targetType)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">convert</span><span class=\"hljs-params\">(String source)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> JSON.parseObject(source, User.class);\n    }\n}\n</code></pre>\n<p><code>UserNacosConfigConverter</code> 类绑定在 <code>@NacosConfigListener.converter()</code> 属性上，如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@NacosInjected</span>\n<span class=\"hljs-keyword\">private</span> ConfigService configService;\n\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testPublishUser</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NacosException </span>{\n    configService.publishConfig(<span class=\"hljs-string\">\"user\"</span>, DEFAULT_GROUP, <span class=\"hljs-string\">\"{\\\"id\\\":1,\\\"name\\\":\\\"mercyblitz\\\"}\"</span>);\n}\n\n<span class=\"hljs-meta\">@NacosConfigListener</span>(dataId = <span class=\"hljs-string\">\"user\"</span>, converter = UserNacosConfigConverter.class)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onUser</span><span class=\"hljs-params\">(User user)</span> </span>{\n    assertEquals(Long.valueOf(<span class=\"hljs-number\">1L</span>), user.getId()); \n    assertEquals(<span class=\"hljs-string\">\"mercyblitz\"</span>, user.getName());\n}\n</code></pre>\n<ul>\n<li>请参看：<a href=\"https://github.com/nacos-group/nacos-spring-project/blob/master/nacos-spring-samples/nacos-spring-webmvc-sample/src/main/java/com/alibaba/nacos/samples/spring/listener/PojoNacosConfigListener.java\">Type Conversion Sample of <code>@NacosConfigListener</code></a></li>\n</ul>\n<h4>1.2.2. 超时时间</h4>\n<p>由于运行自定义的 <code>NacosConfigConverter</code> 可能需要一些时间，因此您可以在 <code>@NacosConfigListener.timeout()</code> 属性中设置最大执行时间，以防止它阻塞其他侦听器：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Listeners</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> Integer integerValue;\n\n    <span class=\"hljs-keyword\">private</span> Double doubleValue;\n\n    <span class=\"hljs-meta\">@NacosConfigListener</span>(dataId = DATA_ID, timeout = <span class=\"hljs-number\">50</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onInteger</span><span class=\"hljs-params\">(Integer value)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        Thread.sleep(<span class=\"hljs-number\">100</span>); <span class=\"hljs-comment\">// timeout of execution</span>\n        <span class=\"hljs-keyword\">this</span>.integerValue = value;\n    }\n\n    <span class=\"hljs-meta\">@NacosConfigListener</span>(dataId = DATA_ID, timeout = <span class=\"hljs-number\">200</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onDouble</span><span class=\"hljs-params\">(Double value)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        Thread.sleep(<span class=\"hljs-number\">100</span>); <span class=\"hljs-comment\">// normal execution</span>\n        <span class=\"hljs-keyword\">this</span>.doubleValue = value;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">getIntegerValue</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> integerValue;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Double <span class=\"hljs-title\">getDoubleValue</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> doubleValue;\n    }\n}\n</code></pre>\n<p><code>Listeners</code> Bean 的 <code>integerValue</code> 总是为<code>null</code>，不会改变。 因此，以下断言都将是 <code>true</code>：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> Listeners listeners;\n\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testPublishConfig</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NacosException </span>{\n    configService.publishConfig(DATA_ID, DEFAULT_GROUP, <span class=\"hljs-string\">\"9527\"</span>);\n    assertNull(listeners.getIntegerValue()); <span class=\"hljs-comment\">// asserts true</span>\n    assertEquals(Double.valueOf(<span class=\"hljs-number\">9527</span>), listeners.getDoubleValue());   <span class=\"hljs-comment\">// asserts true</span>\n}\n</code></pre>\n<ul>\n<li>请参看：<a href=\"https://github.com/nacos-group/nacos-spring-project/blob/master/nacos-spring-samples/nacos-spring-webmvc-sample/src/main/java/com/alibaba/nacos/samples/spring/listener/TimeoutNacosConfigListener.java\">Timeout Sample of <code>@NacosConfigListener</code></a></li>\n</ul>\n<h3>1.3. 全局和自定义 Nacos 属性</h3>\n<p><code>globalProperties</code> 是任何 <code>@EnableNacos</code>，<code>@EnableNacosDiscovery</code> 或 <code>@EnableNacosConfig</code> 中的必选属性，其类型为 <code>@NacosProperties</code>。</p>\n<p><code>globalProperties</code> 将初始化为其他注解或组件的 &quot;<strong>全局 Nacos 属性</strong>&quot;，例如：<code>@NacosInjected</code>。</p>\n<p>换句话说，<strong>全局 Nacos 属性</strong> 定义全局和默认属性。它设置为具有最低优先级，并且也可以被覆盖。覆盖优先级如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>Precedence Order</th>\n<th>Nacos Annotation</th>\n<th>Required</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code>*.properties()</code></td>\n<td>N</td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>@EnableNacosConfig.globalProperties()</code> or <code>@EnableNacosDiscovery.globalProperties()</code></td>\n<td>Y</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>@EnableNacos.globalProperties()</code></td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<p><code>*.properties()</code> 定义来自以下之一的自定义 Nacos 属性：</p>\n<ul>\n<li><code>@NacosInjected.properties()</code></li>\n<li><code>@NacosConfigListener.properties()</code></li>\n<li><code>@NacosPropertySource.properties()</code></li>\n<li><code>@NacosConfigurationProperties.properties()</code></li>\n</ul>\n<p>自定义的 Nacos 属性也由 <code>@NacosProperties</code> 配置。 不过，它们是可选的，用于在特殊情况下覆盖全局 Nacos 属性。 如果没有定义，Nacos 属性将尝试从 <code>@EnableNacosConfig.globalProperties()</code> 或 <code>@EnableNacosDiscovery.globalProperties()</code> 或\n<code>@EnableNacos.globalProperties()</code> 中查找属性。</p>\n<h3>1.4. <code>@NacosProperties</code></h3>\n<p><code>@NacosProperties</code> 是全局和自定义 Nacos 属性的统一注解。 它充当Java <code>Properties</code> 和 <code>NacosFactory</code> 类之间的中介。<code>NacosFactory</code> 负责创建 <code>ConfigService</code> 或 <code>NamingService</code> 实例。</p>\n<p><code>@NacosProperties</code> 的属性完全支持占位符，它的源是Spring <code>Environment</code> 抽象中的各种 <code>PropertySource</code>，通常是Java System <code>Properties</code> 和操作系统环境变量。 所有占位符的前缀都是 <code>nacos.</code>。<code>@NacosProperties</code> 和 Nacos 属性的属性之间的映射如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Property</th>\n<th>Placeholder</th>\n<th>Description</th>\n<th>Required</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>endpoint()</code></td>\n<td><code>endpoint</code></td>\n<td><code>${nacos.endpoint:}</code></td>\n<td></td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>namespace()</code></td>\n<td><code>namespace</code></td>\n<td><code>${nacos.namespace:}</code></td>\n<td></td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>accessKey()</code></td>\n<td><code>access-key</code></td>\n<td><code>${nacos.access-key:}</code></td>\n<td></td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>secretKey()</code></td>\n<td><code>secret-key</code></td>\n<td><code>${nacos.secret-key:}</code></td>\n<td></td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>serverAddr()</code></td>\n<td><code>server-addr</code></td>\n<td><code>${nacos.server-addr:}</code></td>\n<td></td>\n<td>Y</td>\n</tr>\n<tr>\n<td><code>contextPath()</code></td>\n<td><code>context-path</code></td>\n<td><code>${nacos.context-path:}</code></td>\n<td></td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>clusterName()</code></td>\n<td><code>cluster-name</code></td>\n<td><code>${nacos.cluster-name:}</code></td>\n<td></td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>encode()</code></td>\n<td><code>encode</code></td>\n<td><code>${nacos.encode:UTF-8}</code></td>\n<td></td>\n<td>N</td>\n</tr>\n</tbody>\n</table>\n<p>请注意，<code>@EnableNacosDiscovery</code> 和 <code>@EnableNacosConfig</code> 之间 <code>globalProperties()</code> 的占位符存在一些差异：</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th><code>@EnableNacosDiscovery</code>'s Placeholder</th>\n<th><code>@EnableNacosConfig</code>'s Placeholder</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>endpoint()</code></td>\n<td><code>${nacos.discovery.endpoint:${nacos.endpoint:}}</code></td>\n<td><code>${nacos.config.endpoint:${nacos.endpoint:}}</code></td>\n</tr>\n<tr>\n<td><code>namespace()</code></td>\n<td><code>${nacos.discovery.namespace:${nacos.namespace:}}</code></td>\n<td><code>${nacos.config.namespace:${nacos.namespace:}}</code></td>\n</tr>\n<tr>\n<td><code>accessKey()</code></td>\n<td><code>${nacos.discovery.access-key:${nacos.access-key:}}</code></td>\n<td><code>${nacos.config.access-key:${nacos.access-key:}}</code></td>\n</tr>\n<tr>\n<td><code>secretKey()</code></td>\n<td><code>${nacos.discovery.secret-key:${nacos.secret-key:}}</code></td>\n<td><code>${nacos.config.secret-key:${nacos.secret-key:}}</code></td>\n</tr>\n<tr>\n<td><code>serverAddr()</code></td>\n<td><code>${nacos.discovery.server-addr:${nacos.server-addr:}}</code></td>\n<td><code>${nacos.config.server-addr:${nacos.server-addr:}}</code></td>\n</tr>\n<tr>\n<td><code>contextPath()</code></td>\n<td><code>${nacos.discovery.context-path:${nacos.context-path:}}</code></td>\n<td><code>${nacos.config.context-path:${nacos.context-path:}}</code></td>\n</tr>\n<tr>\n<td><code>clusterName()</code></td>\n<td><code>${nacos.discovery.cluster-name:${nacos.cluster-name:}}</code></td>\n<td><code>${nacos.config.cluster-name:${nacos.cluster-name:}}</code></td>\n</tr>\n<tr>\n<td><code>encode()</code></td>\n<td><code>${nacos.discovery.encode:${nacos.encode:UTF-8}}</code></td>\n<td><code>${nacos.config.encode:${nacos.encode:UTF-8}}</code></td>\n</tr>\n</tbody>\n</table>\n<p>这些 <code>@EnableNacosDiscovery</code> 和 <code>@EnableNacosConfig</code> 的占位符用于隔离不同的 Nacos 服务，在大多数情况下都是不必要的。默认情况下，将使用常规占位符。</p>\n<h2>2. 依赖注入</h2>\n<p><code>@NacosInjected</code> 是一个核心注解，用于在Spring Beans 中注入 <code>ConfigService</code> 或 <code>NamingService</code> 实例，并使这些实例<strong>可缓存</strong>。 这意味着如果它们的 <code>@NacosProperties</code> 相等，则实例将是相同的，无论属性是来自全局还是自定义的 Nacos 属性：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@NacosInjected</span>\n<span class=\"hljs-keyword\">private</span> ConfigService configService;\n\n<span class=\"hljs-meta\">@NacosInjected</span>(properties = <span class=\"hljs-meta\">@NacosProperties</span>(encode = <span class=\"hljs-string\">\"UTF-8\"</span>))\n<span class=\"hljs-keyword\">private</span> ConfigService configService2;\n\n<span class=\"hljs-meta\">@NacosInjected</span>(properties = <span class=\"hljs-meta\">@NacosProperties</span>(encode = <span class=\"hljs-string\">\"GBK\"</span>))\n<span class=\"hljs-keyword\">private</span> ConfigService configService3;\n\n<span class=\"hljs-meta\">@NacosInjected</span>\n<span class=\"hljs-keyword\">private</span> NamingService namingService;\n\n<span class=\"hljs-meta\">@NacosInjected</span>(properties = <span class=\"hljs-meta\">@NacosProperties</span>(encode = <span class=\"hljs-string\">\"UTF-8\"</span>))\n<span class=\"hljs-keyword\">private</span> NamingService namingService2;\n\n<span class=\"hljs-meta\">@NacosInjected</span>(properties = <span class=\"hljs-meta\">@NacosProperties</span>(encode = <span class=\"hljs-string\">\"GBK\"</span>))\n<span class=\"hljs-keyword\">private</span> NamingService namingService3;\n\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testInjection</span><span class=\"hljs-params\">()</span> </span>{\n\n    Assert.assertEquals(configService, configService2);\n    Assert.assertNotEquals(configService2, configService3);\n\n    Assert.assertEquals(namingService, namingService2);\n    Assert.assertNotEquals(namingService2, namingService3);\n}\n</code></pre>\n<p>属性 <code>configService</code> 使用 <code>@EnableNacos#globalProperties()</code> 或 <code>@EnableNacosConfig#globalProperties()</code>，因为 <code>encode</code> 属性的默认值是  &quot;UTF-8&quot;，因此 <code>configService</code> 实例和由 <code>@NacosProperties(encode =&quot;UTF-8&quot;)</code> 注解的 <code>configService2</code> 实例是相同的。 <code>namingService</code> 和 <code>namingService2</code> 也是如此。</p>\n<p>值得注意的是，与 <code>NacosFactory.createConfigService()</code> 方法创建的 <code>ConfigService</code> 实例不同，<code>@NacosInjected</code> 注解创建的 <code>ConfigService</code> 实例支持 Nacos Spring 事件。 例如，在增强的 <code>ConfigService</code> 调用 <code>publishConfig()</code> 方法之后会有一个 <code>NacosConfigPublishedEvent</code>。 有关更多详细信息，请参阅&quot;事件驱动&quot;部分。</p>\n<ul>\n<li>请参看：<a href=\"https://github.com/nacos-group/nacos-spring-project/blob/master/nacos-spring-samples/nacos-spring-webmvc-sample/src/main/java/com/alibaba/nacos/samples/spring/NacosConfiguration.java\">Dependency Injection Sample</a></li>\n</ul>\n<h2>3. 外部化配置</h2>\n<p>外部化配置是 Spring Boot 引入的概念，它允许应用程序接收外部属性源以控制运行时行为。 Nacos Server 在应用程序外部运行单独的进程以维护应用程序配置。 <a href=\"https://github.com/nacos-group/nacos-spring-project\"><code>nacos-spring-context</code></a> 提供了对象绑定，动态配置（自动刷新）等功能。</p>\n<p>这里有 <a href=\"https://github.com/nacos-group/nacos-spring-project\"><code>nacos-spring-context</code></a> 和 Spring Stack 之间的简单比较：</p>\n<table>\n<thead>\n<tr>\n<th>Spring Stack</th>\n<th>Nacos Spring</th>\n<th>Highlight</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Value</code></td>\n<td><code>@NacosValue</code></td>\n<td>auto-refreshed</td>\n</tr>\n<tr>\n<td><code>@ConfigurationProperties</code></td>\n<td><code>@NacosConfigurationProperties</code></td>\n<td>auto-refreshed,<code>@NacosProperty</code>,<code>@NacosIgnore</code></td>\n</tr>\n<tr>\n<td><code>@PropertySource</code></td>\n<td><code>@NacosPropertySource</code></td>\n<td>auto-refreshed, precedence order control</td>\n</tr>\n<tr>\n<td><code>@PropertySources</code></td>\n<td><code>@NacosPropertySources</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>请参看：<a href=\"https://github.com/nacos-group/nacos-spring-project/blob/master/nacos-spring-samples/nacos-spring-webmvc-sample/src/main/java/com/alibaba/nacos/samples/spring/properties/NacosConfigurationPropertiesConfiguration.java\">Auto-Refreshed Sample of <code>@NacosConfigurationProperties</code></a></li>\n<li>请参看：<a href=\"https://github.com/nacos-group/nacos-spring-project/blob/master/nacos-spring-samples/nacos-spring-webmvc-sample/src/main/java/com/alibaba/nacos/samples/spring/env/NacosPropertySourceConfiguration.java\">Sample of <code>@NacosPropertySources</code> and <code>@NacosPropertySource</code></a></li>\n</ul>\n<h2>4. 事件驱动</h2>\n<p>Nacos 事件驱动 基于标准的 Spring Event / Listener 机制。 Spring 的 <code>ApplicationEvent</code> 是所有 Nacos Spring 事件的抽象超类：</p>\n<table>\n<thead>\n<tr>\n<th>Nacos Spring Event</th>\n<th>Trigger</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>NacosConfigPublishedEvent</code></td>\n<td>After <code>ConfigService.publishConfig()</code></td>\n</tr>\n<tr>\n<td><code>NacosConfigReceivedEvent</code></td>\n<td>After<code>Listener.receiveConfigInfo()</code></td>\n</tr>\n<tr>\n<td><code>NacosConfigRemovedEvent</code></td>\n<td>After <code>configService.removeConfig()</code></td>\n</tr>\n<tr>\n<td><code>NacosConfigTimeoutEvent</code></td>\n<td><code>ConfigService.getConfig()</code> on timeout</td>\n</tr>\n<tr>\n<td><code>NacosConfigListenerRegisteredEvent</code></td>\n<td>After <code>ConfigService.addListner()</code> or <code>ConfigService.removeListener()</code></td>\n</tr>\n<tr>\n<td><code>NacosConfigurationPropertiesBeanBoundEvent</code></td>\n<td>After <code>@NacosConfigurationProperties</code> binding</td>\n</tr>\n<tr>\n<td><code>NacosConfigMetadataEvent</code></td>\n<td>After Nacos Config operations</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>请参看：<a href=\"https://github.com/nacos-group/nacos-spring-project/blob/master/nacos-spring-samples/nacos-spring-webmvc-sample/src/main/java/com/alibaba/nacos/samples/spring/event/NacosEventListenerConfiguration.java\">Event/Listener Sample</a></li>\n</ul>\n<h2>相关项目</h2>\n<ul>\n<li><a href=\"https://github.com/alibaba/nacos\">Nacos</a></li>\n<li><a href=\"https://github.com/nacos-group/nacos-spring-project\">Nacos Spring</a></li>\n<li><a href=\"https://github.com/nacos-group/nacos-spring-boot-project\">Nacos Spring Boot</a></li>\n<li><a href=\"https://github.com/spring-cloud-incubator/spring-cloud-alibaba\">Spring Cloud Alibaba</a></li>\n</ul>\n",
  "title": "Nacos Spring",
  "keywords": "Nacos,Spring",
  "description": "Nacos Spring"
}