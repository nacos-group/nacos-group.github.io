{
  "filename": "2.0.0-compatibility.md",
  "__html": "<h1>Nacos2.0代码存放位置</h1>\n<p>Nacos代码当前保存在feature_support_grpc_core分支中，需要切换到该分支再启动，启动方式与Nacos 1.x相同，欢迎贡献。</p>\n<h1>Nacos 2.0.0 兼容性文档</h1>\n<p>经过社区的讨论和开发， Nacos 基于长连接的2.0.0版本的核心功能已开发完成，目前2.0.0正式版本已发布，欢迎大家使用。</p>\n<p>2.0.0支持Nacos1.X服务端的平滑升降级的能力，详情请查看<a href=\"https://nacos.io/zh-cn/docs/2.0.0-upgrading.html\">Nacos2.0升级文档</a> 。</p>\n<h2>Nacos 2.0.0版本压测</h2>\n<p>详情见：<a href=\"/zh-cn/docs/nacos2-naming-benchmark.html\">Nacos2.0服务发现模块压测报告</a> 以及 <a href=\"/zh-cn/docs/nacos2-config-benchmark.html\">Nacos2.0配置模块压测报告</a> 。</p>\n<p>大规模压测报告将在近期放出。</p>\n<h2>新版本部署</h2>\n<p>Nacos2.0版本相比1.X新增了gRPC的通信方式，因此需要增加2个端口。新增端口是在配置的主端口(server.port)基础上，进行一定偏移量自动生成。</p>\n<table>\n<thead>\n<tr>\n<th>端口</th>\n<th>与主端口的偏移量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9848</td>\n<td>1000</td>\n<td>客户端gRPC请求服务端端口，用于客户端向服务端发起连接和请求</td>\n</tr>\n<tr>\n<td>9849</td>\n<td>1001</td>\n<td>服务端gRPC请求服务端端口，用于服务间同步等</td>\n</tr>\n</tbody>\n</table>\n<p><strong>使用VIP/nginx请求时，需要配置成TCP转发，不能配置http2转发，否则连接会被nginx断开。</strong></p>\n<p><img src=\"/img/nacos2_port_exposure.png\" alt=\"nacos2_port_exposure.png\"></p>\n<p>客户端拥有相同的计算逻辑，用户如同1.X的使用方式，配置主端口(默认8848)，通过相同的偏移量，计算对应gRPC端口(默认9848)。</p>\n<p>因此如果客户端和服务端之前存在端口转发，或防火墙时，需要对端口转发配置和防火墙配置做相应的调整。</p>\n<p>其余部署参考<a href=\"https://nacos.io/zh-cn/docs/deployment.html\">Nacos部署手册</a> ,将版本相关替换成2.0.0。</p>\n<h2>兼容性</h2>\n<p>Nacos2.0的服务端完全兼容1.X客户端。Nacos2.0客户端由于使用了gRPC，无法兼容Nacos1.X服务端，请勿使用2.0以上版本客户端连接Nacos1.X服务端。</p>\n<h2>功能完成度及旧版本客户端适配情况：</h2>\n<h3>配置中心</h3>\n<h4>JAVA SDK</h4>\n<ul>\n<li>完全兼容1.X客户端所有API接口方法；</li>\n<li>完全实现2.0客户端所有API接口方法。</li>\n</ul>\n<h4>其他语言 SDK</h4>\n<ul>\n<li>完全兼容</li>\n</ul>\n<h4>openAPI</h4>\n<ul>\n<li>完全兼容所有配置中心相关openAPI。</li>\n</ul>\n<h3>服务发现</h3>\n<h4>JAVA SDK</h4>\n<ul>\n<li>完全兼容1.X客户端所有API接口方法；</li>\n<li>完全兼容2.0客户端所有API接口方法；</li>\n</ul>\n<h4>其他语言 SDK</h4>\n<ul>\n<li>完全兼容所有服务发现相关openAPI。</li>\n</ul>\n<h4>openAPI</h4>\n<ul>\n<li>注册实例（支持）</li>\n<li>注销实例（支持）</li>\n<li>修改实例（支持）</li>\n<li>查询实例列表（支持）</li>\n<li>查询实例详情（支持）</li>\n<li>发送实例心跳（支持）</li>\n<li>创建服务（支持）</li>\n<li>删除服务（支持）</li>\n<li>修改服务（支持）</li>\n<li>查询服务（支持）</li>\n<li>查询服务列表（支持）</li>\n<li>查询系统开关（支持）</li>\n<li>修改系统开关（支持）</li>\n<li>查看系统当前数据指标（支持）</li>\n<li>查看当前集群Server列表（支持）</li>\n<li>查看当前集群leader（将废弃）</li>\n<li>更新实例的健康状态（支持）</li>\n<li>批量更新实例元数据(支持)</li>\n<li>批量删除实例元数据(支持)</li>\n</ul>\n<h3>控制台</h3>\n<ul>\n<li>完全兼容配置中心相关页面及功能</li>\n<li>完全兼容权限控制相关页面及功能</li>\n<li>完全兼容命名空间相关页面及功能</li>\n<li>完全兼容集群管理相关页面及功能</li>\n<li>完全兼容服务发现相关页面及功能</li>\n</ul>\n<h2>生态兼容情况</h2>\n<h3>Spring Cloud Alibaba</h3>\n<p>可通过指定nacos-client方式，提前使用Nacos2.0长连接功能</p>\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;\n        &lt;version&gt;2.1.5.RELEASE&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;\n                &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;\n        &lt;version&gt;2.1.5.RELEASE&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;\n                &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;\n        &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;\n        &lt;version&gt;2.0.0-BETA&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>\n<h3>Dubbo</h3>\n<p>Nacos2.0版本客户端重新适配了Dubbo2.7.X。并且Dubbo社区正在对新版本进行修改，不再强依赖反射，详情请看 <a href=\"https://github.com/apache/dubbo/issues/7291\">Dubbo#7291</a></p>\n<h3>Nacos Spring Boot</h3>\n<p>Nacos spring boot 将会发布新版本适配2.0.0客户端。</p>\n<h2>使用方式</h2>\n<h3>SDK客户端、控制台</h3>\n<p>Nacos 2.0.0版本使用方式和Nacos1.X版本使用完全一致。客户端接口请参考Nacos1.X的<a href=\"https://nacos.io/zh-cn/docs/sdk.html\">SDK文档</a>。</p>\n<h3>服务端</h3>\n<p>Nacos 2.0.0服务端的使用也和旧版本没有太大区别，这里对新版本中新增的数个配置参数进行说明</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nacos.naming.clean.empty-service.interval</td>\n<td>60000(单位毫秒)</td>\n<td>Nacos自动清理空服务的工作间隔，将替代旧版本中的<code>nacos.naming.empty-service.clean.period-time-ms</code>参数</td>\n</tr>\n<tr>\n<td>nacos.naming.clean.empty-service.expired-time</td>\n<td>60000(单位毫秒)</td>\n<td>Nacos判断可清理的空服务的过期时间，当服务没有发布的实例，且超过该过期时间未发生更新后，将被判定为过期空服务而移除</td>\n</tr>\n<tr>\n<td>nacos.naming.clean.expired-metadata.interval</td>\n<td>5000(单位毫秒)</td>\n<td>Nacos自动清理过期元数据的工作间隔</td>\n</tr>\n<tr>\n<td>nacos.naming.clean.expired-metadata.expired-time</td>\n<td>60000(单位毫秒)</td>\n<td>Nacos自动清理过期服务的过期时间，当服务或实例本身被移除超过该设定时间后，元数据信息将会被移除</td>\n</tr>\n</tbody>\n</table>\n<h2>FAQ</h2>\n<h3>能否支持Nacos旧版本客户端？</h3>\n<p>配置中心兼容支持Nacos1.0起的所有版本客户端，服务发现兼容Nacos1.2起所有版本客户端。\n因此建议使用Nacos1.2.0之后版本客户端。\n但nacos1.X的客户端不具有长连接能力，因此仍然建议使用Nacos2.0.0客户端。</p>\n<h3>启动后，调用openAPI 报错 code:503,msg:server is DOWN now, please try again later!</h3>\n<p>Nacos在1.4版本后使用Jraft替换了自研的Raft实现，Jraft的选主比原先自研的Raft更加严格，会记录之前启动时的ip或host。因此重启时如果ip变动了，有可能造成选主失败，从而导致nacos无法正确提供服务。\n解决方式为删除nacos目录下的data，再启动。</p>\n<p>或者使用<code>-Dnacos.server.ip=${domain}</code>,然后将nacos/conf的cluster.conf配置domain列表，避免重启时ip变动导致的raft选主问题。</p>\n<h3>找不到符号<code>com.alibaba.nacos.consistency.entity</code></h3>\n<p>这个包目录是由<code>protobuf</code>在编译时自动生成，您可以通过<code>mvn compile</code>来自动生成他们。如果您使用的是IDEA，也可以使用IDEA的protobuf插件。</p>\n<h3>启动时报错<code>Connection is unregistered.</code>或<code>Client not connected,current status:STARTING</code>.</h3>\n<p>原因是客户端gRPC无法和服务端创建连接，请先使用<code>telnet ${nacos.server.address}:${nacos.server.grpc.port}</code>进行测试，查看网络是否畅通，服务端端口是否已经正确监听。</p>\n<p>若服务端没有问题，查看配置是否有误，服务端和客户端的所配置的端口应一致。</p>\n<p>若配置也没有问题，查看是否有防火墙或VIP端口转发问题，Nacos2.0的gRPC端口均通过主端口的偏移量计算产生，因此端口转发也需要满足该偏移量。</p>\n<h3>Nacos2.0增加了9848，9849端口来进行GRPC通信，我需要在application.properties中额外配置吗？</h3>\n<p>不需要，这两个端口在Nacos2.0内部是通过8848+1000以及8848+1001这种偏移量方式计算出来的，不需要用户额外在配置文件中配置。但如果使用的是docker或存在端口转发方式启动，需要把这两个端口进行配置。</p>\n<h3>启动nacos2.0时希望用nginx 代理，9848这个端口怎样处理，要通过nginx暴露出来么？以及docker是否需要映射？</h3>\n<p>如果存在防火墙或者nginx端口转发问题，需要进行相应的端口暴露配置。如在nginx中，在已经暴露8848(x)的基础上，需要额外暴露9848（x+1000)。</p>\n<h3>待补充...</h3>\n",
  "link": "/zh-cn/docs/2.0.0-compatibility.html",
  "meta": {
    "title": "Nacos 2.0.0 兼容性文档",
    "keywords": "Nacos,2.0.0",
    "description": "Nacos 2.0.0 兼容性文档"
  }
}