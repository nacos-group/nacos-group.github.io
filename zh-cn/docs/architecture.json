{
  "filename": "architecture.md",
  "__html": "<h1>Nacos 架构</h1>\n<h2>基本架构及概念</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/338441/1561217892717-1418fb9b-7faa-4324-87b9-f1740329f564.jpeg\" alt=\"nacos_arch.jpg\"></p>\n<h3>服务 (Service)</h3>\n<p>服务是指一个或一组软件功能（例如特定信息的检索或一组操作的执行），其目的是不同的客户端可以为不同的目的重用（例如通过跨进程的网络调用）。Nacos 支持主流的服务生态，如 Kubernetes Service、gRPC|Dubbo RPC Service 或者 Spring Cloud RESTful Service.</p>\n<h3>服务注册中心 (Service Registry)</h3>\n<p>服务注册中心，它是服务，其实例及元数据的数据库。服务实例在启动时注册到服务注册表，并在关闭时注销。服务和路由器的客户端查询服务注册表以查找服务的可用实例。服务注册中心可能会调用服务实例的健康检查 API 来验证它是否能够处理请求。</p>\n<h3>服务元数据 (Service Metadata)</h3>\n<p>服务元数据是指包括服务端点(endpoints)、服务标签、服务版本号、服务实例权重、路由规则、安全策略等描述服务的数据</p>\n<h3>服务提供方 (Service Provider)</h3>\n<p>是指提供可复用和可调用服务的应用方</p>\n<h3>服务消费方 (Service Consumer)</h3>\n<p>是指会发起对某个服务调用的应用方</p>\n<h3>配置 (Configuration)</h3>\n<p>在系统开发过程中通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成这个步骤。配置变更是调整系统运行时的行为的有效手段之一。</p>\n<h3>配置管理 (Configuration Management)</h3>\n<p>在数据中心中，系统中所有配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等所有与配置相关的活动统称为配置管理。</p>\n<h3>名字服务 (Naming Service)</h3>\n<p>提供分布式系统中所有对象(Object)、实体(Entity)的“名字”到关联的元数据之间的映射管理服务，例如 ServiceName -&gt; Endpoints Info, Distributed Lock Name -&gt; Lock Owner/Status Info, DNS Domain Name -&gt; IP List, 服务发现和 DNS 就是名字服务的2大场景。</p>\n<h3>配置服务 (Configuration Service)</h3>\n<p>在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者。</p>\n<h3><a href=\"./concepts.md\">更多概念...</a></h3>\n<h2>逻辑架构及其组件介绍</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/338441/1561217775318-6e408805-18bb-4242-b4e9-83c5b929b469.png\" alt=\"nacos-logic.jpg\"></p>\n<ul>\n<li>服务管理：实现服务CRUD，域名CRUD，服务健康状态检查，服务权重管理等功能</li>\n<li>配置管理：实现配置管CRUD，版本管理，灰度管理，监听管理，推送轨迹，聚合数据等功能</li>\n<li>元数据管理：提供元数据CURD 和打标能力</li>\n<li>插件机制：实现三个模块可分可合能力，实现扩展点SPI机制</li>\n<li>事件机制：实现异步化事件通知，sdk数据变化异步通知等逻辑</li>\n<li>日志模块：管理日志分类，日志级别，日志可移植性（尤其避免冲突），日志格式，异常码+帮助文档</li>\n<li>回调机制：sdk通知数据，通过统一的模式回调用户处理。接口和数据结构需要具备可扩展性</li>\n<li>寻址模式：解决ip，域名，nameserver、广播等多种寻址模式，需要可扩展</li>\n<li>推送通道：解决server与存储、server间、server与sdk间推送性能问题</li>\n<li>容量管理：管理每个租户，分组下的容量，防止存储被写爆，影响服务可用性</li>\n<li>流量管理：按照租户，分组等多个维度对请求频率，长链接个数，报文大小，请求流控进行控制</li>\n<li>缓存机制：容灾目录，本地缓存，server缓存机制。容灾目录使用需要工具</li>\n<li>启动模式：按照单机模式，配置模式，服务模式，dns模式，或者all模式，启动不同的程序+UI</li>\n<li>一致性协议：解决不同数据，不同一致性要求情况下，不同一致性机制</li>\n<li>存储模块：解决数据持久化、非持久化存储，解决数据分片问题</li>\n<li>Nameserver：解决namespace到clusterid的路由问题，解决用户环境与nacos物理环境映射问题</li>\n<li>CMDB：解决元数据存储，与三方cmdb系统对接问题，解决应用，人，资源关系</li>\n<li>Metrics：暴露标准metrics数据，方便与三方监控系统打通</li>\n<li>Trace：暴露标准trace，方便与SLA系统打通，日志白平化，推送轨迹等能力，并且可以和计量计费系统打通</li>\n<li>接入管理：相当于阿里云开通服务，分配身份、容量、权限过程</li>\n<li>用户管理：解决用户管理，登录，sso等问题</li>\n<li>权限管理：解决身份识别，访问控制，角色管理等问题</li>\n<li>审计系统：扩展接口方便与不同公司审计系统打通</li>\n<li>通知系统：核心数据变更，或者操作，方便通过SMS系统打通，通知到对应人数据变更</li>\n<li>OpenAPI：暴露标准Rest风格HTTP接口，简单易用，方便多语言集成</li>\n<li>Console：易用控制台，做服务管理、配置管理等操作</li>\n<li>SDK：多语言sdk</li>\n<li>Agent：dns-f类似模式，或者与mesh等方案集成</li>\n<li>CLI：命令行对产品进行轻量化管理，像git一样好用</li>\n</ul>\n<h2>领域模型</h2>\n<h3>数据模型</h3>\n<p>Nacos 数据模型 Key 由三元组唯一确定, Namespace默认是空串，公共命名空间（public），分组默认是 DEFAULT_GROUP。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/338441/1561217857314-95ab332c-acfb-40b2-957a-aae26c2b5d71.jpeg\" alt=\"nacos_data_model\"></p>\n<h3>服务领域模型</h3>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/338441/1561217924697-ba504a35-129f-4fc6-b0df-1130b995375a.jpeg\" alt=\"nacos_naming_data_model\"></p>\n<h3>配置领域模型</h3>\n<p>围绕配置，主要有两个关联的实体，一个是配置变更历史，一个是服务标签（用于打标分类，方便索引），由 ID 关联。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/338441/1561217958896-4465757f-f588-4797-9c90-a76e604fabb4.jpeg\" alt=\"nacos_config_er\"></p>\n<h2>类视图</h2>\n<h3>Nacos-SDK 类视图</h3>\n<p>服务部分待续</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/338441/1561218077514-bfa98d03-88a1-43b9-b014-1491406e3db7.jpeg\" alt=\"nacos_sdk_class_relation\"></p>\n<h2>构建物、部署及启动模式</h2>\n<p><img src=\"https://cdn.yuque.com/lark/0/2018/png/15914/1531730742844-e8325932-258b-49b2-9473-8d1199efe20d.png\" alt=\"undefined\"></p>\n<h3>两种交付工件</h3>\n<p>Nacos 支持标准 Docker 镜像(TODO: 0.2版本开始支持）及 zip(tar.gz)压缩包的构建物。</p>\n<h3>两种启动模式</h3>\n<p>Nacos 支持将注册中心(Service Registry）与配置中心(Config Center) 在一个进程合并部署或者将2者分离部署的两种模式。</p>\n<h3>免费的公有云服务模式</h3>\n<p>除了您自己部署和启动 Nacos 服务之外，在云计算时代，Nacos 也支持公有云模式，在阿里云公有云的商业产品（如<a href=\"https://www.aliyun.com/product/acm\">ACM</a>, <a href=\"https://www.aliyun.com/product/edas\">EDAS</a>) 中会提供 Nacos 的免费的公有云服务。我们也欢迎和支持其他的公有云提供商提供 Nacos 的公有云服务。</p>\n",
  "link": "\\zh-cn\\docs\\architecture.html",
  "meta": {
    "title": "Nacos 架构",
    "keywords": "Nacos,架构",
    "description": "Nacos 架构"
  }
}