{
  "filename": "quick-start-spring.md",
  "__html": "<h1>Nacos Spring 快速开始</h1>\n<p>本文主要面向 Spring 的使用者，通过两个示例来介绍如何使用 Nacos 来实现分布式环境下的配置管理和服务发现。</p>\n<p>关于 Nacos Spring 的详细文档请参看：<a href=\"https://github.com/nacos-group/nacos-spring-project/wiki/Nacos-Spring-Project-0.3.1-%E6%96%B0%E5%8A%9F%E8%83%BD%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C\">nacos-spring-project</a>。</p>\n<ul>\n<li>通过 Nacos server 和 Nacos Spring 配置管理模块，实现配置的动态变更；</li>\n<li>通过 Nacos server 和 Nacos Spring 服务发现模块，实现服务的注册与发现。</li>\n</ul>\n<h2>前提条件</h2>\n<p>您需要先下载 Nacos 并启动 Nacos server。操作步骤参见 <a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">Nacos 快速入门</a>。</p>\n<h2>启动配置管理</h2>\n<p>启动了 Nacos server 后，您就可以参考以下示例代码，为您的 Spring 应用启动 Nacos 配置管理服务了。完整示例代码请参考：<a href=\"https://github.com/nacos-group/nacos-examples/tree/master/nacos-spring-example/nacos-spring-config-example\">nacos-spring-config-example</a></p>\n<ol>\n<li>添加依赖。</li>\n</ol>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;\n    &lt;artifactId&gt;nacos-spring-context&lt;/artifactId&gt;\n    &lt;version&gt;${latest.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>最新版本可以在 maven 仓库，如 &quot;<a href=\"https://mvnrepository.com/artifact/com.alibaba.nacos/nacos-spring-context\">mvnrepository.com</a>&quot; 中获取。</p>\n<ol start=\"2\">\n<li>添加 <code>@EnableNacosConfig</code> 注解启用 Nacos Spring 的配置管理服务。以下示例中，我们使用 <code>@NacosPropertySource</code> 加载了 <code>dataId</code> 为 <code>example</code> 的配置源，并开启自动更新：</li>\n</ol>\n<pre><code>@Configuration\n@EnableNacosConfig(globalProperties = @NacosProperties(serverAddr = &quot;127.0.0.1:8848&quot;))\n@NacosPropertySource(dataId = &quot;example&quot;, autoRefreshed = true)\npublic class NacosConfiguration {\n\n}\n</code></pre>\n<ol start=\"3\">\n<li>通过 Nacos 的 <code>@NacosValue</code> 注解设置属性值。</li>\n</ol>\n<pre><code>@Controller\n@RequestMapping(&quot;config&quot;)\npublic class ConfigController {\n\n    @NacosValue(value = &quot;${useLocalCache:false}&quot;, autoRefreshed = true)\n    private boolean useLocalCache;\n\n    @RequestMapping(value = &quot;/get&quot;, method = GET)\n    @ResponseBody\n    public boolean get() {\n        return useLocalCache;\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>\n<p>启动 Tomcat，调用 <code>curl http://localhost:8080/config/get</code>尝试获取配置信息。由于此时还未发布过配置，所以返回内容是 <code>false</code>。</p>\n</li>\n<li>\n<p>通过调用 <a href=\"https://nacos.io/zh-cn/docs/open-api.html\">Nacos Open API</a> 向 Nacos Server 发布配置：dataId 为<code>example</code>，内容为<code>useLocalCache=true</code></p>\n</li>\n</ol>\n<pre><code>curl -X POST &quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=example&amp;group=DEFAULT_GROUP&amp;content=useLocalCache=true&quot;\n</code></pre>\n<ol start=\"6\">\n<li>再次访问 <code>http://localhost:8080/config/get</code>，此时返回内容为<code>true</code>，说明程序中的<code>useLocalCache</code>值已经被动态更新了。</li>\n</ol>\n<h2>启动服务发现</h2>\n<p>本节演示如何在您的 Spring 项目中启动 Nacos 的服务发现功能。完整示例代码请参考：<a href=\"https://github.com/nacos-group/nacos-examples/tree/master/nacos-spring-example/nacos-spring-discovery-example\">nacos-spring-discovery-example</a></p>\n<ol>\n<li>添加依赖。</li>\n</ol>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;\n    &lt;artifactId&gt;nacos-spring-context&lt;/artifactId&gt;\n    &lt;version&gt;${latest.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>最新版本可以在 maven 仓库，如 &quot;<a href=\"https://mvnrepository.com/artifact/com.alibaba.nacos/nacos-spring-context\">mvnrepository.com</a>&quot; 中获取。</p>\n<ol start=\"2\">\n<li>通过添加 <code>@EnableNacosDiscovery</code> 注解开启 Nacos Spring 的服务发现功能：</li>\n</ol>\n<pre><code>@Configuration\n@EnableNacosDiscovery(globalProperties = @NacosProperties(serverAddr = &quot;127.0.0.1:8848&quot;))\npublic class NacosConfiguration {\n\n}\n</code></pre>\n<ol start=\"3\">\n<li>使用 <code>@NacosInjected</code> 注入  Nacos 的 <code>NamingService</code> 实例：</li>\n</ol>\n<pre><code>@Controller\n@RequestMapping(&quot;discovery&quot;)\npublic class DiscoveryController {\n\n    @NacosInjected\n    private NamingService namingService;\n\n    @RequestMapping(value = &quot;/get&quot;, method = GET)\n    @ResponseBody\n    public List&lt;Instance&gt; get(@RequestParam String serviceName) throws NacosException {\n        return namingService.getAllInstances(serviceName);\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>\n<p>启动 Tomcat，调用 <code>curl http://localhost:8080/discovery/get?serviceName=example</code>，此时返回为空 JSON 数组<code>[]</code>。</p>\n</li>\n<li>\n<p>通过调用 <a href=\"https://nacos.io/zh-cn/docs/open-api.html\">Nacos Open API</a> 向  Nacos server 注册一个名称为 <code>example</code> 服务。</p>\n</li>\n</ol>\n<pre><code>curl -X PUT 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=example&amp;ip=127.0.0.1&amp;port=8080'\n</code></pre>\n<ol start=\"6\">\n<li>再次访问 <code>curl http://localhost:8080/discovery/get?serviceName=example</code>，此时返回内容为：</li>\n</ol>\n<pre><code>[\n  {\n    &quot;instanceId&quot;: &quot;127.0.0.1#8080#DEFAULT#example&quot;,\n    &quot;ip&quot;: &quot;127.0.0.1&quot;,\n    &quot;port&quot;: 8080,\n    &quot;weight&quot;: 1.0,\n    &quot;healthy&quot;: true,\n    &quot;cluster&quot;: {\n      &quot;serviceName&quot;: null,\n      &quot;name&quot;: &quot;&quot;,\n      &quot;healthChecker&quot;: {\n        &quot;type&quot;: &quot;TCP&quot;\n      },\n      &quot;defaultPort&quot;: 80,\n      &quot;defaultCheckPort&quot;: 80,\n      &quot;useIPPort4Check&quot;: true,\n      &quot;metadata&quot;: {}\n    },\n    &quot;service&quot;: null,\n    &quot;metadata&quot;: {}\n  }\n]\n</code></pre>\n<h2>相关项目</h2>\n<ul>\n<li><a href=\"https://github.com/alibaba/nacos\">Nacos</a></li>\n<li><a href=\"https://github.com/nacos-group/nacos-spring-project\">Nacos Spring</a></li>\n<li><a href=\"https://github.com/nacos-group/nacos-spring-boot-project\">Nacos Spring Boot</a></li>\n<li><a href=\"https://github.com/alibaba/spring-cloud-alibaba\">Spring Cloud Alibaba</a></li>\n</ul>\n",
  "link": "/zh-cn/docs/quick-start-spring.html",
  "meta": {
    "title": "Nacos Spring 快速开始",
    "keywords": "Nacos,Spring,快速开始",
    "description": "本文主要面向 Spring 的使用者，通过两个示例来介绍如何使用 Nacos 来实现分布式环境下的配置管理和服务发现。"
  }
}