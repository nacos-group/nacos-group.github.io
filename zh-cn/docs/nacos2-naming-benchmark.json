{
  "filename": "nacos2-naming-benchmark.md",
  "__html": "<h1>Nacos2.0.0-ALPHA2 服务发现性能测试报告</h1>\n<h2>测试目的</h2>\n<p>Nacos2.0对连接模型，服务发现的数据模型也运作模式进行了大范围的重构，因此需要在相同或类似的场景下，了解Nacos2的服务发现性能负载和容量与Nacos1的区别，帮助用户更快的运用评估Nacos系统负荷。</p>\n<p>Nacos1.0性能测试参考 <a href=\"https://nacos.io/zh-cn/docs/nacos-naming-benchmark.html\">服务发现性能测试报告</a></p>\n<h2>测试工具</h2>\n<p>我们使用自研的PAS性能评估服务平台进行压测，其原理是基于利用JMeter引擎，使用PAS自动生成的JMeter脚本，进行智能压测。</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1xCfDDpzqK1RjSZFvXXcB7VXa-692-297.png\" alt=\"Pas图\"></p>\n<h2>测试环境</h2>\n<h3>1. 环境</h3>\n<table>\n<thead>\n<tr>\n<th><strong>指标</strong></th>\n<th><strong>参数</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>机器</td>\n<td>CPU 8核，内存16G</td>\n</tr>\n<tr>\n<td>集群规模</td>\n<td>3节点</td>\n</tr>\n<tr>\n<td>Nacos版本</td>\n<td>服务端：Nacos2.0.0-ALPHA2， 客户端：Nacos2.0.0-ALPHA2</td>\n</tr>\n</tbody>\n</table>\n<h3>2.设置启动参数</h3>\n<pre><code>${JAVA_HOME}/bin/java -DembeddedStorage=true -server -Xms10g -Xmx10g -Xmn4g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/admin/nacos/logs/java_heapdump.hprof -XX:-UseLargePages -Dnacos.member.list= -Djava.ext.dirs=${JAVA_HOME}/jre/lib/ext:${JAVA_HOME}/lib/ext -Xloggc:/home/admin/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/home/admin/nacos/plugins/health,/home/admin/nacos/plugins/cmdb -Dnacos.home=/home/admin/nacos -jar /home/admin/nacos/target/nacos-server.jar --spring.config.additional-location=file:/home/admin/nacos/conf/ --logging.config=/home/admin/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288 nacos.nacos\n</code></pre>\n<h2>测试场景</h2>\n<p>以下测试场景都是服务发现重要接口：</p>\n<ul>\n<li>验证Nacos服务发现注册实例的能力</li>\n<li>验证Nacos服务发现查询实例的能力</li>\n<li>验证Nacos服务发现注销实例的能力</li>\n</ul>\n<h2>测试数据</h2>\n<h3>1. 注册实例</h3>\n<p>施压机模拟100个客户端同时发起注册服务，每个客户端一条长连接，每个客户端注册1W个服务。总数100W个服务及实例。</p>\n<p>注册完成之后每个客户端继续不停进行注册请求，模拟重复注册请求（会进行更新替换），同时记录下整个过程中的相关数据。</p>\n<h4>相关API</h4>\n<p><code>NamingService.registerInstance(String serviceName, Instance instance)</code></p>\n<h4>结果数据如下</h4>\n<table>\n<thead>\n<tr>\n<th>施压机数量</th>\n<th>每台线程数</th>\n<th>平均TPS</th>\n<th>平均RT</th>\n<th>最小RT</th>\n<th>最大RT</th>\n<th>80%RT(ms)</th>\n<th>95%RT(ms)</th>\n<th>99%RT(ms)</th>\n<th>CPU使用率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>100</td>\n<td>7256.32</td>\n<td>13.14</td>\n<td>0.39</td>\n<td>2522.25</td>\n<td>6.72</td>\n<td>12.86</td>\n<td>126.33</td>\n<td>80%</td>\n</tr>\n<tr>\n<td>2</td>\n<td>50</td>\n<td>16418.04</td>\n<td>5.8</td>\n<td>0.41</td>\n<td>3906.77</td>\n<td>4.0</td>\n<td>8.88</td>\n<td>48.84</td>\n<td>90%</td>\n</tr>\n<tr>\n<td>5</td>\n<td>20</td>\n<td>26784.84</td>\n<td>3.6</td>\n<td>0.38</td>\n<td>1606.41</td>\n<td>3.82</td>\n<td>8.91</td>\n<td>30.62</td>\n<td>90%</td>\n</tr>\n</tbody>\n</table>\n<h4>结果分析</h4>\n<p>相较Nacos1.X版本，注册性能总体提升至少2倍，在服务端机能减半的情况下，服务实例数基本一致的情况下，TPS仍能做到2倍左右的提高。</p>\n<h3>2. 查询实例</h3>\n<p>施压机先模拟发起注册服务，总数10W个服务，每个服务10个实例，总数100W实例。</p>\n<p>注册完成后，模拟100个客户端同时不停进行随机服务查询请求，并且有实例长度校验。同时记录下整个过程中的相关数据。</p>\n<h4>相关API</h4>\n<p><code>NacosNamingService.getAllInstances(String serviceName, boolean subscribe)</code></p>\n<p><strong>注意</strong> subscribe 为 false 进行测试，否则将会优先查询客户端缓存。</p>\n<h4>结果数据如下</h4>\n<table>\n<thead>\n<tr>\n<th>施压机数量</th>\n<th>每台线程数</th>\n<th>平均TPS</th>\n<th>平均RT</th>\n<th>最小RT</th>\n<th>最大RT</th>\n<th>80%RT(ms)</th>\n<th>95%RT(ms)</th>\n<th>99%RT(ms)</th>\n<th>CPU使用率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>100</td>\n<td>12998.46</td>\n<td>7.54</td>\n<td>0.55</td>\n<td>213.86</td>\n<td>9.68</td>\n<td>10.69</td>\n<td>27.92</td>\n<td>40%</td>\n</tr>\n<tr>\n<td>2</td>\n<td>50</td>\n<td>12785.01</td>\n<td>7.93</td>\n<td>0.38</td>\n<td>900.48</td>\n<td>8.34</td>\n<td>14.18</td>\n<td>33.04</td>\n<td>40%</td>\n</tr>\n<tr>\n<td>2</td>\n<td>100</td>\n<td>18451.78</td>\n<td>10.63</td>\n<td>0.6</td>\n<td>829.42</td>\n<td>11.95</td>\n<td>23.79</td>\n<td>44.19</td>\n<td>45%</td>\n</tr>\n<tr>\n<td>5</td>\n<td>20</td>\n<td>30680.48</td>\n<td>3.12</td>\n<td>0.46</td>\n<td>1138.38</td>\n<td>4.33</td>\n<td>5.9</td>\n<td>9.57</td>\n<td>50%</td>\n</tr>\n</tbody>\n</table>\n<h4>结果分析</h4>\n<p>相较Nacos1.X版本，查询性能总体提升至少3倍，在服务端机能减半的情况下，服务实例数基本一致的情况下，TPS仍能做到3倍左右的提高，单机多线程场景甚至有10倍的提升。</p>\n<h3>3. 注销实例</h3>\n<p>施压机先模拟100个客户端同时发起注册服务，每个客户端一条长连接，每个客户端注册1W个服务。总数100W个服务及实例。</p>\n<p>注册完成后，模拟使用相同100个客户端同时不停进行随机服务注销请求，同时记录下整个过程中的相关数据。</p>\n<h4>相关API</h4>\n<p><code>NacosNamingService.deregisterInstance(String serviceName, String ip, int port)</code></p>\n<h4>结果数据如下</h4>\n<table>\n<thead>\n<tr>\n<th>施压机数量</th>\n<th>每台线程数</th>\n<th>平均TPS</th>\n<th>平均RT</th>\n<th>最小RT</th>\n<th>最大RT</th>\n<th>80%RT(ms)</th>\n<th>95%RT(ms)</th>\n<th>99%RT(ms)</th>\n<th>CPU使用率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>100</td>\n<td>9614.96</td>\n<td>9.88</td>\n<td>0.41</td>\n<td>1115.27</td>\n<td>8.85</td>\n<td>15.32</td>\n<td>104.76</td>\n<td>70%</td>\n</tr>\n<tr>\n<td>2</td>\n<td>50</td>\n<td>22252.07</td>\n<td>4.28</td>\n<td>0.39</td>\n<td>856.1</td>\n<td>4.03</td>\n<td>5.65</td>\n<td>31.02</td>\n<td>90% -&gt; 60%</td>\n</tr>\n<tr>\n<td>5</td>\n<td>20</td>\n<td>29393.8</td>\n<td>2.55</td>\n<td>0.42</td>\n<td>741.09</td>\n<td>2.67</td>\n<td>8.91</td>\n<td>15.85</td>\n<td>90% -&gt; 60%</td>\n</tr>\n</tbody>\n</table>\n<h4>结果分析</h4>\n<p>相较Nacos1.X版本，注销性能总体提升至少2倍，在服务端机能减半的情况下，服务实例数基本一致的情况下，TPS仍能做到2倍左右的提高。\n关于CPU由90% 降低为 60%的场景， 是由于随着注销的的服务和实例增多，重复注销的操作变得频繁，未命中服务和实例的操作会被快速返回且操作量小，因此CPU下降、TPS相对注册略高。</p>\n<h2>测试结论</h2>\n<p>Nacos2服务发现性能测试都是针对重点功能，通过对3节点规模集群进行压测，可以看到接口性能负载和容量，以及对比相同/类似场景下Nacos1.X版本的提升。</p>\n<ol>\n<li>压测时服务及实例容量达到百万级，集群运行持续稳定，达到预期；（该场景没有计算频繁变更导致的频繁推送内容，仅单纯计算容量上线，附带推送的真实场景将在下轮压测报告中给出）</li>\n<li>注册/注销实例TPS达到 26000 以上，总体较Nacos1.X提升至少2倍，接口达到预期；</li>\n<li>查询实例TPS能够达到 30000 以上，总体较Nacos1.X提升3倍左右，接口达到预期；</li>\n</ol>\n<p><strong>注意</strong></p>\n<ul>\n<li>本次只测试临时实例注册/查询/注销，未涉及持久实例；</li>\n<li>本测试为对比Nacos1.X版本的测试场景，仅测试单核心接口的能力值，<strong>真实模拟场景压测</strong> 将在后续版本给出；</li>\n<li>本测试供给大家作为参考，如有不足或偏差，请指正! 如果对性能有其他需求，可以给我们提issue。</li>\n</ul>\n",
  "link": "/zh-cn/docs/nacos2-naming-benchmark.html",
  "meta": {
    "title": "Nacos2.0服务发现性能测试报告",
    "keywords": "Nacos,服务,发现,性能",
    "description": "Nacos2.0服务发现性能测试报告"
  }
}