{
  "filename": "quick-start-spring-cloud.md",
  "__html": "<h1>Nacos Spring Cloud 快速开始</h1>\n<p>本文主要面向 <a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a> 的使用者，通过两个示例来介绍如何使用 Nacos 来实现分布式环境下的配置管理和服务注册发现。</p>\n<p>关于 Nacos Spring Cloud 的详细文档请参看：<a href=\"https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Nacos-config\">Nacos Config</a> 和 <a href=\"https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Nacos-discovery\">Nacos Discovery</a>。</p>\n<ul>\n<li>通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config 实现配置的动态变更。</li>\n<li>通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-discovery 实现服务的注册与发现。</li>\n</ul>\n<h2>前提条件</h2>\n<p>您需要先下载 Nacos 并启动 Nacos server。操作步骤参见 <a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">Nacos 快速入门</a></p>\n<h2>启动配置管理</h2>\n<p>启动了 Nacos server 后，您就可以参考以下示例代码，为您的 Spring Cloud 应用启动 Nacos 配置管理服务了。完整示例代码请参考：<a href=\"https://github.com/nacos-group/nacos-examples/tree/master/nacos-spring-cloud-example/nacos-spring-cloud-config-example\">nacos-spring-cloud-config-example</a></p>\n<ol>\n<li>添加依赖：</li>\n</ol>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;\n    &lt;version&gt;${latest.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p><strong>注意</strong>：版本 <a href=\"https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-alibaba-nacos-config\">2.1.x.RELEASE</a> 对应的是 Spring Boot 2.1.x 版本。版本 <a href=\"https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-alibaba-nacos-config\">2.0.x.RELEASE</a> 对应的是 Spring Boot 2.0.x 版本，版本 <a href=\"https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-alibaba-nacos-config\">1.5.x.RELEASE</a> 对应的是 Spring Boot 1.5.x 版本。</p>\n<p>更多版本对应关系参考：<a href=\"https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E\">版本说明 Wiki</a></p>\n<ol start=\"2\">\n<li>在 <code>bootstrap.properties</code> 中配置 Nacos server 的地址和应用名</li>\n</ol>\n<pre><code>spring.cloud.nacos.config.server-addr=127.0.0.1:8848\n\nspring.application.name=example\n</code></pre>\n<p>说明：之所以需要配置 <code>spring.application.name</code> ，是因为它是构成 Nacos 配置管理 <code>dataId</code>字段的一部分。</p>\n<p>在 Nacos Spring Cloud 中，<code>dataId</code> 的完整格式如下：</p>\n<pre><code class=\"language-plain\">${prefix}-${spring.profiles.active}.${file-extension}\n</code></pre>\n<ul>\n<li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</li>\n<li><code>spring.profiles.active</code> 即为当前环境对应的 profile，详情可以参考 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles\">Spring Boot文档</a>。\n<strong>注意：当 <code>spring.profiles.active</code> 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式变成 <code>${prefix}.${file-extension}</code></strong></li>\n<li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</li>\n</ul>\n<ol start=\"4\">\n<li>通过 Spring Cloud 原生注解 <code>@RefreshScope</code> 实现配置自动更新：</li>\n</ol>\n<pre><code>@RestController\n@RequestMapping(&quot;/config&quot;)\n@RefreshScope\npublic class ConfigController {\n\n    @Value(&quot;${useLocalCache:false}&quot;)\n    private boolean useLocalCache;\n\n    @RequestMapping(&quot;/get&quot;)\n    public boolean get() {\n        return useLocalCache;\n    }\n}\n</code></pre>\n<ol start=\"5\">\n<li>首先通过调用 <a href=\"https://nacos.io/zh-cn/docs/open-api.html\">Nacos Open API</a> 向 Nacos Server 发布配置：dataId 为<code>example.properties</code>，内容为<code>useLocalCache=true</code></li>\n</ol>\n<pre><code>curl -X POST &quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=example.properties&amp;group=DEFAULT_GROUP&amp;content=useLocalCache=true&quot;\n</code></pre>\n<ol start=\"6\">\n<li>\n<p>运行 <code>NacosConfigApplication</code>，调用 <code>curl http://localhost:8080/config/get</code>，返回内容是 <code>true</code>。</p>\n</li>\n<li>\n<p>再次调用 <a href=\"https://nacos.io/zh-cn/docs/open-api.html\">Nacos Open API</a> 向 Nacos server 发布配置：dataId 为<code>example.properties</code>，内容为<code>useLocalCache=false</code></p>\n</li>\n</ol>\n<pre><code>curl -X POST &quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=example.properties&amp;group=DEFAULT_GROUP&amp;content=useLocalCache=false&quot;\n</code></pre>\n<ol start=\"8\">\n<li>再次访问 <code>http://localhost:8080/config/get</code>，此时返回内容为<code>false</code>，说明程序中的<code>useLocalCache</code>值已经被动态更新了。</li>\n</ol>\n<h2>启动服务发现</h2>\n<p>本节通过实现一个简单的 <code>echo service</code> 演示如何在您的 Spring Cloud 项目中启用 Nacos 的服务发现功能，如下图示:</p>\n<p><img src=\"https://cdn.nlark.com/lark/0/2018/png/15914/1542119181336-b6dc0fc1-ed46-43a7-9e5f-68c9ca344d60.png\" alt=\"echo service\"></p>\n<p>完整示例代码请参考：<a href=\"https://github.com/nacos-group/nacos-examples/tree/master/nacos-spring-cloud-example/nacos-spring-cloud-discovery-example\">nacos-spring-cloud-discovery-example</a></p>\n<ol>\n<li>添加依赖：</li>\n</ol>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;\n    &lt;version&gt;${latest.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p><strong>注意</strong>：版本 <a href=\"https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-alibaba-nacos-discovery\">2.1.x.RELEASE</a> 对应的是 Spring Boot 2.1.x 版本。版本 <a href=\"https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-alibaba-nacos-discovery\">2.0.x.RELEASE</a> 对应的是 Spring Boot 2.0.x 版本，版本 <a href=\"https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-alibaba-nacos-discovery\">1.5.x.RELEASE</a> 对应的是 Spring Boot 1.5.x 版本。</p>\n<p>更多版本对应关系参考：<a href=\"https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E\">版本说明 Wiki</a></p>\n<ol start=\"2\">\n<li>配置服务提供者，从而服务提供者可以通过 Nacos 的服务注册发现功能将其服务注册到 Nacos server 上。</li>\n</ol>\n<p>i. 在 <code>application.properties</code> 中配置 Nacos server 的地址：</p>\n<pre><code>server.port=8070\nspring.application.name=service-provider\n\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\n</code></pre>\n<p>ii. 通过 Spring Cloud 原生注解 <code>@EnableDiscoveryClient</code> 开启服务注册发现功能：</p>\n<pre><code>@SpringBootApplication\n@EnableDiscoveryClient\npublic class NacosProviderApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(NacosProviderApplication.class, args);\n\t}\n\n\t@RestController\n\tclass EchoController {\n\t\t@RequestMapping(value = &quot;/echo/{string}&quot;, method = RequestMethod.GET)\n\t\tpublic String echo(@PathVariable String string) {\n\t\t\treturn &quot;Hello Nacos Discovery &quot; + string;\n\t\t}\n\t}\n}\n</code></pre>\n<ol start=\"3\">\n<li>配置服务消费者，从而服务消费者可以通过 Nacos 的服务注册发现功能从 Nacos server 上获取到它要调用的服务。</li>\n</ol>\n<p>i. 在 <code>application.properties</code> 中配置 Nacos server 的地址：</p>\n<pre><code>server.port=8080\nspring.application.name=service-consumer\n\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\n</code></pre>\n<p>ii. 通过 Spring Cloud 原生注解 <code>@EnableDiscoveryClient</code>  开启服务注册发现功能。给 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-resttemplate.html\">RestTemplate</a> 实例添加  <code>@LoadBalanced</code> 注解，开启 <code>@LoadBalanced</code> 与 <a href=\"https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html\">Ribbon</a> 的集成：</p>\n<pre><code>@SpringBootApplication\n@EnableDiscoveryClient\npublic class NacosConsumerApplication {\n\n    @LoadBalanced\n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(NacosConsumerApplication.class, args);\n    }\n\n    @RestController\n    public class TestController {\n\n        private final RestTemplate restTemplate;\n\n        @Autowired\n        public TestController(RestTemplate restTemplate) {this.restTemplate = restTemplate;}\n\n        @RequestMapping(value = &quot;/echo/{str}&quot;, method = RequestMethod.GET)\n        public String echo(@PathVariable String str) {\n            return restTemplate.getForObject(&quot;http://service-provider/echo/&quot; + str, String.class);\n        }\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>启动 <code>ProviderApplication</code> 和 <code>ConsumerApplication</code> ，调用 <code>http://localhost:8080/echo/2018</code>，返回内容为 <code>Hello Nacos Discovery 2018</code>。</li>\n</ol>\n<h2>相关项目</h2>\n<ul>\n<li><a href=\"https://github.com/alibaba/nacos\">Nacos</a></li>\n<li><a href=\"https://github.com/nacos-group/nacos-spring-project\">Nacos Spring</a></li>\n<li><a href=\"https://github.com/nacos-group/nacos-spring-boot-project\">Nacos Spring Boot</a></li>\n<li><a href=\"https://github.com/alibaba/spring-cloud-alibaba\">Spring Cloud Alibaba</a></li>\n</ul>\n",
  "link": "/zh-cn/docs/quick-start-spring-cloud.html",
  "meta": {
    "title": "Nacos Spring Cloud 快速开始",
    "keywords": "Nacos,Spring Cloud",
    "description": "Nacos Spring Cloud 快速开始"
  }
}