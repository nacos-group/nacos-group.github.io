{
  "filename": "nacos-confd.md",
  "__html": "<p>为什么要支持confd，老的应用配置管理模式是启动时读取配置文件，然后重新读取配置文件需要应用重启。一般的配置管理系统都是代码侵入性的，应用接入配置管理系统都需要使用对应的SDK来查询和监听数据的变更。对于一些已经成熟的系统来说，接入SDK来实现动态配置管理是很难实现的，Nacos通过引入配置管理工具confd可以实现系统的配置变更做到无代码侵入性。</p>\n<p>confd是一个轻量级的配置管理工具，可以通过查询后端存储系统来实现第三方系统的动态配置管理，如Nginx、Tomcat、HAproxy、Docker配置等。confd目前支持的后端有etcd、ZooKeeper等，Nacos\n1.1版本通过对confd定制支持Nacos作为后端存储。</p>\n<p>confd能够查询和监听后端系统的数据变更，结合配置模版引擎动态更新本地配置文件，保持和后端系统的数据一致，并且能够执行命令或者脚本实现系统的reload或者重启。</p>\n<h2>安装confd插件</h2>\n<p>confd的安装可以通过源码安装方式，confd基于Go语言编写，其编译安装依赖Go，首先需要确保本地安装了Go，版本不低于v1.10\n创建confd目录，下载confd源码，编译生成可执行文件</p>\n<pre><code>mkdir -p $GOPATH/src/github.com/kelseyhightower\ncd $GOPATH/src/github.com/kelseyhightower\nwget https://github.com/nacos-group/nacos-confd/archive/v0.19.1.tar.gz\ntar -xvf v0.19.1.tar.gz\nmv nacos-confd-0.19.1 confd\ncd confd\nmake\n</code></pre>\n<p>复制confd文件到bin目录下，启动confd</p>\n<pre><code>sudo cp bin/confd /usr/local/bin\nconfd\n</code></pre>\n<h2>confd结合Nacos实现nginx配置管理示例</h2>\n<p>本文介绍使用Nacos结合confd实现Nginx配置管理，为简单起见以Nginx的黑名单功能为演示示例，Nacos使用官网部署的服务，<a href=\"http://xn--console-e73k064bojj.nacos.io\">域名为console.nacos.io</a>。Nginx的安装可以参考网上文章</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1X_KhdUz1gK0jSZLeXXb9kVXa-720-405.jpg\" alt=\"image\"></p>\n<ul>\n<li>1.创建confd所需目录</li>\n</ul>\n<p>confd配置文件默认在/etc/confd中，可以通过参数-confdir指定。目录中包含两个子目录，分别是：conf.d templates</p>\n<pre><code>mkdir -p /etc/confd/{conf.d,templates}\n</code></pre>\n<ul>\n<li>2.创建confd配置文件</li>\n</ul>\n<p>confd会先读取conf.d目录中的配置文件(toml格式)，然后根据文件指定的模板路径去渲染模板。</p>\n<pre><code>vim /etc/confd/conf.d/nginx.toml\n</code></pre>\n<p>内容为如下，其中nginx.conf.tmpl文件为confd的模版文件，keys为模版渲染成配置文件所需的配置内容，/usr/local/nginx/conf/nginx.conf为生成的配置文件</p>\n<pre><code>[template]\nsrc = &quot; nginx.conf.tmpl&quot;\ndest =\n&quot;/usr/local/nginx/conf/nginx.conf&quot;\nkeys = [\n&quot;/nginx/conf&quot;,\n]\ncheck_cmd = &quot;/usr/local/nginx/sbin/nginx -t\n-c {{.src}}&quot;\nreload_cmd = &quot;/usr/local/nginx/sbin/nginx\n-s reload&quot;\n</code></pre>\n<ul>\n<li>3.创建模版文件</li>\n</ul>\n<p>拷贝Nginx原始的配置，增加对应的渲染内容</p>\n<pre><code>cp /usr/local/nginx/conf/nginx.conf\n/etc/confd/templates/nginx.conf.tmpl\nvim /etc/confd/templates/nginx.conf.tmpl\n</code></pre>\n<p>增加内容为:</p>\n<pre><code>···\n{{$data := json (getv &quot;/nginx/conf&quot;)}}\n{{range $data.blackList}}\ndeny {{.}};\n{{end}}\n···\n</code></pre>\n<ul>\n<li>4.在Nacos上创建所需的配置文件</li>\n</ul>\n<p>在public命名空间创建dataId为nginx.conf的配置文件，group使用默认的DEFAULT_GROUP即可，配置内容为json格式</p>\n<pre><code>{\n&quot;blackList&quot;:[&quot;10.0.1.104&quot;,&quot;10.0.1.103&quot;]\n}\n</code></pre>\n<p><img src=\"https://img.alicdn.com/tfs/TB1PSKwdKP2gK0jSZFoXXauIVXa-1986-1024.png\" alt=\"image\"></p>\n<ul>\n<li>5.启动confd</li>\n</ul>\n<p>启动confd，从Nacos获取配置文件，渲染Nginx配置文件。backend设置成nacos，node指定访问的Nacos服务地址，watch让confd支持动态监听</p>\n<pre><code>confd -backend nacos -node http://console.nacos.io:80 -watch\n</code></pre>\n<ul>\n<li>6.查看Nginx配置文件，验证Nginx启动</li>\n</ul>\n<p>查看生成的/usr/local/nginx/conf/nginx.conf配置文件是否存在如下内容</p>\n<pre><code>...\ndeny 10.0.1.104;\n\ndeny 10.0.1.103;\n...\n</code></pre>\n<p>curl命令访问Nginx，验证是否返回正常。http响应状态码为200说明访问Nginx正常</p>\n<pre><code>curl http://$IP:8080/ -i\nHTTP/1.1 200 OK\n...\n</code></pre>\n<ul>\n<li>7.查看本机Ip，加到Nacos配置文件黑名单中</li>\n</ul>\n<p>假设本机的Ip为30.5.125.107，将本机的Ip加入到Nginx黑名单</p>\n<pre><code>{\n&quot;blackList&quot;:[&quot;10.0.1.104&quot;,&quot;10.0.1.103&quot;,&quot;30.5.125.107&quot;]\n}\n</code></pre>\n<ul>\n<li>8.查看Nginx配置文件，验证黑名单是否生效</li>\n</ul>\n<p>查看生成的/usr/local/nginx/conf/nginx.conf配置文件是否存在如下内容</p>\n<pre><code>...\ndeny 10.0.1.104;\n\ndeny 10.0.1.103;\n\ndeny 30.5.125.107;\n...\n</code></pre>\n<p>curl命令访问Nginx，访问应该被拒绝，返回403</p>\n<pre><code>curl http://$IP:8080/ -i\nHTTP/1.1 403 Forbidden\n...\n</code></pre>\n<h2>总结</h2>\n<p>本文介绍了使用Nacos结合confd来做自动化管理，confd作为轻量级的配置管理工具可以做到对第三方系统无代码侵入性。本文只是简单使用Nginx的黑名单功能来演示Nacos+confd的使用方式，当然Nginx还具有限流、反向代理等功能以及其他的系统比如Naproxy、Tomcat、Docker等也同样可以使用Nacos+confd做管理，大家可以到Nacos<a href=\"https://nacos.io\">官网</a>贡献相应的demo或者方案。</p>\n",
  "link": "/zh-cn/blog/nacos-confd.html",
  "meta": {}
}