{
  "filename": "springboot-0.2.10.md",
  "__html": "<h1>Nacos-spring-boot0.2.10发布，全面支持Nacos2.0</h1>\n<p><a name=\"0YIG0\"></a></p>\n<p>随着Nacos2.0成熟稳定，Nacos-spring-boot发布0.1.10、0.2.10两个核心版本，全面支持了Nacos2.0，同时支持自动识别配置类型注入能力，修复了高并发场景下数据一致性问题。</p>\n<pre><code class=\"language-java\">&lt;dependency&gt;\n  &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;nacos-config-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;0.2.10&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>Nacos-spring-boot老用户，将相关maven依赖进行如下替换，即可快速升级。</p>\n<p>本文将系统介绍新版本增强能力，并且以一次生产环境的配置管理项目构建过程为例，详细描述新版本Nacos Spring Boot0.2.10版本的部署，帮助Spring Boot老用户快速上岸Nacos2.0，感受长连接带来的10倍性能提升。</p>\n<h2>Nacos-spring-boot新版本特性</h2>\n<p>新发布的0.1.10版本和0.2.10版本主要feature增强包括以下几个部分：</p>\n<h3>全面兼容Nacos2体系，向长连接时代演进</h3>\n<p>Nacos1体系中，配置中心的订阅、实时推送功能主要通过长轮训进行。尽管长轮训是HTTP短连接体系中被采用较多的动态刷新解决方案，但也不可避免地存在时延过高等缺陷；在生产实践中暴露了一定问题，如下面这两个链接所示</p>\n<p><a href=\"https://github.com/alibaba/nacos/issues/6345\">https://github.com/alibaba/nacos/issues/6345</a></p>\n<p><a href=\"https://github.com/alibaba/nacos/issues/2674\">https://github.com/alibaba/nacos/issues/2674</a></p>\n<p>Nacos2体系将整个配置中心的订阅、推送功能重构成为了基于gRPC的长连接方案，保证了配置刷新实时推送；迄今为止，已经历了大量的生产环境考验。</p>\n<h3>自动识别配置的文件类型</h3>\n<p>在使用Nacos-spring-boot新版本之后，即使用户对配置类型未设置的情况下，nacos-spring-boot也会自动识别该配置的文件类型(json/yaml/properties)并给定默认值。</p>\n<p>该机制极大降低了因为文件类型不匹配，业务侧出现配置处理错误的风险。下图为新版本Nacos-spring-boot项目在一次配置文件刷新过程中的工作机制。</p>\n<p><img src=\"/img/blog/springboot1.png\" alt=\"springboot1.png\"></p>\n<h3>@NacosValue注解全面支持Spel表达式</h3>\n<p>Spel表达式全称为“Spring Expression Language”，是Spring自带的一种动态字符串构建方式表达式）。用户可以方便地使用Spel表达式来定义NacosValue，与Spring功能完美整合，减少SpringBoot用户们的工作量。\n<a name=\"1Gmg9\"></a></p>\n<pre><code>    @NacosValue(value = &quot;${app.name}&quot;, autoRefreshed = true)\n    private String nacosNameAutoRefreshed;\n\n    @NacosValue(value = &quot;${app.name:Nacos}&quot;, autoRefreshed = true)\n    private String nacosNameAutoRefreshedWithDefaultValue;\n\n    @NacosValue(&quot;${app.name}&quot;)\n    private String nacosNameNotAutoRefreshed;\n\n    @NacosValue(&quot;${app.nacosFieldIntValue:&quot; + VALUE_1 + &quot;}&quot;)\n    private int nacosFieldIntValue;\n\n    @NacosValue(value = &quot;${app.nacosFieldIntValueAutoRefreshed}&quot;, autoRefreshed = true)\n    private int nacosFieldIntValueAutoRefreshed;\n</code></pre>\n<h3>修复了高并发场景下的一致性问题</h3>\n<p>一些用户在使用Nacos-spring-boot项目进行大规模压测的过程中，出现了一些配置读取错误：在大流量频繁修改某些dataId的配置的过程中，客户端可能会拉取到旧版本的配置数据，导致客户端配置数据反复。\nNacos-spring-boot新版本通过增加智能锁、升级Nacos-spring依赖等方式，对于潜在的线程安全风险进行了修复。</p>\n<h2>生产演示</h2>\n<p>在Nacos服务端，为了方便Nacos部署升级和尽可能保证配置信息的信息安全，我们是从<a href=\"https://cn.aliyun.com/product/aliware/mse?spm=nacos-website.topbar.0.0.0\">阿里云微服务引擎MSE</a> 中购买的一个2核CPU+4G内存的三节点Nacos集群。</p>\n<p><img src=\"/img/blog/springboot2.png\" alt=\"springboot2\"></p>\n<p>在Nacos客户端，在Springboot老用户可以通过下面方式升级到Nacos-spring-boot新版本。</p>\n<h3>在 Maven 项目的 pom.xml 文件中增加（或升级）以下依赖来获取 Starter</h3>\n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;\n  \t&lt;artifactId&gt;nacos-config-spring-boot-starter&lt;/artifactId&gt;\n  \t&lt;version&gt;0.2.10&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>注： 使用时请根据自定义构建的Spring Boot版本选择相应的nacos-config-spring-boot-starter版本：nacos-config-spring-boot-starter 版本 0.2.10 对应 Spring Boot 2.x 版本，版本 0.1.10 对应 Spring Boot 1.x 版本。</p>\n<h3>在 application.properties 文件中配置连接信息</h3>\n<p>nacos.config.server-addr={nacos_server_address}:8848\n注：{nacos_server_address}为占位符，表示Nacos server的地址，可直接填入上文中购买的Nacos集群的公网或内网地址。</p>\n<h3>使用 @NacosPropertySource 加载 dataId 为 example 的配置源，并开启自动更新</h3>\n<pre><code>@SpringBootApplication\n@NacosPropertySource(dataId = &quot;com.alibaba.nacos.example.properties&quot;, autoRefreshed = true)\npublic class NacosConfigApplication {\n     public static void main(String[] args) {\n         SpringApplication.run(NacosConfigApplication.class, args);\n     } \n}\n</code></pre>\n<h3>使用 @NacosValue 注解设置属性值。</h3>\n<pre><code>@Controller \n@RequestMapping(&quot;config&quot;) \npublic class ConfigController { \n    @NacosValue(value = &quot;${connectTimeoutInMills:5000}&quot;, autoRefreshed = true) \n    private int connectTimeoutInMills;  \n    @RequestMapping(value = &quot;/get&quot;, method = GET) \n    @ResponseBody \n    public int get() { \n        return connectTimeoutInMills;\n    } \n}\n</code></pre>\n<h2>结果验证</h2>\n<p>在本地启动客户端项目，并运行以下命令：</p>\n<p><code>curl localhost:8080/config/get</code></p>\n<p>若返回以下信息，则说明 SDK 可正常使用。</p>\n<p><code>3000</code></p>\n<p>在MSE控制台将示例配置 com.alibaba.nacos.example.properties 更改为以下内容并发布。</p>\n<p><code>connectTimeoutInMills=6000</code></p>\n<p>若Console打印出更新的配置内容 ，则说明SDK的配置自动更新功能正常；工程正式跨入高性能配置中心时代。</p>\n",
  "link": "/zh-cn/blog/springboot-0.2.10.html",
  "meta": {
    "title": "Nacos-spring-boot0.2.10发布，全面支持Nacos2.0",
    "keywords": "Nacos-spring-boot0.2.10,Nacos2.0",
    "description": "Nacos-spring-boot0.2.10发布，全面支持Nacos2.0"
  }
}