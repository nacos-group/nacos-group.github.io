{
  "filename": "huya-practice.md",
  "__html": "<h1>虎牙直播在微服务改造方面的实践和总结</h1>\n<p><img src=\"https://img.alicdn.com/tfs/TB1i4ugBjDpK1RjSZFrXXa78VXa-1522-584.png\" alt=\"_2019_02_14_5_33_45\"></p>\n<p>相比文字和图片，直播提供了人与人之间更丰富的沟通形式，其对平台稳定性的考验很大，那么倡导“<em><strong>以技术驱动娱乐</strong></em>”的虎牙直播（以下简称“虎牙”）是如何在技术上赋能娱乐，本文将为您介绍虎牙在DNS、服务注册、CMDB和服务配置中心等方面的实践。</p>\n<p>文章整理自虎牙基础保障部中间件团队负责人张波（社区ID：zhangjimmy）在Dubbo Meetup 广州站沙龙上的分享，阿里巴巴中间件授权发布，分享议题如下：</p>\n<ul>\n<li>为什么选用Nacos</li>\n<li>DNS-F的技术价值和应用场景</li>\n<li>服务注册的实践</li>\n<li>CMDB的应用和实践</li>\n<li>服务配置的实践</li>\n</ul>\n<p>##为什么选用 Nacos</p>\n<p>虎牙关注 Nacos 是从v0.2 开始的（<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;mid=2247485479&amp;idx=1&amp;sn=bea1d2fc47f7002594bc0762938d4539&amp;chksm=fdeb3a47ca9cb351483b865b1e1e435166efead2c5cc7993bb7bed9549afb8aa4d6d81f7c9cd&amp;token=1795393417&amp;lang=zh_CN#rd\">最新版本：Pre-GA v0.8</a>），我们也参与了社区的建设，可以说是比较早期的企业用户。</p>\n<p>Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台，提供「注册中心」、「配置中心」和「动态DNS服务」三大功能。</p>\n<p>首先，在虎牙的微服务场景中，起初有多个注册中心，每一个注册中心服务于某一部分微服务，缺少一个能融合多个注册中心，并把他们逐一打通，然后实现一个能管理整个微服务体系的大的注册中心。</p>\n<p>以下内容摘自我们考虑引入Nacos时，在服务注册中心方案上的选型对比：</p>\n<p><img src=\"https://yqfile.alicdn.com/3ef377be6df69b7c528536095a74297be909de09.jpeg\" alt=\"0001\"></p>\n<p>Nacos提供 DNS-F功能， 可以与K8S、Spring Cloud和Dubbo等多个开源产品进行集成，实现服务的注册功能。</p>\n<p>其次，在服务配置中心方案的选型过程中，我们希望配置中心和注册中心能够打通，这样可以省去我们在微服务治理方面的一些投入。因此，我们也同步比较了一些服务配置中心的开源方案：</p>\n<p><img src=\"https://yqfile.alicdn.com/61d46c7b6ae7acb1bcc6eb94be0066537b45a9b7.jpeg\" alt=\"0002\"></p>\n<p>例如Spring Cloud Config Server、Zookeeper和ETCD，总体评估下来，基于我们微服务体系现状以及业务场景，我们决定使用Nacos作为我们的服务注册和服务发现的方案。使用过程中，我们发现，随着社区版本的不断更新和虎牙的深入实践，Nacos的优势远比我们调研过程中发现的更多，接下来，我将围绕DNS-F、Nacos-Sync、 CMDB和负载均衡4方面来分享虎牙的实践。</p>\n<p>##DNS - F 的技术价值</p>\n<p><img src=\"https://yqfile.alicdn.com/25198113a9e8bebfd3763def3dccf089bfa943c4.jpeg\" alt=\"0003\"></p>\n<p>**Nacos 提供的DNS-F功能的第一个技术价值在于，弥补了我们内部微服务没有一个全局动态调度能力的空白。**刚才提到，虎牙有多个微服务体系，但并没有一个微服务具备全局动态调度的能力，因为它们各自都是独立的。目前，我们通过Nacos已经融合了四个微服务体系的注册中心，最终目标是把所有的微服务都融合在一起，实现全局动态调动的能力。</p>\n<p><strong>第二，DNS-F解决了服务端端到端面临的挑战，即延时大、解析不准、故障牵引慢的问题。</strong></p>\n<p>如何去理解呢？</p>\n<p>当内部有多个微服务体系的时候，每一个体系的成熟度是不同的。例如，有一些微服务框架对同机房或CMDB路由是不支持的，当一个服务注册到了多个IDC中心，去调用它的服务的时候，即便是同机房，也可能调用到一个不是同机房的节点。这样就会无端的造成服务的延时和解析不准。</p>\n<p>即使我们基于DNS做一些解析的优化，但仍然无法完全解决服务的延时和解析不准。这是因为DNS都是IP策略的就近解析，无法根据服务的物理状态、物理信息进行路由。此外，当一个核心服务出现问题，如果缺少一个融合了多个调用方和被调用方的信息的统一的注册中心，就很难去准确判断如何去牵引，从而导致故障牵引慢。有了Nacos后，就可以接入一个统一的注册中心以及配置中心，去解决这些问题。（目前，虎牙还在微服务体系的改造过程中，未完全实现统一的注册中心）</p>\n<p>**第三，提供专线流量牵引能力。**虎牙的核心机房的流量互通，是使用专线来实现的。专线的特性就是物理建设的，而且我们的专线建设可能不像BAT那么大，例如我们专线容量的冗余只有50%，假设某个直播异常火爆，突发流量高于平常的两百倍，超过了专线的建设能力，这时候一个服务就有可能会导致全网故障。但是，通过全局的注册中心和调动能力，我们就可以把流量牵引到其他地方，例如迁移到公网，甚至牵引到一个不存在的地址，来平衡一下。即便某个服务出现问题，也不会影响我们的全局服务。</p>\n<p><strong>第四，支持服务端的多种调度需求</strong>，包括同机房路由、同机器路由，以及同机架路由，Nacos都可以去做适配。此外，基于Nacos 的DNS-F功能，我们还实现了加速外部域名解析和服务故障牵引秒级生效。</p>\n<p>##DNS - F 的应用场景</p>\n<p><img src=\"https://yqfile.alicdn.com/7cecef1baea37febe4ec6906267d07b030552f3b.jpeg\" alt=\"0004\"></p>\n<p>这张图是Nacos DNS-F的一个具体实现，实际上是拦截了OS层的DNS请求。如果经过DNS的域名是内部服务，它就会从Nacos Server 获取结果，如果不是，就会转发到其它的LocalDNS进行解析。</p>\n<p><img src=\"https://yqfile.alicdn.com/8cb3cf8a96a1bc5a2a56a8230117b40294c7da9c.jpeg\" alt=\"0005\"></p>\n<p>以数据库高可用的应用场景为例，我们的数据库切换效率比较低，依赖业务方修改配置，时效不确定，通常需要10分钟以上（备注：我们的数据库实际上已经实现了主备的功能，但当一个主服务出现问题的时候，总是要去切换IP。）切换IP的过程中，依赖运维和开发的协作，这是一个比较长的过程。</p>\n<p>引入DNS后，当主出现问题的时候，就可以很快的用另外一个主的IP来进行替换，屏蔽故障，而且节点的故障检测和故障切换都可以自动完成，并不依赖运维和开发的协作，节省了时间。当然，这个场景的解法有很多，比如说使用MySQL - Proxy也可以去解这个问题，但我们的MySQL - Proxy还在建设中，想尽快的把这个问题解决，所以采用了DNS的方式。</p>\n<p>下面我们再着重分享下基于DNS-F对LocalDNS的优化。虎牙还没有去建设自己的LocalDNS，大部分使用的是一些公共的DNS，大致有以下这些组成。</p>\n<p><img src=\"https://yqfile.alicdn.com/232023934e87766f6e336858783ab85c24b324a0.jpeg\" alt=\"0006\"></p>\n<p>这种组成方式会存在一个问题。假设服务突然一下崩溃后，之后服务又马上正常了，这种情况我们无法重现去找到崩溃原因。因为很多场景下，是一个公共DNS的请求超时导致的，甚至一个解析失败导致的，在那一刻，因为无法保留现场的，所以就发现不了问题。</p>\n<p>以我们的监测数据来看，DNS解析错误的比例达到1‰左右，超时比例将更高。意思是在使用公共DNS的情况下，服务有1‰的几率是会超时或失败，如果服务没有做好容错，就会出现异常。同时，一些公共DNS解析的延时都是不定的，比如在亚马逊上一些比较不好的节点，它的延时会比较高，平均超过三四十毫秒。</p>\n<p><img src=\"https://yqfile.alicdn.com/817a1aacf83e650a108d0cfdf50c93cae19e8adc.jpeg\" alt=\"0007\"></p>\n<p>然后我们基于DNS-F对LocalDNS做了一些优化。优化结果如下：</p>\n<ul>\n<li>平均解析时间从之前的超过两百毫秒降低到两毫秒以下；</li>\n<li>缓存命中率从92%提升到了99%以上；</li>\n<li>解析失败率之前是1‰，现在基本上没有了。</li>\n</ul>\n<p>优化的效果也体现在我们的风控服务上，平均延迟下降10ms，服务超时比例下降25%，降低了因延迟或服务超时导致的用户上传的图片或文字违规但未被审核到的风险。</p>\n<p>##服务注册的实践</p>\n<p>虎牙的核心业务是跑在Tars上的。</p>\n<blockquote>\n<p>Tars：腾讯开源的一款微服务框架。</p>\n</blockquote>\n<p>Tars主要是支持C++，但对Java、PHP等开发语言的支持力度比较差，这就使得我们非C++的业务方去调用它就会很别扭。引入Nacos以后，我们通过Nacos支持的DNS协议来实现服务发现过程中对全语言的支持。</p>\n<p>当然，Nacos不只是一个注册中心，它具备了融合多个数据中心的能力，支持多数据源的同步，例如，我们目前已经支持了Taf（虎牙内部的一个重要微服务体系）、Nacos自身、ZooKeeper、以及K8S上一些服务注册的同步。</p>\n<p><img src=\"https://yqfile.alicdn.com/c1625c404950f858283a40e98bb82ab142e39de5.jpeg\" alt=\"0008\"></p>\n<p>同时，基于Nacos集群的双向同步功能(Nacos-Sync)，我们实现了国内的两个可用区，以及国外的多个可用区之间的数据值同步，最终实现了一处注册、多地可读。</p>\n<p>Nacos-Sync是事件机制，即同步任务通过事件触发，可以灵活地开启和关闭你要同步的任务，然后根据服务变化事件触发监听，保证实时性，最后通过定时的全量突发同步事件，保证服务数据的最终一致。同时，Nacos-Sync也支持服务心跳维持，即多个数据中心的心跳，可以使用Nacos-Sync代理要来实现远端同步。此外，也支持心跳与同步任务绑定，便于灵活控制。</p>\n<p>由于Taf上有数万个注册服务，同步的量特别大，所以我们在Nacos-Sync做了一些改造，通过任务分片来实现数万服务同步的可用性保障。改造步骤是先以服务为粒度定义任务，然后在多个分片上分散任务负载，最后以单分片多副本来保证任务可用性。</p>\n<p>##对接 CMDB，实现就近访问</p>\n<p>在服务进行多机房或者多地域部署时，跨地域的服务访问往往延迟较高，一个城市内的机房间的典型网络延迟在1ms左右，而跨城市的网络延迟，例如上海到北京大概为30ms。此时自然而然的一个想法就是能不能让服务消费者和服务提供者进行同地域访问。</p>\n<p>Nacos定义了一个SPI接口，里面包含了与第三方CMDB约定的一些方法。用户依照约定实现了相应的SPI接口后，将实现打成Jar包放置到Nacos安装目录下，重启Nacos即可让Nacos与CMDB的数据打通。</p>\n<p><img src=\"https://yqfile.alicdn.com/d8020624cc008a9452224b18768946d5a5e1b9b7.jpeg\" alt=\"0009\"></p>\n<p>在实际的落地过程中，我们是在DNS-F接入Taf，在DNS-F上实现Taf的中控接口，无缝对接Taf的sdk。DNS-F提供缓存负载均衡和实例信息，Nacos则提供负载均衡信息的查询接口。</p>\n<p>##服务配置的实践</p>\n<p>虎牙的域名（<a href=\"http://www.huya.com\">www.huya.com</a>）会接入华南、华中、华北多个IDC机房，每个机房都会建设一个Nginx去做负载均衡，经过负载均衡的流量会通过专线返回到我们的后端服务器上。在这个过程中，如果我们去修改一个在中间的配置，需要下发到多个机房的上百个负责负载均衡的机器上，如果出现配置下发不及时，或下发配置失败，极大可能会出现故障，同时，负责均衡服务的机器对弹性能力的要求较高，在业务高峰如果不能快速扩容，容易出现全网故障。</p>\n<p><img src=\"https://yqfile.alicdn.com/72ecb3dd72d5347932f97b5efd3433ac2bb52a03.jpeg\" alt=\"0010\"></p>\n<p>传统的配置下发方式是通过服务端下发文件更新配置，更新配置生效时间长，由于需要预先知道负责均衡集群的机器信息，扩缩容需要等元信息同步以后才能接入流量，扩容流量的接入时间较长。</p>\n<p>引入Nacos后，我们采用了配置中心监听方式，通过客户端主动监听配置更新，配置便可秒级生效，新扩容服务主动拉取全量配置，流量接入时长缩短3分钟+。</p>\n<p>##虎牙对 Nacos 改造和升级的总结</p>\n<p>引入Nacos的过程中，我们所做的改造和升级总结如下。</p>\n<p>一是在<strong>DNS-F</strong>上，我们增加了对外部域名的预缓存的支持，Agent的监控数据对接到公司的内部监控，日志输出也对接到内部的日志服务，然后和公司的CMDB对接，并实现了DNS-F Cluster集群。我们之所以去构建一个DNS-FCluster集群，是为了避免内存、硬盘或版本问题导致的DNS服务无效，有了DNS-F Cluster集群，当本地Agent出现问题的时候，就可以通过集群去代理和解析DNS请求。</p>\n<p>二是在<strong>Nacos-Sync</strong>上，我们对接了TAF注册服务和K8S注册服务，以及解决了多数据中心环形同步的问题。</p>\n<p>三是在<strong>Nacos CMDB</strong>上，我们对Nacos CMDB进行了扩展，对接了虎牙自己的CMDB，并对接了内部的负载均衡策略。</p>\n<p>###本文作者\n张波，社区ID zhangjimmy，Nacos Committer，虎牙基础保障部中间件团队负责人，阿里云MVP。</p>\n<p>###其他服务化改造实践：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;mid=2247485166&amp;idx=1&amp;sn=3c7d87b4d97d0b9e96c178c70769d493&amp;chksm=fdeb348eca9cbd98ef37dc628b3f8e22d1b86f2969e5fa2527a631d5e04cc59f326bf2494a6a&amp;scene=21#wechat_redirect\">网易考拉在服务化改造方面的实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;mid=2247485166&amp;idx=2&amp;sn=2b18fb22d69ecb50e5daf550ad076b3b&amp;chksm=fdeb348eca9cbd9814f82b3cdd8d6b4dff682d1b7a29d0515f08a70997e1f9e6bfaf37413ca5&amp;scene=21#wechat_redirect\">微众银行的金融级消息服务平台建设实践和思考</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;mid=2247485392&amp;idx=4&amp;sn=e03c4c7b6d8bb9bbced7fc79615bb5a7&amp;chksm=fdeb35b0ca9cbca6a4bd49ded82c2c4186fbc957a17fb86c80aa4a39180fcf4fc0bed69f84e7&amp;scene=21#wechat_redirect\">消息规模超千亿，同程艺龙的消息系统建设实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;mid=2247484792&amp;idx=3&amp;sn=6e05c4ccb48dd1ba69893ec39b753e1d&amp;chksm=fdeb3718ca9cbe0eb891f820d6cb041b127fe2511f601db46031c46c4881a1ab657d17e406f7&amp;scene=21#wechat_redirect\">滴滴出行基于RocketMQ构建企业级消息队列服务的实践</a></li>\n</ul>\n",
  "title": "虎牙直播在微服务改造方面的实践和总结",
  "keywords": "nacos,虎牙直播",
  "description": "虎牙直播在微服务改造方面的实践和总结"
}