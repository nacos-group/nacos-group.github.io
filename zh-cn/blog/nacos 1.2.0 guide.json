{
  "filename": "nacos 1.2.0 guide.md",
  "__html": "<h1>Nacos 1.2.0 权限控制介绍和使用</h1>\n<p><a name=\"bc2d5709\"></a></p>\n<h1>Nacos权限控制设计方案</h1>\n<p><a name=\"If4qS\"></a></p>\n<h2>方案背景</h2>\n<p>Nacos自开源依赖，权限控制一直需求比较强烈，这也反应了用户需求将Nacos部署到生产环境的需求。最新发布的Nacos 1.2.0版本已经支持了服务发现和配置管理的权限控制，保障用户安全上生产。本文主要介绍Nacos权限控制的设计方案和使用指南。</p>\n<p><a name=\"YBdcs\"></a></p>\n<h3>什么是权限控制？</h3>\n<p>在分布式服务调用时，需要对未知的或者不受信任的请求来源的请求进行识别和拒绝。权限控制一般分为两个阶段：身份识别（Authentication）和权限识别（Authorization）。身份认证主要确定访问者的身份，权限识别则判断这个访问者是否有对应资源的权限。</p>\n<p>在Nacos的场景中，配置管理的权限控制指的是设置某个配置能否被某个用户读写，这个比较好理解，没有权限的用户旧无法读取或者写入对应的配置。服务发现的权限控制指的是用户是否有权限进行某个服务的注册或者订阅，这里需要注意的是服务发现的权限控制只能够控制用户是否可以从Nacos获取到服务的地址或者在Nacos上修改服务的地址。但是如果已经获取到了服务的地址，Nacos无法在服务真正调用时进行权限控制，这个时候的权限控制需要由服务框架来完成。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/333810/1576216016307-2da56934-917f-46ec-b3eb-a221bc91a9e0.png#align=left&amp;display=inline&amp;height=240&amp;name=image.png&amp;originHeight=480&amp;originWidth=1904&amp;size=271408&amp;status=done&amp;style=none&amp;width=952#align=left&amp;display=inline&amp;height=480&amp;originHeight=480&amp;originWidth=1904&amp;status=done&amp;style=none&amp;width=1904\" alt=\"image.png\"></p>\n<p><a name=\"TvavD\"></a></p>\n<h3>常见实现方式</h3>\n<p><a name=\"xDBnq\"></a></p>\n<h4>认证（Authentication）</h4>\n<ul>\n<li>用户名+密码</li>\n<li>Cookie（只适用于浏览器）</li>\n<li>Session</li>\n<li>Token（JWT，Oauth，LDAP，SAML，OpenID）</li>\n<li>AK/SK\n<a name=\"vqrqi\"></a></li>\n</ul>\n<h4>鉴权（Authorization）</h4>\n<ul>\n<li>ACL： 规定<strong>资源</strong>可以被哪些<strong>主体</strong>进行哪些操作；</li>\n<li>DAC： 规定<strong>资源</strong>可以被哪些<strong>主体</strong>进行哪些操作 同时，<strong>主体</strong>可以将<strong>资源</strong>的权限，授予其他<strong>主体</strong>；</li>\n<li>MAC：a. 规定<strong>资源</strong>可以被哪些类别的<strong>主体</strong>进行哪些<strong>操作</strong> b. 规定<strong>主体</strong>可以对哪些等级的<strong>资源</strong>进行哪些<strong>操作</strong> 当一个<strong>操作</strong>，同时满足a与b时，允许<strong>操作</strong>；</li>\n<li>RBAC： a. 规定<strong>角色</strong>可以对哪些<strong>资源</strong>进行哪些<strong>操作</strong> b. 规定<strong>主体</strong>拥有哪些<strong>角色</strong>当一个操作，同时满足a与b时，允许<strong>操作</strong>；</li>\n<li>ABAC： 规定哪些<strong>属性</strong>的<strong>主体</strong>可以对哪些<strong>属性</strong>的<strong>资源</strong>在哪些<strong>属性</strong>的情况下进行哪些<strong>操作</strong>。</li>\n</ul>\n<p><a name=\"liyG7\"></a></p>\n<h2>方案详情</h2>\n<p>Nacos的权限控制，目标是能够满足用户基本的鉴权需求，同时能够保持扩展性，可以支持去对接用户自带的用户管理系统或者鉴权系统，包括后面和K8S生态以及Service Mesh生态能够无缝的融合。基于这样的考虑，目前Nacos权限控制的设计是自带一个基本的实现，然后可以支持用户扩展。具体的设计如下。</p>\n<p><a name=\"H0kp9\"></a></p>\n<h3>模块设计</h3>\n<p>整体的模块设计是尽量将鉴权的逻辑抽象出来，不在服务发现模块或者配置管理模块添加相关的逻辑。通过配置文件可以选择当前使用的鉴权系统。Nacos自带的认证系统使用JWT Token，自带的鉴权系统使用的是RBAC。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/333810/1576219027093-45345003-c583-46ec-a161-01b5f4b3ff47.png#align=left&amp;display=inline&amp;height=450&amp;name=image.png&amp;originHeight=900&amp;originWidth=1744&amp;size=699757&amp;status=done&amp;style=none&amp;width=872#align=left&amp;display=inline&amp;height=900&amp;originHeight=900&amp;originWidth=1744&amp;status=done&amp;style=none&amp;width=1744\" alt=\"image.png\"></p>\n<p><a name=\"jeLdT\"></a></p>\n<h3>认证算法</h3>\n<p>对于用户来说，不管是在控制台还是在客户端，都是上传用户名和密码来获取一个token，然后后续的每一次到Nacos的请求都会带上这个token来表明身份。这个token会有一个失效时间，对于控制台来说，只需要直接提示用户重新登录即可，对于客户端则需要有一个定期到Nacos刷新token的逻辑。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/333810/1576219050917-51013ce2-49f3-4a86-b5f9-bd07fc88f8e8.png#align=left&amp;display=inline&amp;height=368&amp;name=image.png&amp;originHeight=736&amp;originWidth=1718&amp;size=575605&amp;status=done&amp;style=none&amp;width=859#align=left&amp;display=inline&amp;height=736&amp;originHeight=736&amp;originWidth=1718&amp;status=done&amp;style=none&amp;width=1718\" alt=\"image.png\"></p>\n<p><a name=\"vSB1T\"></a></p>\n<h3>鉴权算法</h3>\n<p>Nacos自带的鉴权系统使用的是RBAC模型，可以在网上查询相关的资料。</p>\n<p><a name=\"RZZGa\"></a></p>\n<h4>数据模型</h4>\n<p>鉴权的数据模型也是基于标准的RBAC来设计的，分为用户、角色和权限三部分。用户就是由用户名和密码组成的用户信息，角色则是一个逻辑上的用户组，Nacos启动时会自带一个全局管理员的角色，只有这个全局管理员的角色可以进行添加用户、添加角色、添加授权等操作，保证安全性。而权限则是由资源+动作来组成。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/333810/1576736418792-936a9d1a-5095-47fc-9f87-230abed38384.png#align=left&amp;display=inline&amp;height=451&amp;name=image.png&amp;originHeight=902&amp;originWidth=1834&amp;size=438246&amp;status=done&amp;style=none&amp;width=917#align=left&amp;display=inline&amp;height=902&amp;originHeight=902&amp;originWidth=1834&amp;status=done&amp;style=none&amp;width=1834\" alt=\"image.png\"></p>\n<p><a name=\"0bd4753c\"></a></p>\n<h3>接口设计</h3>\n<p>以下接口涉及到登录和鉴权的所有逻辑，这些接口除了登录接口，其他接口都只能由全局管理员来调用。</p>\n<p><a name=\"7d94de1c\"></a></p>\n<h4>用户管理</h4>\n<ul>\n<li>创建用户：POST<br />\n/nacos/v1/auth/users?username=xx&amp;password=yy</li>\n<li>删除用户：DELETE /nacos/v1/auth/users?username=xx&amp;password=yy</li>\n<li>更新用户：PUT /nacos/v1/auth/users?username=xx&amp;oldPassword=yy&amp;newPassword=zz</li>\n<li>登录：POST<br />\n/nacos/v1/auth/users/login?username=xxx&amp;password=yyy</li>\n</ul>\n<p><a name=\"3f856ec2\"></a></p>\n<h4>角色管理</h4>\n<ul>\n<li>创建角色/绑定用户到角色：POST /nacos/v1/auth/roles?role=xx&amp;username=yy</li>\n<li>删除某个用户的角色：DELETE /nacos/v1/auth/roles?role=xx&amp;username=yy</li>\n<li>获取用户的所有角色：GET /nacos/v1/auth/roles?username=xxx</li>\n</ul>\n<p><a name=\"23bbdd59\"></a></p>\n<h4>权限管理</h4>\n<ul>\n<li>给角色添加权限：POST /nacos/v1/auth/permissions?role=xxx&amp;resource=yyy&amp;action=zzz</li>\n<li>从角色删除权限：DELETE /nacos/v1/auth/permissions?role=xxx&amp;resource=yyy&amp;action=zzz</li>\n<li>获取某个角色的权限：GET /nacos/v1/auth/permissions?role=xxx</li>\n</ul>\n<p><a name=\"4Hil5\"></a></p>\n<h1>Nacos权限控制实战</h1>\n<p><a name=\"TWc9w\"></a></p>\n<h2>安装Nacos 1.2.0</h2>\n<ol>\n<li>部署包准备。可以直接下载安装包：<a href=\"https://github.com/alibaba/nacos/releases/tag/1.2.0\">https://github.com/alibaba/nacos/releases/tag/1.2.0</a>，也可以将Nacos master分支clone下来进行源码编译：</li>\n</ol>\n<pre><code class=\"language-bash\">mvn -Prelease-nacos -Dmaven.test.skip=<span class=\"hljs-literal\">true</span> clean install -U\n</code></pre>\n<ol start=\"2\">\n<li>安装包解压，然后使用distribution/nacos-mysql.sql进行数据库初始化，主要是新增了users, roles, permissions三张表，standalone模式使用distribution/schema.sql进行初始化。</li>\n<li>Server端打开权限控制开关。修改con/application.properties内容：</li>\n</ol>\n<pre><code class=\"language-json\">nacos.core.auth.enabled=true\n</code></pre>\n<p>这个开关采用了热加载模式，无需重启Server即可生效。因此当权限控制功能使用有异常时，可以直接回滚到不鉴权的模式。</p>\n<p><strong>注意：</strong> Nacos 1.2.0里登录和鉴权是绑定关系，而由于这个开关的默认值为false，因此默认启动时，是没有登录界面的，这点请读者注意。</p>\n<p><a name=\"xBJZi\"></a></p>\n<h2>使用权限控制</h2>\n<ol>\n<li>使用管理员账号登录Nacos控制台（如果页面提示错误，可以清空浏览器缓存刷新页面）：</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/333810/1580890674563-4d235fd9-983c-4b03-b45c-b1e164152ac7.png#align=left&amp;display=inline&amp;height=470&amp;name=image.png&amp;originHeight=940&amp;originWidth=2870&amp;size=274455&amp;status=done&amp;style=none&amp;width=1435#align=left&amp;display=inline&amp;height=940&amp;originHeight=940&amp;originWidth=2870&amp;status=done&amp;style=none&amp;width=2870\" alt=\"image.png\"></p>\n<p>可以看到，左侧边栏增加了一个父菜单和三个子菜单，分别用于权限控制里的用户创建、角色创建以及权限管         理。这个菜单栏只会在管理员登录的时候显示，也就意味着只有管理员才能进行权限的管理和分配。</p>\n<ol start=\"2\">\n<li>管理用户。点击“用户列表”，进入用户管理页面，可以进行用户的创建、修改和删除：</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/333810/1580890674569-a729854e-a72d-4b3b-bc4c-53f9df831f3e.png#align=left&amp;display=inline&amp;height=573&amp;name=image.png&amp;originHeight=1146&amp;originWidth=2872&amp;size=349203&amp;status=done&amp;style=none&amp;width=1436#align=left&amp;display=inline&amp;height=1146&amp;originHeight=1146&amp;originWidth=2872&amp;status=done&amp;style=none&amp;width=2872\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>管理角色。因为Nacos的自带的权限是基于角色来进行分配的，因此需要给创建好的用户绑定一些角色：</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/333810/1580890674603-f69520a1-f53e-4eb7-9186-f2963e7b3d65.png#align=left&amp;display=inline&amp;height=545&amp;name=image.png&amp;originHeight=1090&amp;originWidth=2874&amp;size=346611&amp;status=done&amp;style=none&amp;width=1437#align=left&amp;display=inline&amp;height=1090&amp;originHeight=1090&amp;originWidth=2874&amp;status=done&amp;style=none&amp;width=2874\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>管理权限。角色创建好以后，就可以给这个角色赋予特定的权限了：</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/333810/1580890674580-e22945e1-be3a-46bd-b8f3-11b38eee0786.png#align=left&amp;display=inline&amp;height=581&amp;name=image.png&amp;originHeight=1162&amp;originWidth=2876&amp;size=368264&amp;status=done&amp;style=none&amp;width=1438#align=left&amp;display=inline&amp;height=1162&amp;originHeight=1162&amp;originWidth=2876&amp;status=done&amp;style=none&amp;width=2876\" alt=\"image.png\"></p>\n<p>在“添加资源”对话框里，可以选择绑定的角色，命名空间资源以及对应的动作类型，例如在上图中，我们给角色role1绑定命名空间test的读写权限。然后又因为刚刚我们是将user1绑定到了role1上，那么user1这个用户就可以对test这个命名空间的资源进行读写操作了。</p>\n<ol start=\"5\">\n<li>使用user1登录控制台。点击控制台右上角，退出admin账号，然后用刚才创建的user1进行登录：</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/333810/1580890674574-ca6eee1f-b749-4275-897d-ab9fba0ebf80.png#align=left&amp;display=inline&amp;height=449&amp;name=image.png&amp;originHeight=898&amp;originWidth=2874&amp;size=340563&amp;status=done&amp;style=none&amp;width=1437#align=left&amp;display=inline&amp;height=898&amp;originHeight=898&amp;originWidth=2874&amp;status=done&amp;style=none&amp;width=2874\" alt=\"image.png\"></p>\n<p>如上图所示，首先是左侧的权限管理菜单消失了，因为当前用户不是管理员。其次是会弹出一个鉴权失败的提示框。不用担心，这个提示框意思是user1没有public命名空间的读权限，所以会弹出，但是不影响我们将命名空间切换到test：<br /><img src=\"https://cdn.nlark.com/yuque/0/2020/png/333810/1580890674621-bc16b2ad-4a9e-4ebc-83e8-fa41f4a0cba4.png#align=left&amp;display=inline&amp;height=536&amp;name=image.png&amp;originHeight=1072&amp;originWidth=2876&amp;size=554716&amp;status=done&amp;style=none&amp;width=1438#align=left&amp;display=inline&amp;height=1072&amp;originHeight=1072&amp;originWidth=2876&amp;status=done&amp;style=none&amp;width=2876\" alt=\"image.png\"></p>\n<p>如上图所示，我们可以看到test命名空间的配置数据了，下面我们再来介绍客户端的使用。</p>\n<ol start=\"6\">\n<li>首先依赖最新的nacos 1.2.0客户端，然后在初始化时添加如下代码：</li>\n</ol>\n<pre><code class=\"language-java\">Properties properties = <span class=\"hljs-keyword\">new</span> Properties();\nproperties.put(PropertyKeyConst.NAMESPACE, <span class=\"hljs-string\">\"99a791cf-41c4-4535-9e93-b0141652bad0\"</span>);\nproperties.put(PropertyKeyConst.SERVER_ADDR, <span class=\"hljs-string\">\"127.0.0.1:8848\"</span>);\n<span class=\"hljs-comment\">// 配置用户名：</span>\nproperties.put(PropertyKeyConst.USERNAME, <span class=\"hljs-string\">\"user1\"</span>);\n<span class=\"hljs-comment\">// 配置密码：</span>\nproperties.put(PropertyKeyConst.PASSWORD, <span class=\"hljs-string\">\"pwd1\"</span>);\nConfigService iconfig = NacosFactory.createConfigService(properties);\n</code></pre>\n<ol start=\"7\">\n<li>使用客户端进行正常的读写配置操作。</li>\n</ol>\n<p><a name=\"8eF0X\"></a></p>\n<h1>我们在招人</h1>\n<p>阿里巴巴云原生基础技术中台是隶属于阿里云基础产品事业部的核心研发团队，致力于打造稳定、标准、先进的云原生应用基础平台，推动行业面向云原生技术升级与革命。在这里，你将与来自云计算、大数据领域的顶尖技术专家亲密合作，在全球独一无二的场景和规模中从事Kubernetes、Service Mesh、Serverless、Open Application Model（OAM）、Cloud Native Microservices、OpenMessaging、Event Streaming等云原生生态核心基础技术及Apache Dubbo、Apache RocketMQ、Nacos、Arthas等顶级开源项目的研发和落地工作。在标杆级的平台上，既服务阿里巴巴全球经济体，更服务全世界的开发者用户。目前在招聘技术专家岗位，详情可参考：<a href=\"http://www.posterhr.com/html/CkgpBwD6f?from=timeline&amp;isappinstalled=0\">http://www.posterhr.com/html/CkgpBwD6f?from=timeline&amp;isappinstalled=0</a>（可以直接投递，也可以将简历直接发送到dungu.zpf#<a href=\"http://alibaba-inc.com\">alibaba-inc.com</a>。#替换为@）</p>\n",
  "link": "/zh-cn/blog/nacos 1.2.0 guide.html",
  "meta": {}
}