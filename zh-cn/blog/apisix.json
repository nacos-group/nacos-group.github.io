{
  "filename": "apisix.md",
  "__html": "<h1>背景信息</h1>\n<h2>关于 Apache APISIX</h2>\n<p>Apache APISIX 是一个动态、实时、高性能的 API 网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等丰富的流量管理功能。Apache APISIX 不仅拥有众多实用的插件，而且支持插件动态变更和热插拔。</p>\n<h2>关于 Nacos</h2>\n<p><strong>Nacos</strong> 是阿里巴巴开源的一个易于使用的动态服务发现、配置和服务管理平台。它提供了一组简单易用的特性集，可以帮助您快速实现动态服务发现，服务配置，服务元数据及流量管理，让您更敏捷和容易地构建，交付和管理微服务平台。Nacos 是构建以“服务”为中心的现代应用架构（例如微服务范式、云原生范式）的服务基础设施。</p>\n<h1>注册中心</h1>\n<h2>什么是注册中心</h2>\n<p>服务注册中心是服务要实现服务化管理的核心组件，类似于目录服务的作用，也是微服务架构中最基础的设施之一，主要用来存储服务信息，譬如服务提供者 URL 、路由信息等。注册中心的实现是通过一种映射的方式，将复杂的服务端信息映射为简单易懂的信息提供给客户端。</p>\n<p>注册中心的核心功能为以下三点：</p>\n<ol>\n<li>服务注册：<strong>服务提供方</strong>向<strong>注册中心</strong>进行注册。</li>\n<li>服务发现：<strong>服务消费方</strong>可以通过注册中心寻找到服务提供方的调用路由信息。</li>\n<li>健康检测：确保注册到注册中心的服务节点是可以被正常调用的，避免无效节点导致的调用资源浪费等问题。</li>\n</ol>\n<h2>为什么需要注册中心？</h2>\n<p>注册中心本质上是为了<strong>解耦服务提供者和服务消费者</strong>，在微服务体系中，各个业务服务之间会频繁互相调用，并且需要对各个服务的 IP、port 等路由信息进行统一的管理。但是要如何进行管理呢？我们可以通过注册中心的 <strong>服务注册</strong> 功能将已有服务的相关信息提供到统一的注册中心进行管理。</p>\n<p>通过上述描述，您可以了解到注册中心可以帮助用户通过映射快速找到服务和服务地址。随着业务更新迭代，服务会频繁发生变化，在服务端中注册了新的服务或者服务宕机后，客户端仍然可以通过注册中心的 <strong>服务发现</strong> 功能拉取服务列表，如果注册中心的服务节点发生变更，注册中心会发送请求通知客户端重新拉取。</p>\n<p>如果服务端的服务突然宕机，并且没有向注册中心反馈，客户端可以通过注册中心的<strong>健康检查</strong>功能，进行固定时间间隔的主动上报心跳方式向服务端表明自己的服务状态。如果服务状态异常，则会通知注册中心，注册中心可以及时把已经宕机的服务节点进行剔除，避免资源的浪费。</p>\n<h2>Apache APISIX + Nacos 为用户提供了什么应用场景？</h2>\n<p>Apache APISIX + Nacos 可以将各个微服务节点中与业务无关的各项控制，集中在 Apache APISIX 中进行统一管理，即通过Apache APISIX 实现接口服务的代理和路由转发的能力。各个微服务在 Nacos 上注册后，Apache APISIX 可以通过 Nacos 的服务发现功能获取服务列表，查找对应的服务地址从而实现动态代理。</p>\n<p><img src=\"/img/blog/apisix.png\" alt=\"img\"></p>\n<h1>Apache APISIX 基于 Nacos 实现服务发现</h1>\n<h2>前提条件</h2>\n<p>本文操作基于以下环境进行。</p>\n<ul>\n<li>操作系统 Centos 7.9。</li>\n<li>已安装 Apache APISIX 12.1.0，详情请参考：<a href=\"https://apisix.apache.org/zh/docs/apisix/how-to-buildhttps://apisix.apache.org/zh/docs/apisix/how-to-build\">Apache APISIX how-to-bulid</a>。</li>\n<li>已安装 Nacos 2.0.4 及以上版本，详情请参考：<a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">quick start</a>。</li>\n<li>已安装 Node.js，详情请参考：<a href=\"https://github.com/nodejs/help/wiki/Installation\">node.js Installation</a>。</li>\n</ul>\n<h2>步骤一：服务注册</h2>\n<ol>\n<li>使用 Node.js 的 Koa 框架在 3005 端口启动一个简单的测试服务作为<a href=\"https://apisix.apache.org/zh/docs/apisix/admin-api#upstream\">上游（Upstream）</a>。</li>\n</ol>\n<pre><code class=\"language-JavaScript\"><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'koa'</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa();\n\napp.use(<span class=\"hljs-keyword\">async</span> ctx =&gt; {\n  ctx.body = <span class=\"hljs-string\">'Hello World'</span>;\n});\n\napp.listen(<span class=\"hljs-number\">3005</span>);\n</code></pre>\n<ol start=\"2\">\n<li>在命令行中通过请求 Nacos Open API 的方式进行服务注册。</li>\n</ol>\n<pre><code class=\"language-Bash\">curl -X POST <span class=\"hljs-string\">'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=APISIX-NACOS&amp;ip=127.0.0.1&amp;port=3005&amp;ephemeral=false'</span>\n</code></pre>\n<ol start=\"3\">\n<li>执行服务注册后使用以下命令查询当前服务情况。</li>\n</ol>\n<pre><code class=\"language-Bash\">curl -X GET <span class=\"hljs-string\">'http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=APISIX-NACOS'</span>\n</code></pre>\n<p>正确返回结果示例如下：</p>\n<pre><code class=\"language-JSON\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"DEFAULT_GROUP@@APISIX-NACOS\"</span>,\n  <span class=\"hljs-attr\">\"groupName\"</span>: <span class=\"hljs-string\">\"DEFAULT_GROUP\"</span>,\n  <span class=\"hljs-attr\">\"clusters\"</span>: <span class=\"hljs-string\">\"\"</span>,\n  <span class=\"hljs-attr\">\"cacheMillis\"</span>: <span class=\"hljs-number\">10000</span>,\n  <span class=\"hljs-attr\">\"hosts\"</span>: [\n    {\n      <span class=\"hljs-attr\">\"instanceId\"</span>: <span class=\"hljs-string\">\"127.0.0.1#3005#DEFAULT#DEFAULT_GROUP@@APISIX-NACOS\"</span>,\n      <span class=\"hljs-attr\">\"ip\"</span>: <span class=\"hljs-string\">\"127.0.0.1\"</span>,\n      <span class=\"hljs-attr\">\"port\"</span>: <span class=\"hljs-number\">3005</span>,\n      <span class=\"hljs-attr\">\"weight\"</span>: <span class=\"hljs-number\">1.0</span>,\n      <span class=\"hljs-attr\">\"healthy\"</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">\"enabled\"</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">\"ephemeral\"</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">\"clusterName\"</span>: <span class=\"hljs-string\">\"DEFAULT\"</span>,\n      <span class=\"hljs-attr\">\"serviceName\"</span>: <span class=\"hljs-string\">\"DEFAULT_GROUP@@APISIX-NACOS\"</span>,\n      <span class=\"hljs-attr\">\"metadata\"</span>: {},\n      <span class=\"hljs-attr\">\"instanceHeartBeatInterval\"</span>: <span class=\"hljs-number\">5000</span>,\n      <span class=\"hljs-attr\">\"instanceHeartBeatTimeOut\"</span>: <span class=\"hljs-number\">15000</span>,\n      <span class=\"hljs-attr\">\"ipDeleteTimeout\"</span>: <span class=\"hljs-number\">30000</span>,\n      <span class=\"hljs-attr\">\"instanceIdGenerator\"</span>: <span class=\"hljs-string\">\"simple\"</span>\n    }\n  ],\n  <span class=\"hljs-attr\">\"lastRefTime\"</span>: <span class=\"hljs-number\">1643191399694</span>,\n  <span class=\"hljs-attr\">\"checksum\"</span>: <span class=\"hljs-string\">\"\"</span>,\n  <span class=\"hljs-attr\">\"allIPs\"</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">\"reachProtectionThreshold\"</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">\"valid\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h2>步骤二：新增 Nacos 路由</h2>\n<p>使用 Apache APISIX 提供的 Admin API 创建一个新的<a href=\"https://apisix.apache.org/zh/docs/apisix/admin-api#route\">路由（Route）</a>，APISIX 通过 <code>upstream.discovery_type</code> 字段选择使用的服务发现类型，<code>upstream.service_name</code> 需要与注册中心的对应服务名进行关联，因此创建路由时指定服务发现类型为 <code>nacos</code> 。</p>\n<pre><code class=\"language-Shell\">curl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -i -d '\n{\n    \"uri\": \"/nacos/*\",\n    \"upstream\": {\n        \"service_name\": \"APISIX-NACOS\",\n        \"type\": \"roundrobin\",\n        \"discovery_type\": \"nacos\"\n    }\n}'\n</code></pre>\n<p>在上述命令中，请求头 <code>X-API-KEY</code> 是 Admin API 的访问 token，可以在 <code>conf/config.yaml</code> 文件中的 <code>apisix.admin_key.key</code> 查看。</p>\n<p>添加成功后，正确返回结果示例如下：</p>\n<pre><code class=\"language-JSON\">{\n  <span class=\"hljs-attr\">\"action\"</span>: <span class=\"hljs-string\">\"set\"</span>,\n  <span class=\"hljs-attr\">\"node\"</span>: {\n    <span class=\"hljs-attr\">\"key\"</span>: <span class=\"hljs-string\">\"\\/apisix\\/routes\\/1\"</span>,\n    <span class=\"hljs-attr\">\"value\"</span>: {\n      <span class=\"hljs-attr\">\"update_time\"</span>: <span class=\"hljs-number\">1643191044</span>,\n      <span class=\"hljs-attr\">\"create_time\"</span>: <span class=\"hljs-number\">1643176603</span>,\n      <span class=\"hljs-attr\">\"priority\"</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-attr\">\"uri\"</span>: <span class=\"hljs-string\">\"\\/nacos\\/*\"</span>,\n      <span class=\"hljs-attr\">\"upstream\"</span>: {\n        <span class=\"hljs-attr\">\"hash_on\"</span>: <span class=\"hljs-string\">\"vars\"</span>,\n        <span class=\"hljs-attr\">\"discovery_type\"</span>: <span class=\"hljs-string\">\"nacos\"</span>,\n        <span class=\"hljs-attr\">\"scheme\"</span>: <span class=\"hljs-string\">\"http\"</span>,\n        <span class=\"hljs-attr\">\"pass_host\"</span>: <span class=\"hljs-string\">\"pass\"</span>,\n        <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"roundrobin\"</span>,\n        <span class=\"hljs-attr\">\"service_name\"</span>: <span class=\"hljs-string\">\"APISIX-NACOS\"</span>\n      },\n      <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"1\"</span>,\n      <span class=\"hljs-attr\">\"status\"</span>: <span class=\"hljs-number\">1</span>\n    }\n  }\n}\n</code></pre>\n<p>除此之外，您还可以在 <code>upstream.discovery_args</code> 中传递其他服务相关参数用于指定服务所在的命名空间或组别，具体内容可参考下表：</p>\n<table>\n<thead>\n<tr>\n<th><strong>名字</strong></th>\n<th><strong>类型</strong></th>\n<th><strong>可选项</strong></th>\n<th><strong>默认值</strong></th>\n<th><strong>有效值</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>namespace_id</td>\n<td>string</td>\n<td>可选</td>\n<td>public</td>\n<td></td>\n<td>服务所在的命名空间</td>\n</tr>\n<tr>\n<td>group_name</td>\n<td>string</td>\n<td>可选</td>\n<td>DEFAULT_GROUP</td>\n<td></td>\n<td>服务所在的组</td>\n</tr>\n</tbody>\n</table>\n<h2>步骤三：验证配置结果</h2>\n<p>使用以下命令发送请求至需要配置的路由。</p>\n<pre><code class=\"language-Shell\">curl -i http://127.0.0.1:9080/nacos/\n</code></pre>\n<p>正常返回结果示例如下：</p>\n<pre><code class=\"language-Apache\"><span class=\"hljs-attribute\">HTTP</span>/1.1 200 OK\n<span class=\"hljs-attribute\">Content</span>-Type: text/plain; charset=utf-8\n<span class=\"hljs-attribute\">Content</span>-Length: 11\n<span class=\"hljs-attribute\">Connection</span>: keep-alive\n<span class=\"hljs-attribute\">Date</span>: Thu, 27 Jan 2022 00:48:26 GMT\n<span class=\"hljs-attribute\">Server</span>: APISIX/2.12.0\n\n<span class=\"hljs-attribute\">Hello</span> World\n</code></pre>\n<p>通过示例看到，Apache APISIX 中新增的路由已经可以通过 Nacos 服务发现找到正确的服务地址，并正常响应。</p>\n<h1>总结</h1>\n<p>本文为大家介绍了注册中心的概念以及 Apache APISIX 如何配合 Nacos 实现基于服务发现的路由代理。实际场景中如何进行 Apache APISIX 与 Nacos 的配合使用，您需要看具体的业务需求和过往技术架构。关于 <code>nacos</code> 插件的更多说明和完整配置信息，可参考官网文档：<a href=\"https://apisix.apache.org/zh/docs/apisix/discovery/nacos\">nacos</a>。</p>\n",
  "link": "/zh-cn/blog/apisix.html",
  "meta": {
    "title": "Apache APISIX 基于 Nacos 实现服务发现",
    "keywords": "Apache APISIX",
    "description": "本文为您介绍 Apache APISIX、Nacos 基本概念以及注册中心的作用，并为您展示了 Apache APISIX 基于 Nacos 实现服务发现的具体操作"
  }
}