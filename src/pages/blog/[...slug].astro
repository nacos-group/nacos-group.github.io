---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '@components/markdownSet/MarkdownDetail.astro';
import TocComponent from '@components/markdownSet/TocComponents/TocComponent.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
import Button from '@components/common/Button.astro';
import { Icon } from "@astrojs/starlight/components";
import Sidebar from '@components/starlight/Sidebar.astro';
import { useTranslations } from '@i18n/util';
import { Pagination } from 'virtual:starlight/components';

const t = useTranslations(Astro);


export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.slug,  },
		props: post,
	}));
}

const blogArticle = {
	'article': "blog.article.technical",
	'case': "blog.article.case.best.practices",
	'ecosystem': "blog.article.ecosystem.articles",
	'announcement': "blog.activity.community.announcement",
	'release': "blog.activity.release.statement",
	'committer': "page.blog.news.personnel.promotion",
	'cooperate': "page.blog.news.community.cooperation",
	"activity-preview": "blog.activity.preview.event",
	"activity-detail": "blog.activity.detail.event",
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;

const { Content, headings } = await post.render();

const posts = await getCollection("blog");

const sortedPosts = posts.sort(
		(a,b)=> new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf()
);

const articlePosts = [{
	type: 'group',
	label: blogArticle[post.data.category] ? t(blogArticle[post.data.category]) : post.data.category,
	entries: []
}]

let currentIndex

sortedPosts.forEach((item) => {
	if ( item.data.category === post.data.category ) {
		if (post.id === item.id) currentIndex = articlePosts[0].entries.length
		articlePosts[0].entries.push({
			type: 'link',
			label: item.data.title,
			href: `/blog/${item.slug}/`,
			isCurrent: post.id === item.id,
			attrs: {}
		})
	}
});

const prev = articlePosts[0].entries[currentIndex - 1]
const next = articlePosts[0].entries[currentIndex + 1]
---

<BaseLayout 
	align='docs' 
	title="Nacos Blog"
>
	<div>
		<div class="w-[20%] sidebar-content fixed overflow-auto h-full hidden 2xl:inline-block xl:inline-block lg:inline-block md:inline-block">
			<Sidebar sidebar={articlePosts} />
		</div>
		<div class=" w-full 2xl:ml-[20%] xl:ml-[20%] lg:ml-[20%] md:ml-[20%] 2xl:w-[50%] xl:w-[50%] lg:w-[50%] md:w-[50%] inline-block">
			<div id="back-btn" class="pt-4 pl-6">
				<Button
					type='normal'
					class='rounded-3xl'
					visibility={false}
				>
					<Icon name="left-arrow" class="text-lg align-middle" />
					<span class="ml-1">BACK</span>
				</Button>
			</div>			
			<BlogPost {...post.data}>
					<Content />
			</BlogPost>
			<div class="pb-6">
				{
					(prev || next) && (
						<Pagination
							labels={{
								"page.previousLink": t("commmon.base.page.previousLink"),
								"page.nextLink": t("commmon.base.page.nextLink"),
							}}
							pagination={{
								prev: prev,
								next: next,
							}}
						/>
					)
				}
			</div>
		</div>
		<div class="right-sidebar-panel w-[25%] fixed h-full hidden 2xl:inline-block xl:inline-block lg:inline-block md:inline-block">
			<TocComponent headings={headings} />
		</div>
	</div>

</BaseLayout>

<script>
	const url = new URL(window.location.href)
	let source = url.searchParams.get('source')
	source = source.replace(/_/g, '/')
	const backBtn: HTMLAnchorElement = document.querySelector('#back-btn a')
	backBtn.onclick = (e) => {
		e.preventDefault()
		location.href = `/${source}/`
	}
</script>

<style>
	.sidebar-content  {
		height: 100%;
    padding: 1rem var(--sl-sidebar-pad-x) 0;
    flex-direction: column;
    gap: 1rem;
	}
	.right-sidebar-panel {
		flex-direction: column;
		justify-content: space-between;
		height: 100%;
		padding: 1rem var(--sl-sidebar-pad-x);
	}
	.right-sidebar-panel :global(h2) {
		color: var(--sl-color-white);
		font-size: var(--sl-text-h5);
		font-weight: 600;
		line-height: var(--sl-line-height-headings);
		margin-bottom: 0.5rem;
	}
	.right-sidebar-panel :global(a) {
		display: block;
		font-size: var(--sl-text-xs);
		text-decoration: none;
		color: var(--sl-color-gray-3);
		overflow-wrap: anywhere;
	}
	.right-sidebar-panel :global(a:hover) {
		color: var(--sl-color-white);
	}
</style>