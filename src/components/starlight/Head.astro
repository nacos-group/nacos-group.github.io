---
import type { z } from 'astro/zod';
import config from 'virtual:starlight/user-config';
import type { HeadConfigSchema } from '@starlight/schemas/head';
import { fileWithBase } from '@starlight/utils/base';
import { createHead } from '@starlight/utils/head';
import { localizedUrl } from '@starlight/utils/localizedUrl';
import type { Props } from '@starlight/props';
import _ from 'lodash';
import { ViewTransitions } from 'astro:transitions';

const { entry, lang } = Astro.props;
const { data } = entry;

const canonical = Astro.site
  ? new URL(Astro.url.pathname, Astro.site)
  : undefined;
const description = data.description || config.description;
const originKeywords = _.get(data, 'keywords', description);
const keywords = _.isArray(originKeywords)
  ? originKeywords.join(',')
  : originKeywords;

const headDefaults: z.input<ReturnType<typeof HeadConfigSchema>> = [
  { tag: 'meta', attrs: { name: 'aplus-core', content: 'aplus.js' } },
  { tag: 'meta', attrs: { charset: 'utf-8' } },
  {
    tag: 'meta',
    attrs: {
      name: 'viewport',
      content: 'width=device-width, initial-scale=1',
    },
  },
  {
    tag: 'title',
    content: `${data.title} ${config.titleDelimiter} ${config.title}`,
  },
  { tag: 'link', attrs: { rel: 'canonical', href: canonical?.href } },
  {
    tag: 'link',
    attrs: {
      rel: 'shortcut icon',
      href: fileWithBase(config.favicon.href),
      type: config.favicon.type,
    },
  },
  // OpenGraph Tags
  { tag: 'meta', attrs: { property: 'og:title', content: data.title } },
  { tag: 'meta', attrs: { property: 'og:type', content: 'article' } },
  { tag: 'meta', attrs: { property: 'og:url', content: canonical?.href } },
  { tag: 'meta', attrs: { property: 'og:locale', content: lang } },

  { tag: 'meta', attrs: { property: 'og:site_name', content: config.title } },
  // Keywords

  // Twitter Tags
  {
    tag: 'meta',
    attrs: { name: 'twitter:card', content: 'summary_large_image' },
  },
  { tag: 'meta', attrs: { name: 'twitter:title', content: data.title } },
  { tag: 'meta', attrs: { name: 'twitter:description', content: description } },
  {
    tag: 'meta',
    attrs: { name: 'baidu-site-verification', content: 'code-wzq5sw7io3' },
  },
];

if (description) {
  headDefaults.push({
    tag: 'meta',
    attrs: { name: 'description', content: description },
  });
  headDefaults.push({
    tag: 'meta',
    attrs: { property: 'og:description', content: description },
  });
}

if (keywords) {
  headDefaults.push({
    tag: 'meta',
    attrs: { property: 'keywords', content: keywords },
  });
}

// Link to language alternates.
if (canonical && config.isMultilingual) {
  for (const locale in config.locales) {
    const localeOpts = config.locales[locale];
    if (!localeOpts) continue;
    headDefaults.push({
      tag: 'link',
      attrs: {
        rel: 'alternate',
        hreflang: localeOpts.lang,
        href: localizedUrl(canonical, locale).href,
      },
    });
  }
}

// Link to sitemap, but only when `site` is set.
if (Astro.site) {
  headDefaults.push({
    tag: 'link',
    attrs: {
      rel: 'sitemap',
      href: fileWithBase('/sitemap-index.xml'),
    },
  });
}

// Link to Twitter account if set in Starlight config.
if (config.social?.twitter) {
  headDefaults.push({
    tag: 'meta',
    attrs: {
      name: 'twitter:site',
      content: new URL(config.social.twitter.url).pathname,
    },
  });
}

const head = createHead(headDefaults, config.head, data.head);
---

<ViewTransitions />
{
  head.map(({ tag: Tag, attrs, content }) => (
    <Tag {...attrs} set:html={content} />
  ))
}

<!--初始化SDK-->
<script>
  (function (w, d, s, q, i) {
    w[q] = w[q] || [];
    var f = d.getElementsByTagName(s)[0],
      j = d.createElement(s);
    j.async = true;
    j.id = 'beacon-aplus';
    j.setAttribute('exparams', 'userid=&aplus&sidx=aplusSidex&ckx=aplusCkx');
    j.src = '//g.alicdn.com/alilog/mlog/aplus_v2.js';
    j.crossorigin = 'anonymous';
    f.parentNode.insertBefore(j, f);
  })(window, document, 'script', 'aplus_queue');

  (function (d) {
    var t = d.createElement('script');
    t.type = 'text/javascript';
    t.async = true;
    t.src =
      '//g.alicdn.com/aes/??tracker/3.3.4/index.js,tracker-plugin-pv/3.0.5/index.js,tracker-plugin-event/3.0.0/index.js,tracker-plugin-autolog/3.0.3/index.js,tracker-plugin-survey/3.0.3/index.js,tracker-plugin-jserror/3.0.3/index.js,tracker-plugin-resourceError/3.0.3/index.js';
    t.onload = function () {
      if (window.location.hostname !== 'nacos.io') {
        return;
      }
      window.AES_CONFIG = window.AES_CONFIG || {
        // 判断当前环境
        env: 'prod',
      };
      window.aes = new AES({
        pid: 'e7WQkK',
        user_type: 6,
      });
      window.AESPluginAutologConfig = { exposure: 'auto' };
      window.AEMPluginInstances = [
        aes.use(
          AESPluginPV,
          window.AESPluginPVConfig || { enableHistory: true },
        ),
        aes.use(AESPluginEvent, window.AESPluginEventConfig || {}),
        aes.use(AESPluginSurvey, window.AESPluginEventConfig || {}),
        aes.use(AESPluginAutolog, window.AESPluginAutologConfig || {}),
        aes.use(AESPluginJSError, window.AESPluginJSError || {}),
        aes.use(AESPluginResourceError, window.AESPluginResourceError || {}),
      ];
    };
    setTimeout(function () {
      d.getElementsByTagName('body')[0].appendChild(t);
    }, 800);
  })(document);
</script>

<!--初始化Clarity SDK-->
<script type="text/javascript">
	(function(c,l,a,r,i,t,y){
			c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
			t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
			y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
	})(window, document, "clarity", "script", "l4jzj6wbhh");
</script>

<script>
  var _hmt = _hmt || [];
  (function () {
    var hm = document.createElement('script');
    hm.src = 'https://hm.baidu.com/hm.js?e3a5cec56ef8619cf9d7c2abebd509e3';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(hm, s);
  })();
</script>

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0YDFJ7LX7F"
></script>

<script>
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    dataLayer.push(arguments);
  }
  gtag('js', new Date());

  gtag('config', 'G-0YDFJ7LX7F');
</script>
